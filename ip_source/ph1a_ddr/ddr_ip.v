/************************************************************\
 **     Copyright (c) 2012-2023 Anlogic Inc.
 **  All Right Reserved.\
\************************************************************/
/************************************************************\
 ** Log	:	This file is generated by Anlogic IP Generator.
 ** File	:	D:/work/fpga2023/07_ddr_axi_fdma_test/uisrc/03_ip/ph1a_ddr/ddr_ip.v
 ** Date	:	2023 05 16
 ** TD version	:	5.6.71036
\************************************************************/

`define DRAM_DDR3 
`define USE_DEBUG 
`define USE_RESET 
`define USE_CS 
`define USE_DM 
`define CTRL_INDEX_0 
`define PPC_LOC_Y40 


//`define USE_USER_DRAM
//`define DFI_FIFO
//`define USE_APC101_BOARD
`timescale 1ps/1ps

module ddr_ip (
    
    sys_clk_p,
    sys_rstn,

`ifdef USE_CLK1
    user_clk0,
`endif
`ifdef USE_CLK2
    user_clk1,
`endif
`ifdef USE_CLK3
    user_clk2,
`endif
`ifdef USE_CLK4
    user_clk3,
`endif

    pll_locked,

// DDR bus signals
`ifdef USE_DQS_GATE
    dqs_gate,
`endif
    ddr_addr,
    ddr_ba,
    ddr_cke,

`ifdef DRAM_DDR4
    ddr_bg, 
    ddr_ck_c,
    ddr_ck_t,   
`ifdef USE_DM
    ddr_dm_dbi,
`endif
`ifdef USE_PAR_ALERT
    ddr_parity,
    ddr_alert_n,
`endif
    ddr_act_n,
    ddr_dqs_c,
    ddr_dqs_t,
`elsif DRAM_DDR3
    ddr_ck_n,
    ddr_ck_p,
    ddr_ras_n,
    ddr_cas_n,
    ddr_we_n,   
`ifdef USE_DM
    ddr_dm,
`endif
    ddr_dqs_n,
    ddr_dqs_p,
`endif

`ifdef USE_CS
    ddr_cs_n,
`endif
`ifdef USE_RESET
    ddr_reset_n,
`endif
    ddr_odt,
    ddr_dq,

//// DFI bus signals, between hard controller and users or top-level systems
    dfi_clk,
    dfi_reset_n,
    dfi_cke,
    dfi_odt,
    dfi_cs_n,
    dfi_ras_n,
    dfi_cas_n,
    dfi_we_n,
`ifdef DRAM_DDR4
    dfi_act_n,
    dfi_bg,
`ifdef USE_PAR_ALERT
    dfi_parity_in,
    dfi_alert_n,
`endif
`endif
    dfi_bank,
    dfi_address,
    dfi_wrdata_en,
    dfi_wrdata,
    dfi_wrdata_mask,
    dfi_rddata_en,
    dfi_rddata_valid,
    dfi_rddata,
    dfi_rddata_dbi_n,

    dfi_ctrlupd_req,
    dfi_ctrlupd_ack,
    dfi_phyupd_req,
    dfi_phyupd_ack,
    dfi_phyupd_type,

`ifdef USE_DEBUG
    uart_rxd,
    uart_txd,
`endif

////user dram
`ifdef USE_USER_DRAM
    apb_clk           ,
    user_update       ,
    user_ram_addr     ,
    user_ram_wr_en    ,
    user_ram_rd_en    ,
    user_ram_wr_data  ,
    user_ram_rd_data  ,
`endif

    mcu_busy          ,
    pzq_cal_done_o    ,
    pzq_cal_done_i    ,
    ddr_init_cal_done
);

parameter DEVICE              = "PH1A90";
parameter TCK                 = 1876; //memory tCK parameter, clock period in ps
parameter NCK_PER_CLK         = 4; //4,2. Fabric clk period : Memory clk period
parameter DRAM_TYPE           = "DDR3"; //"DDR3","DDR4"
parameter CTRL_INDEX          = 0;
parameter BYTE_LANE_0         = 4'b0000; //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
parameter BYTE_LANE_1         = 4'b1111;
parameter BYTE_LANE_2         = 4'b1111;
parameter DATA_CTRL_0         = 4'b0000; //[3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
parameter DATA_CTRL_1         = 4'b1111;
parameter DATA_CTRL_2         = 4'b0000;
parameter ADDR_MAP            = 216'h00000000000022222623423523822423322121423021A217223239;
parameter CK_MAP              = 24'h22B22A;
parameter BANK_MAP            = 36'h21923121B;
parameter CKE_MAP             = 24'h000_220;
parameter ODT_MAP             = 24'h000_000_236;
parameter CS_MAP              = 24'h000_000_23A;
parameter DQS_BYTE_MAP        = 216'h000000000000000000000000000000137136127126117116107106;
parameter DM_MAP              =108'h000_000_000_000_000_130_120_112_100;
parameter RAS_MAP             = 12'h200;
parameter CAS_MAP             = 12'h237;
parameter WE_MAP              = 12'h216;
parameter RESET_MAP           = 12'h215;
parameter DATA0_MAP           = 96'h10A10410210510310810B109;
parameter DATA1_MAP           = 96'h11911311A11411011511811B;
parameter DATA2_MAP           = 96'h12412212512812912A12312B;
parameter DATA3_MAP           = 96'h13913413513A133131138132;
parameter DATA4_MAP           = 96'h000000000000000000000000;
parameter DATA5_MAP           = 96'h000000000000000000000000;
parameter DATA6_MAP           = 96'h000000000000000000000000;
parameter DATA7_MAP           = 96'h000000000000000000000000;
parameter DATA8_MAP           = 96'h000000000000000000000000;
parameter LOC_DX_BYTELANE_MAP = 72'h000000000013121110;
parameter LOC_AC_BYTELANE_MAP = 32'h20212223;
parameter DQS_GATE            = "Internal" ;
parameter DQS_GATE_MAP        = 108'h000000000000000000000000000;
parameter DQS_GATE_WIDTH      = 1 ;
parameter USER_CLK_EN         = 4'b0000;
parameter CLOCK_RATE          = 50_000_000;
//--------------------------ddr parameters-----------------------
parameter ROW_WIDTH           = 14;
parameter ADDR_WIDTH          = 14;
parameter BANK_WIDTH          = 3;
parameter CK_WIDTH                    = 1; // # of CK/CK# outputs to memory
parameter ODT_WIDTH           = 1;
parameter CKE_WIDTH           = 1; // # of cke outputs
parameter CS_WIDTH            = 1; // # of unique CS outputs
parameter DQ_WIDTH            = 32;
parameter DQS_WIDTH           = 4; // # of DQS (strobe)
parameter DM_WIDTH            = 4;
parameter AC_WIDTH            = 4;
parameter BURST_TYPE          = "Sequential"; // "Sequential", "Interleaved"
parameter INTER_VREF          = "ENABLE"; //"Enable", "Disable"
parameter DCI                 = "ENABLE";
parameter DEBUG_CTRL          = "ENABLE"; // "Enable", "Disable"



/////////////////////////////  port   ///////////////////////////////////
input                           sys_clk_p;
input                           sys_rstn;
`ifdef USE_CLK1 
output                          user_clk0;
`endif
`ifdef USE_CLK2
output                          user_clk1;
`endif  
`ifdef USE_CLK3 
output                          user_clk2;
`endif  
`ifdef USE_CLK4
output                          user_clk3;
`endif
output                          pll_locked;

// DDR bus signals
`ifdef USE_DQS_GATE
inout  [DQS_GATE_WIDTH-1 : 0]   dqs_gate;
`endif
output [    ADDR_WIDTH-1 : 0]   ddr_addr;
output [    BANK_WIDTH-1 : 0]   ddr_ba;
output [     ODT_WIDTH-1 : 0]   ddr_odt;
output [     CKE_WIDTH-1 : 0]   ddr_cke;
`ifdef USE_CS
output [      CS_WIDTH-1 : 0]   ddr_cs_n;
`endif
`ifdef USE_RESET
output                          ddr_reset_n;
`endif
inout  [      DQ_WIDTH-1 : 0]   ddr_dq;

`ifdef DRAM_DDR4
output [      BG_WIDTH-1 : 0]   ddr_bg;
output [      CK_WIDTH-1 : 0]   ddr_ck_c;
output [      CK_WIDTH-1 : 0]   ddr_ck_t;
`ifdef USE_DM
inout  [      DM_WIDTH-1 : 0]   ddr_dm_dbi;
`endif
`ifdef USE_PAR_ALERT
output                          ddr_parity;
input                           ddr_alert_n;
`endif
output                          ddr_act_n;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_c;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_t;
`elsif DRAM_DDR3
output [      CK_WIDTH-1 : 0]   ddr_ck_n;
output [      CK_WIDTH-1 : 0]   ddr_ck_p;
output                          ddr_ras_n;
output                          ddr_cas_n;
output                          ddr_we_n;
`ifdef USE_DM
inout  [      DM_WIDTH-1 : 0]   ddr_dm;
`endif
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_n;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_p;
`endif

// DFI bus signals, between hard controller and users or top-level systems
output                      dfi_clk;
input  [             3:0]   dfi_reset_n;
input  [ CKE_WIDTH*4-1:0]   dfi_cke;
input  [ ODT_WIDTH*4-1:0]   dfi_odt;
input  [ CS_WIDTH *4-1:0]   dfi_cs_n;
input  [             3:0]   dfi_ras_n;
input  [             3:0]   dfi_cas_n;
input  [             3:0]   dfi_we_n;
input  [BANK_WIDTH*4-1:0]   dfi_bank;
input  [ADDR_WIDTH*4-1:0]   dfi_address;
input  [ DQS_WIDTH*4-1:0]   dfi_wrdata_en;
input  [  DQ_WIDTH*8-1:0]   dfi_wrdata;
input  [  DM_WIDTH*8-1:0]   dfi_wrdata_mask;
input  [ DQS_WIDTH*4-1:0]   dfi_rddata_en;
`ifdef DFI_FIFO
output [ DQS_WIDTH*4-1:0]   dfi_rddata_valid;
output [  DQ_WIDTH*8-1:0]   dfi_rddata;
output [  DM_WIDTH*8-1:0]   dfi_rddata_dbi_n;
`else
output reg [ DQS_WIDTH*4-1:0]   dfi_rddata_valid;
output reg [  DQ_WIDTH*8-1:0]   dfi_rddata;
output reg [  DM_WIDTH*8-1:0]   dfi_rddata_dbi_n;
`endif


`ifdef DRAM_DDR4
input  [             3:0]   dfi_act_n;
input  [  BG_WIDTH*4-1:0]   dfi_bg;
`endif

`ifdef USE_PAR_ALERT
input  [             3:0]   dfi_parity_in;
`ifdef DFI_FIFO
output [             3:0]   dfi_alert_n;
`else
output reg [         3:0]   dfi_alert_n;
`endif
`else
wire   [             3:0]   dfi_parity_in = 'd0;
`endif

input  [             1:0]   dfi_ctrlupd_req;
output [             1:0]   dfi_ctrlupd_ack;
output [             1:0]   dfi_phyupd_req;
input  [             1:0]   dfi_phyupd_ack;
output [             3:0]   dfi_phyupd_type;

`ifdef USE_USER_DRAM
// user dram signals
output  wire                apb_clk          ;
input                       user_update      ;
input  [  7:0]              user_ram_addr    ;
input                       user_ram_wr_en   ;
input                       user_ram_rd_en   ;
input  [ 31:0]              user_ram_wr_data ;
output [ 31:0]              user_ram_rd_data ;
`else
wire                        apb_clk          ;
wire                        user_update      ='d0 ;
wire   [  7:0]              user_ram_addr    ='d0 ;
wire                        user_ram_wr_en   ='d0 ;
wire                        user_ram_rd_en   ='d0 ;
wire   [ 31:0]              user_ram_wr_data ='d0 ;
`endif

// uart debug
`ifdef USE_DEBUG
input                      uart_rxd;    
output                     uart_txd;
`else
wire                       uart_rxd = 'd0;
wire                       uart_txd;
`endif
output                     mcu_busy         ;
output                     pzq_cal_done_o   ;
input                      pzq_cal_done_i   ;
output                     ddr_init_cal_done;

localparam DFI_PIPELINE_STAGE = 2     ; // 1, 2

localparam USER_SET_EN0       = 1'b0  ; // 0, 1, used to control CWL and CL
localparam USER_SET_EN1       = 1'b0  ; // 0, 1, used to control VREF, DRV and ODT
localparam HOST_VREF_RANGE    = 1'b0  ; //
localparam HOST_VREF          = 8'h10 ; //
localparam HOST_DRV           = 4'hB  ; // 480/(n+1), n=0,1,2...15 
localparam HOST_ODT           = 4'hB  ; // 480/(n+1), n=0,1,2...15
localparam CWL                = 4'h0  ; // refer to the datasheet of the component
localparam CL                 = 4'h3  ; // refer to the datasheet of the component

////  DFI temp signals,async fifo side
`ifdef DFI_FIFO
wire  [              3:0]  dfi_reset_n_temp;
wire  [  CKE_WIDTH*4-1:0]  dfi_cke_temp;
wire  [  ODT_WIDTH*4-1:0]  dfi_odt_temp;
wire  [   CS_WIDTH*4-1:0]  dfi_cs_n_temp;
wire  [              3:0]  dfi_ras_n_temp;
wire  [              3:0]  dfi_cas_n_temp;
wire  [              3:0]  dfi_we_n_temp;
`ifdef DRAM_DDR4
wire  [              3:0]  dfi_act_n_temp;
wire  [   BG_WIDTH*4-1:0]  dfi_bg_temp;
wire  [              3:0]  dfi_alert_n_temp;
wire  [              3:0]  dfi_parity_in_temp;
`endif
wire  [ BANK_WIDTH*4-1:0]  dfi_bank_temp;
wire  [ ADDR_WIDTH*4-1:0]  dfi_address_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_wrdata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_en_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_rddata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_temp;
`else // `ifndef DFI_FIFO
reg   [              3:0]  dfi_reset_n_temp;
reg   [  CKE_WIDTH*4-1:0]  dfi_cke_temp;
reg   [  ODT_WIDTH*4-1:0]  dfi_odt_temp;
reg   [   CS_WIDTH*4-1:0]  dfi_cs_n_temp;
reg   [              3:0]  dfi_ras_n_temp;
reg   [              3:0]  dfi_cas_n_temp;
reg   [              3:0]  dfi_we_n_temp;
`ifdef DRAM_DDR4
reg   [              3:0]  dfi_act_n_temp;
reg   [   BG_WIDTH*4-1:0]  dfi_bg_temp;
wire  [              3:0]  dfi_alert_n_temp;
reg   [              3:0]  dfi_parity_in_temp;
`endif
reg   [ BANK_WIDTH*4-1:0]  dfi_bank_temp;
reg   [ ADDR_WIDTH*4-1:0]  dfi_address_temp;
reg   [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_temp;
reg   [   DQ_WIDTH*8-1:0]  dfi_wrdata_temp;
reg   [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_temp;
reg   [  DQS_WIDTH*4-1:0]  dfi_rddata_en_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_rddata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_temp;
`endif


// DFI local signals, phy side
wire             dfi_clk_local;
wire  [  3:0]    dfi_reset_n_local;
wire  [  7:0]    dfi_cke_local;
wire  [  7:0]    dfi_odt_local;
wire  [  7:0]    dfi_cs_n_local;
wire  [  3:0]    dfi_act_n_local;
wire  [  3:0]    dfi_ras_n_local;
wire  [  3:0]    dfi_cas_n_local;
wire  [  3:0]    dfi_we_n_local;
wire  [  7:0]    dfi_bg_local;
wire  [ 11:0]    dfi_bank_local;
wire  [ 71:0]    dfi_address_local;
wire  [ 35:0]    dfi_wrdata_en_local;
wire  [575:0]    dfi_wrdata_local;
wire  [ 71:0]    dfi_wrdata_mask_local;
wire  [ 35:0]    dfi_rddata_en_local;
wire  [ 35:0]    dfi_rddata_valid_local;
wire  [575:0]    dfi_rddata_local;
wire  [ 71:0]    dfi_rddata_dbi_n_local;
wire  [  3:0]    dfi_parity_in_local;
wire  [  3:0]    dfi_alert_n_local;

wire             ddr_clk0;
wire             phy_clk0;
wire             ddr_clk1;
wire             phy_clk1;
wire             ddr_clk2;
wire             phy_clk2;
wire             bank31_hctrl_clk;
wire             bank32_hctrl_clk;
wire             bank33_hctrl_clk;
wire             hctrl_clk;

wire   phy_rstn        = pll_locked;

`ifdef PPC_LOC_Y80
assign dfi_clk_local   = bank33_hctrl_clk;
`elsif PPC_LOC_Y40
assign dfi_clk_local   = bank32_hctrl_clk;
`else
assign dfi_clk_local   = bank31_hctrl_clk;
`endif

assign dfi_clk         = hctrl_clk;


//// internal apb bus signals
wire             apb_clk_o   ;
wire             apb_rst_n   ;
wire [15:0]      apb_addr    ;
wire [17:0]      apb_addr_int; 
wire             apb_enable  ;
wire             apb_error   ;
wire [31:0]      apb_rdata   ;
wire             apb_ready   ;
wire [31:0]      apb_wdata   ;
wire             apb_wr_rdn  ;
wire             apb_sel     ;
wire [31:0]      user_set    ;
wire [31:0]      user_led    ;

assign apb_rst_n = pll_locked ;
assign apb_addr  = apb_addr_int[17:2];

`ifdef  PH1_DDR_SIM 
assign    apb_clk = hctrl_clk;
`else
assign    apb_clk = apb_clk_o;
`endif

ph1_logic_clk_management #(
    .BYTE_LANE_0      ( BYTE_LANE_0      ),
    .BYTE_LANE_1      ( BYTE_LANE_1      ),
    .BYTE_LANE_2      ( BYTE_LANE_2      ),
    .USER_CLK_EN      ( USER_CLK_EN      )
) u_clk(
    .sys_clk          ( sys_clk_p        ),
    .sys_rstn         ( sys_rstn         ),
    .apb_clk          ( apb_clk_o        ),
    .ddr_clk0         ( ddr_clk0         ),
    .phy_clk0         ( phy_clk0         ),
    .ddr_clk1         ( ddr_clk1         ),
    .phy_clk1         ( phy_clk1         ),
    .ddr_clk2         ( ddr_clk2         ),
    .phy_clk2         ( phy_clk2         ),
    .hctrl_clk        ( hctrl_clk        ),
    .bank31_hctrl_clk ( bank31_hctrl_clk ),
    .bank32_hctrl_clk ( bank32_hctrl_clk ),
    .bank33_hctrl_clk ( bank33_hctrl_clk ),

`ifdef USE_CLK1 
    .user_clk0        ( user_clk0        ),
`endif  
`ifdef USE_CLK2 
    .user_clk1        ( user_clk1        ),
`endif  
`ifdef USE_CLK3 
    .user_clk2        ( user_clk2        ),
`endif
`ifdef USE_CLK4         
    .user_clk3        ( user_clk3        ),
`endif

    .pll_locked       ( pll_locked       )
);

assign user_set = (USER_SET_EN1 << 28) | (USER_SET_EN0 << 24) | (HOST_VREF_RANGE << 23) | (HOST_VREF << 16) | (HOST_DRV << 12) | (HOST_ODT << 8) | (CL << 4) | CWL ;

ph1_logic_sopc_top #(
    .CLOCK_RATE        ( CLOCK_RATE       )
) u_mcu (
    .cpu_clk           ( apb_clk          ),
    .cpu_rst_n         ( pll_locked       ),
    .fpga_apb_PADDR    ( apb_addr_int     ),
    .fpga_apb_PSEL     ( apb_sel          ),
    .fpga_apb_PENABLE  ( apb_enable       ),
    .fpga_apb_PREADY   ( apb_ready        ),
    .fpga_apb_PWRITE   ( apb_wr_rdn       ),
    .fpga_apb_PWDATA   ( apb_wdata        ),
    .fpga_apb_PRDATA   ( apb_rdata        ),
    .fpga_apb_PSLVERR  ( apb_error        ),
    
    .uart_txd          ( uart_txd         ),    
    .uart_rxd          ( uart_rxd         ),

    .user_update       ( user_update      ), 
    .user_ram_addr     ( user_ram_addr    ),
    .user_ram_wr_en    ( user_ram_wr_en   ),
    .user_ram_rd_en    ( user_ram_rd_en   ),
    .user_ram_wr_data  ( user_ram_wr_data ),
    .user_ram_rd_data  ( user_ram_rd_data ),
    .user_set          ( user_set         ),
    .user_led          ( user_led         ),
    .pzq_cal_done_o    ( pzq_cal_done_o   ),
    .pzq_cal_done_i    ( pzq_cal_done_i   ),
    .mcu_busy          ( mcu_busy         ),
    .ddr_init_cal_done ( ddr_init_cal_done)
);


ph1_logic_dfi_bus_adjust #(
    .ADDR_WIDTH       (ADDR_WIDTH    ),
    .ROW_WIDTH        (ROW_WIDTH     ),
    .BANK_WIDTH       (BANK_WIDTH    ),
`ifdef DRAM_DDR4
    .BG_WIDTH         (BG_WIDTH      ),
`endif
    .ODT_WIDTH        (ODT_WIDTH     ),
    .CK_WIDTH         (CK_WIDTH      ),
    .CKE_WIDTH        (CKE_WIDTH     ),
    .CS_WIDTH         (CS_WIDTH      ),
    .DQ_WIDTH         (DQ_WIDTH      ),
    .DQS_WIDTH        (DQS_WIDTH     ),
    .DM_WIDTH         (DM_WIDTH      )
) u_dfi_bus_adjust(
    ////fifo side
    .dfi_reset_n_temp       (dfi_reset_n_temp      ),
    .dfi_cke_temp           (dfi_cke_temp          ),
    .dfi_odt_temp           (dfi_odt_temp          ),
    .dfi_cs_n_temp          (dfi_cs_n_temp         ),
    .dfi_ras_n_temp         (dfi_ras_n_temp        ),
    .dfi_cas_n_temp         (dfi_cas_n_temp        ),
    .dfi_we_n_temp          (dfi_we_n_temp         ),
`ifdef DRAM_DDR4
    .dfi_act_n_temp         (dfi_act_n_temp        ),
    .dfi_bg_temp            (dfi_bg_temp           ),
    .dfi_alert_n_temp       (dfi_alert_n_temp      ),
    .dfi_parity_in_temp     (dfi_parity_in_temp    ),
`endif
    .dfi_bank_temp          (dfi_bank_temp         ),
    .dfi_address_temp       (dfi_address_temp      ),
    .dfi_wrdata_en_temp     (dfi_wrdata_en_temp    ),
    .dfi_wrdata_temp        (dfi_wrdata_temp       ),
    .dfi_wrdata_mask_temp   (dfi_wrdata_mask_temp  ),
    .dfi_rddata_en_temp     (dfi_rddata_en_temp    ),
    .dfi_rddata_valid_temp  (dfi_rddata_valid_temp ),
    .dfi_rddata_temp        (dfi_rddata_temp       ),
    .dfi_rddata_dbi_n_temp  (dfi_rddata_dbi_n_temp ),

    ////dfi phy side
    .dfi_reset_n            (dfi_reset_n_local     ),
    .dfi_cke                (dfi_cke_local         ),
    .dfi_odt                (dfi_odt_local         ),
    .dfi_cs_n               (dfi_cs_n_local        ),
    .dfi_act_n              (dfi_act_n_local       ),
    .dfi_ras_n              (dfi_ras_n_local       ),
    .dfi_cas_n              (dfi_cas_n_local       ),
    .dfi_we_n               (dfi_we_n_local        ),
    .dfi_bg                 (dfi_bg_local          ),
    .dfi_bank               (dfi_bank_local        ),
    .dfi_address            (dfi_address_local     ),
    .dfi_parity_in          (dfi_parity_in_local   ),
    .dfi_alert_n            (dfi_alert_n_local     ),
    .dfi_wrdata_en          (dfi_wrdata_en_local   ),
    .dfi_wrdata             (dfi_wrdata_local      ),
    .dfi_wrdata_mask        (dfi_wrdata_mask_local ),

    .dfi_rddata_en          (dfi_rddata_en_local   ),
    .dfi_rddata_valid       (dfi_rddata_valid_local),
    .dfi_rddata             (dfi_rddata_local      ),
    .dfi_rddata_dbi_n       (dfi_rddata_dbi_n_local)

);


ph1_logic_ddrphy_standard #(
    .TCK                ( TCK           ),  // memory tCK parameter, clock period in ps
    .NCK_PER_CLK        ( NCK_PER_CLK   ),
    .DQS_GATE           ( DQS_GATE      ),
    .CTRL_INDEX         ( CTRL_INDEX    ),
// bank and pad position parameters about ddr bus   
    .BYTE_LANE_0        ( BYTE_LANE_0   ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1        ( BYTE_LANE_1   ),
    .BYTE_LANE_2        ( BYTE_LANE_2   ),
    .DATA_CTRL_0        ( DATA_CTRL_0   ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1        ( DATA_CTRL_1   ),
    .DATA_CTRL_2        ( DATA_CTRL_2   ),
    .ADDR_MAP           ( ADDR_MAP      ),
    .CK_MAP             ( CK_MAP        ),
    .BANK_MAP           ( BANK_MAP      ),
    .CKE_MAP            ( CKE_MAP       ),
    .ODT_MAP            ( ODT_MAP       ),
    .CS_MAP             ( CS_MAP        ),
    .DQS_GATE_MAP       ( DQS_GATE_MAP  ),
    .RESET_MAP          ( RESET_MAP     ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP     ( BANK_GROUP_MAP),
    .ACT_MAP            ( ACT_MAP       ),
    .PARITY_MAP         ( PARITY_MAP    ),
    .ALERT_MAP          ( ALERT_MAP     ),  //DDR4
    .DM_DBI_MAP         ( DM_DBI_MAP    ),
`elsif DRAM_DDR3
    .RAS_MAP            ( RAS_MAP       ),
    .CAS_MAP            ( CAS_MAP       ),
    .WE_MAP             ( WE_MAP        ),
    .DM_MAP             ( DM_MAP        ),
`endif

    .DQS_BYTE_MAP       ( DQS_BYTE_MAP  ),
    .DATA0_MAP          ( DATA0_MAP     ),
    .DATA1_MAP          ( DATA1_MAP     ),
    .DATA2_MAP          ( DATA2_MAP     ),
    .DATA3_MAP          ( DATA3_MAP     ),
    .DATA4_MAP          ( DATA4_MAP     ),
    .DATA5_MAP          ( DATA5_MAP     ),
    .DATA6_MAP          ( DATA6_MAP     ),
    .DATA7_MAP          ( DATA7_MAP     ),
    .DATA8_MAP          ( DATA8_MAP     ),
    .LOC_DX_BYTELANE_MAP( LOC_DX_BYTELANE_MAP ),
    .LOC_AC_BYTELANE_MAP( LOC_AC_BYTELANE_MAP ),

    .DQS_GATE_WIDTH     ( DQS_GATE_WIDTH),
    .ADDR_WIDTH         ( ADDR_WIDTH    ),
    .ROW_WIDTH          ( ROW_WIDTH     ),
    .BANK_WIDTH         ( BANK_WIDTH    ),
`ifdef DRAM_DDR4
    .BG_WIDTH           ( BG_WIDTH      ),
    .DM_DBI             ( DM_DBI        ),  //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    .ODT_WIDTH          ( ODT_WIDTH     ),
    .CK_WIDTH           ( CK_WIDTH      ),  // # of CK/CK# outputs to memory
    .CKE_WIDTH          ( CKE_WIDTH     ),  // # of cke outputs
    .CS_WIDTH           ( CS_WIDTH      ),  // # of unique CS outputs
    .DQ_WIDTH           ( DQ_WIDTH      ),
    .DQS_WIDTH          ( DQS_WIDTH     ),  // # of DQS (strobe)
    .DM_WIDTH           ( DM_WIDTH      ),
    .AC_WIDTH           ( AC_WIDTH      ),
        
    .INTER_VREF         ( INTER_VREF    ),  //"Enable", "Disable"
    .DCI                ( DCI           )   //"Enable", "Disable"
) u_ddrphy_standard (
    .rst_n                  ( phy_rstn      ),
    .phy_clk0               ( phy_clk0      ),  //bank0 clkin group
    .ddr_clk0               ( ddr_clk0      ),
    .phy_clk1               ( phy_clk1      ),  //bank1 clkin group
    .ddr_clk1               ( ddr_clk1      ),
    .phy_clk2               ( phy_clk2      ),  //bank2 clkin group
    .ddr_clk2               ( ddr_clk2      ),
    .lclk_0                 ( 4'd0          ),
    .lclk_1                 ( 4'd0          ),
    .lclk_2                 ( 4'd0          ),
    .bank31_hctrl_clk       ( bank31_hctrl_clk  ),
    .bank32_hctrl_clk       ( bank32_hctrl_clk  ),
    .bank33_hctrl_clk       ( bank33_hctrl_clk  ),
    .ctrlclk_en_upp         ( 9'h0          ),
    .ddrclk_en_upp          ( 9'h0          ),
    .rdclk_en_upp           ( 9'h0          ),
    .ctrlclk_en_low         ( 1'h0          ),
    .ddrclk_en_low          ( 1'h0          ),
    .rdclk_en_low           ( 1'h0          ),   

    //DDR bus signals
`ifdef USE_DQS_GATE
    .dqs_gate               ( dqs_gate      ),
`endif
    .ddr_addr               ( ddr_addr      ),
    .ddr_ba                 ( ddr_ba        ),
    .ddr_cke                ( ddr_cke       ),
    .ddr_odt                ( ddr_odt       ),
`ifdef USE_CS
    .ddr_cs_n               ( ddr_cs_n      ),
`endif
`ifdef USE_RESET
    .ddr_reset_n            ( ddr_reset_n   ),
`endif
    .ddr_dq                 ( ddr_dq        ),

`ifdef DRAM_DDR4
    .ddr_bg                 ( ddr_bg        ),     
    .ddr_ck_c               ( ddr_ck_c      ),
    .ddr_ck_t               ( ddr_ck_t      ),   
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm_dbi    ),
`endif
`ifdef USE_PAR_ALERT
    .ddr_parity             ( ddr_parity    ),
    .ddr_alert_n            ( ddr_alert_n   ),
`endif
    .ddr_act_n              ( ddr_act_n     ),
    .ddr_dqs_c              ( ddr_dqs_c     ),
    .ddr_dqs_t              ( ddr_dqs_t     ),  
`elsif DRAM_DDR3
    .ddr_ck_n               ( ddr_ck_n      ),
    .ddr_ck_p               ( ddr_ck_p      ), 
    .ddr_ras_n              ( ddr_ras_n     ),
    .ddr_cas_n              ( ddr_cas_n     ),
    .ddr_we_n               ( ddr_we_n      ),
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm        ),
`endif
    .ddr_dqs_n              ( ddr_dqs_n     ),
    .ddr_dqs_p              ( ddr_dqs_p     ), 
`endif

// controller signals, between hard controller and users or top-level systems
    .hctrl_ctl_idle          ( 1'b0          ),
    .hctrl_gpr0              (               ),
    .atpg_mode               ( 1'b0          ),

// DFI bus signals, between hard controller and users or top-level systems
    .dfi_reset_n             ( dfi_reset_n_local        ),
    .dfi_cke                 ( dfi_cke_local            ),
    .dfi_odt                 ( dfi_odt_local            ),
    .dfi_cs_n                ( dfi_cs_n_local           ),
    .dfi_act_n               ( dfi_act_n_local          ),
    .dfi_ras_n               ( dfi_ras_n_local          ),
    .dfi_cas_n               ( dfi_cas_n_local          ),
    .dfi_we_n                ( dfi_we_n_local           ),
    .dfi_bg                  ( dfi_bg_local             ),
    .dfi_bank                ( dfi_bank_local           ),
    .dfi_address             ( dfi_address_local        ),
    .dfi_wrdata_en           ( dfi_wrdata_en_local      ),
    .dfi_wrdata              ( dfi_wrdata_local         ),
    .dfi_wrdata_mask         ( dfi_wrdata_mask_local    ),
    .dfi_rddata_en           ( dfi_rddata_en_local      ),
    .dfi_rddata_valid        ( dfi_rddata_valid_local   ),
    .dfi_rddata              ( dfi_rddata_local         ),
    .dfi_rddata_dbi_n        ( dfi_rddata_dbi_n_local   ),
    .dfi_ctrlupd_req         ( dfi_ctrlupd_req          ),
    .dfi_ctrlupd_ack         ( dfi_ctrlupd_ack          ),
    .dfi_phyupd_req          ( dfi_phyupd_req           ),
    .dfi_phyupd_ack          ( dfi_phyupd_ack           ),
    .dfi_phyupd_type         ( dfi_phyupd_type          ),
    .dfi_init_start          ( 1'b0                     ),
    .dfi_data_byte_disable   ( 9'h00                    ),
    .dfi_dram_clk_disable    ( 2'b00                    ),
    .dfi_init_complete       (                          ),
    .dfi_parity_in           ( dfi_parity_in_local      ),
    .dfi_alert_n             ( dfi_alert_n_local        ),
    .dfi_lp_ctrl_req         ( 2'b00                    ),
    .dfi_lp_data_req         ( 2'b00                    ),
    .dfi_lp_wakeup           ( 2'b00                    ),
    .dfi_lp_ack              (                          ),

// debug bus signals, between hard controller and users or top-level systems
    .hctrl_jtag_trst_n       ( 1'b0        ),
    .hctrl_jtag_tclk         ( 1'b0        ),
    .hctrl_jtag_tdi          ( 1'b0        ),
    .hctrl_jtag_tdo          (             ),
    .hctrl_jtag_tdo_en       (             ),
    .hctrl_jtag_tms          ( 1'b0        ),

// APB bus signals
    .apb_clk                 ( apb_clk     ),
    .apb_rst_n               ( apb_rst_n   ),
    .apb_addr                ( apb_addr    ),
    .apb_enable              ( apb_enable  ),
    .apb_error               ( apb_error   ),
    .apb_rdata               ( apb_rdata   ),
    .apb_ready               ( apb_ready   ),
    .apb_sync_path_sel       ( 1'b0        ),
    .apb_wdata               ( apb_wdata   ),
    .apb_wr_rdn              ( apb_wr_rdn  ),
    .apb_sel                 ( apb_sel     )
);


`ifdef DFI_FIFO

wire ac_fifo_empty ;
ph1_logic_generic_async_fifo #(
`ifdef DRAM_DDR4
    .DATA_WIDTH ( 4+(CKE_WIDTH*4)+(ODT_WIDTH*4)+(CS_WIDTH *4)+4+4+4+4+(BG_WIDTH*4)+(BANK_WIDTH*4)+ (ADDR_WIDTH*4)+4 ),
`elsif DRAM_DDR3
    .DATA_WIDTH ( 4+(CKE_WIDTH*4)+(ODT_WIDTH*4)+(CS_WIDTH *4)+0+4+4+4+(         0)+(BANK_WIDTH*4)+ (ADDR_WIDTH*4)+0 ),
`endif
    .ADDR_WIDTH (2)
) u_dfi_fifo_ac (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk       ), 
    .clkr       ( dfi_clk_local ), 
    .we         ( 1'b1          ), 
    .re         (~ac_fifo_empty ), 
`ifdef DRAM_DDR4
    .di         ( {dfi_reset_n[3:0],            dfi_cke[CKE_WIDTH*4-1:0],         dfi_odt[ODT_WIDTH*4-1:0],           dfi_cs_n[CS_WIDTH *4-1:0],
                   dfi_act_n[3:0],              dfi_ras_n[3:0],                   dfi_cas_n[3:0],                     dfi_we_n[3:0],
                   dfi_bg[BG_WIDTH*4-1:0],      dfi_bank[BANK_WIDTH*4-1:0],       dfi_address[ADDR_WIDTH*4-1:0],       dfi_parity_in[3:0]}
                ),
    .dout       ( {dfi_reset_n_temp[3:0],       dfi_cke_temp[CKE_WIDTH*4-1:0],    dfi_odt_temp[ODT_WIDTH*4-1:0],      dfi_cs_n_temp[CS_WIDTH *4-1:0],
                   dfi_act_n_temp[3:0],         dfi_ras_n_temp[3:0],              dfi_cas_n_temp[3:0],                dfi_we_n_temp[3:0],
                   dfi_bg_temp[BG_WIDTH*4-1:0], dfi_bank_temp[BANK_WIDTH*4-1:0],  dfi_address_temp[ADDR_WIDTH*4-1:0],  dfi_parity_in_temp[3:0]}
                ),
`elsif DRAM_DDR3
    .di         ( {dfi_reset_n[3:0],                dfi_cke[CKE_WIDTH*4-1:0],         dfi_odt[ODT_WIDTH*4-1:0],           dfi_cs_n[CS_WIDTH *4-1:0],
                   dfi_ras_n[3:0],                  dfi_cas_n[3:0],                   dfi_we_n[3:0],
                   dfi_bank[BANK_WIDTH*4-1:0],      dfi_address[ADDR_WIDTH*4-1:0]      }
                ),
    .dout       ( {dfi_reset_n_temp[3:0],           dfi_cke_temp[CKE_WIDTH*4-1:0],    dfi_odt_temp[ODT_WIDTH*4-1:0],      dfi_cs_n_temp[CS_WIDTH *4-1:0],
                   dfi_ras_n_temp[3:0],             dfi_cas_n_temp[3:0],              dfi_we_n_temp[3:0],
                   dfi_bank_temp[BANK_WIDTH*4-1:0], dfi_address_temp[ADDR_WIDTH*4-1:0] }
                ),
`endif
    .full_flag  (               ), 
    .empty_flag ( ac_fifo_empty )
);
    
wire wr_fifo_empty ;
ph1_logic_generic_async_fifo #(
   .DATA_WIDTH ( DQS_WIDTH*4 + DQ_WIDTH*8 + DM_WIDTH*8 ),
   .ADDR_WIDTH ( 2                                     )
) u_dfi_fifo_wr (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk       ), 
    .clkr       ( dfi_clk_local ), 
    .we         ( 1'b1          ), 
    .re         (~wr_fifo_empty ), 
    .di         ( {dfi_wrdata_en     [DQS_WIDTH*4-1:0], dfi_wrdata     [DQ_WIDTH*8-1:0], dfi_wrdata_mask     [DM_WIDTH*8-1:0]} ),
    .dout       ( {dfi_wrdata_en_temp[DQS_WIDTH*4-1:0], dfi_wrdata_temp[DQ_WIDTH*8-1:0], dfi_wrdata_mask_temp[DM_WIDTH*8-1:0]} ),
    .full_flag  (               ), 
    .empty_flag ( wr_fifo_empty )
);

wire rden_fifo_empty ;
ph1_logic_generic_async_fifo #(
    .DATA_WIDTH ( DQS_WIDTH*4 ),
    .ADDR_WIDTH ( 2           )
) u_dfi_fifo_rden (
    .rrst       (~phy_rstn        ), 
    .wrst       (~phy_rstn        ), 
    .clkw       ( dfi_clk         ), 
    .clkr       ( dfi_clk_local   ), 
    .we         ( 1'b1            ), 
    .re         (~rden_fifo_empty ), 
    .di         ( dfi_rddata_en     [DQS_WIDTH*4-1:0] ),
    .dout       ( dfi_rddata_en_temp[DQS_WIDTH*4-1:0] ),
    .full_flag  (                 ), 
    .empty_flag ( rden_fifo_empty )
);
    
wire rd_fifo_empty ;
ph1_logic_generic_async_fifo #(
    .DATA_WIDTH ( DQS_WIDTH*4 + DQ_WIDTH*8 + DM_WIDTH*8 ),
    .ADDR_WIDTH ( 2                                     )
) u_dfi_fifo_rd (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk_local ), 
    .clkr       ( dfi_clk       ), 
    .we         ( 1'b1          ), 
    .re         (~rd_fifo_empty ), 
    .di         ( {dfi_rddata_valid_temp[DQS_WIDTH*4-1:0], dfi_rddata_temp[DQ_WIDTH*8-1:0], dfi_rddata_dbi_n_temp[DM_WIDTH*8-1:0]} ),
    .dout       ( {dfi_rddata_valid     [DQS_WIDTH*4-1:0], dfi_rddata     [DQ_WIDTH*8-1:0], dfi_rddata_dbi_n     [DM_WIDTH*8-1:0]} ),
    .full_flag  (               ), 
    .empty_flag ( rd_fifo_empty )
);

`else // `ifndef DFI_FIFO

reg  [              3:0]  dfi_reset_n_r;
reg  [  CKE_WIDTH*4-1:0]  dfi_cke_r;
reg  [  ODT_WIDTH*4-1:0]  dfi_odt_r;
reg  [   CS_WIDTH*4-1:0]  dfi_cs_n_r;
reg  [              3:0]  dfi_ras_n_r;
reg  [              3:0]  dfi_cas_n_r;
reg  [              3:0]  dfi_we_n_r;
`ifdef DRAM_DDR4
reg  [              3:0]  dfi_act_n_r;
reg  [   BG_WIDTH*4-1:0]  dfi_bg_r;
reg  [              3:0]  dfi_alert_n_r;
reg  [              3:0]  dfi_parity_in_r;
`endif
reg  [ BANK_WIDTH*4-1:0]  dfi_bank_r;
reg  [ ADDR_WIDTH*4-1:0]  dfi_address_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_r;
reg  [   DQ_WIDTH*8-1:0]  dfi_wrdata_r;
reg  [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_rddata_en_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_r;
reg  [   DQ_WIDTH*8-1:0]  dfi_rddata_r;
reg  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_r;

generate
if (DFI_PIPELINE_STAGE == 2) begin : pipeline_2
// first stage dfi pipeline
always @ (posedge dfi_clk)
begin
    dfi_reset_n_r          <= dfi_reset_n        ;
    dfi_cke_r              <= dfi_cke            ;
    dfi_odt_r              <= dfi_odt            ;
    dfi_cs_n_r             <= dfi_cs_n           ;
    dfi_ras_n_r            <= dfi_ras_n          ;
    dfi_cas_n_r            <= dfi_cas_n          ;
    dfi_we_n_r             <= dfi_we_n           ;
`ifdef DRAM_DDR4
    dfi_act_n_r            <= dfi_act_n          ;
    dfi_bg_r               <= dfi_bg             ;
`endif
    dfi_bank_r             <= dfi_bank           ;
    dfi_address_r          <= dfi_address        ;
    dfi_wrdata_en_r        <= dfi_wrdata_en      ;
    dfi_wrdata_r           <= dfi_wrdata         ;
    dfi_wrdata_mask_r      <= dfi_wrdata_mask    ;
    dfi_rddata_en_r        <= dfi_rddata_en      ;

    dfi_rddata_valid       <= dfi_rddata_valid_r ;
    dfi_rddata             <= dfi_rddata_r       ;
    dfi_rddata_dbi_n       <= dfi_rddata_dbi_n_r ;

`ifdef USE_PAR_ALERT
    dfi_alert_n            <= dfi_alert_n_r      ;
`endif
end

// second stage dfi pipeline
always @ (posedge dfi_clk_local)
begin
    dfi_reset_n_temp          <= dfi_reset_n_r         ;
    dfi_cke_temp              <= dfi_cke_r             ;
    dfi_odt_temp              <= dfi_odt_r             ;
    dfi_cs_n_temp             <= dfi_cs_n_r            ;
    dfi_ras_n_temp            <= dfi_ras_n_r           ;
    dfi_cas_n_temp            <= dfi_cas_n_r           ;
    dfi_we_n_temp             <= dfi_we_n_r            ;
`ifdef DRAM_DDR4
    dfi_act_n_temp            <= dfi_act_n_r           ;
    dfi_bg_temp               <= dfi_bg_r              ;
`endif
    dfi_bank_temp             <= dfi_bank_r            ;
    dfi_address_temp          <= dfi_address_r         ;
    dfi_wrdata_en_temp        <= dfi_wrdata_en_r       ;
    dfi_wrdata_temp           <= dfi_wrdata_r          ;
    dfi_wrdata_mask_temp      <= dfi_wrdata_mask_r     ;
    dfi_rddata_en_temp        <= dfi_rddata_en_r       ;
    dfi_rddata_valid_r        <= dfi_rddata_valid_temp ;
    dfi_rddata_r              <= dfi_rddata_temp       ;
    dfi_rddata_dbi_n_r        <= dfi_rddata_dbi_n_temp ;

`ifdef USE_PAR_ALERT
    dfi_alert_n_r             <= dfi_alert_n_temp      ;
`endif
end

end else begin : pipeline_1// if (DFI_PIPELINE_STAGE == 1)

always @ (posedge dfi_clk_local)
begin
    dfi_reset_n_temp          <= dfi_reset_n           ;
    dfi_cke_temp              <= dfi_cke               ;
    dfi_odt_temp              <= dfi_odt               ;
    dfi_cs_n_temp             <= dfi_cs_n              ;
    dfi_ras_n_temp            <= dfi_ras_n             ;
    dfi_cas_n_temp            <= dfi_cas_n             ;
    dfi_we_n_temp             <= dfi_we_n              ;
`ifdef DRAM_DDR4
    dfi_act_n_temp            <= dfi_act_n             ;
    dfi_bg_temp               <= dfi_bg                ;
`endif
    dfi_bank_temp             <= dfi_bank              ;
    dfi_address_temp          <= dfi_address           ;
    dfi_wrdata_en_temp        <= dfi_wrdata_en         ;
    dfi_wrdata_temp           <= dfi_wrdata            ;
    dfi_wrdata_mask_temp      <= dfi_wrdata_mask       ;
    dfi_rddata_en_temp        <= dfi_rddata_en         ;
    dfi_rddata_valid          <= dfi_rddata_valid_temp ;
    dfi_rddata                <= dfi_rddata_temp       ;
    dfi_rddata_dbi_n          <= dfi_rddata_dbi_n_temp ;

`ifdef USE_PAR_ALERT
    dfi_alert_n               <= dfi_alert_n_temp      ;
`endif
end

end // end of PIPELINE STAGE
endgenerate

`endif // end of DFI_FIFO


`ifdef PH1_DDR_SIM
wire        apb_wr_flag, apb_rd_flag ;
reg  [31:0] user_led_tmp ;

assign apb_wr_flag = apb_wr_rdn ? (apb_sel & apb_enable & apb_ready) : 1'b0;
assign apb_rd_flag = apb_wr_rdn ? 1'b0 : (apb_sel & apb_enable & apb_ready);

integer apb_fd        ;
reg     apb_fd_opened ;

initial begin
    apb_fd_opened = 0;
    apb_fd = $fopen("ddr_debug_info.log","a");
    apb_fd_opened = 1;

    wait ( ddr_init_cal_done );

    $display (        "DDR PHY Initialization and Calibration Finished!");
    $fdisplay(apb_fd, "DDR PHY Initialization and Calibration Finished!");

    apb_fd_opened = 0;
    $fclose(apb_fd);
end

always @ (posedge apb_clk)
begin
    user_led_tmp <= user_led ;
end

always @ (posedge apb_clk)
begin
    if (apb_fd_opened == 1) begin
       if (apb_wr_flag)
           $fdisplay(apb_fd, "write : 0x%08x = 0x%08x", apb_addr, apb_wdata );
       else if (apb_rd_flag)
           $fdisplay(apb_fd, "read  : 0x%08x = 0x%08x", apb_addr, apb_rdata );
       if (user_led != user_led_tmp)
           $fdisplay(apb_fd, "********** step : %x **********", user_led);
    end
end
`endif // end of PH1_DDR_SIM


endmodule


`timescale 1 ps / 1 fs

module ph1_logic_clk_management #
(
	parameter BYTE_LANE_0	= 4'b0000,   // [3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
	parameter BYTE_LANE_1	= 4'b1111,
	parameter BYTE_LANE_2	= 4'b1110,
    parameter USER_CLK_EN   = 4'b0001
)(
    input                   sys_clk,
    input                   sys_rstn,
    output                  ddr_clk0, //high speed clock, serial data  clock
    output                  phy_clk0, //low speed  clock, parallel data  clock
    output                  ddr_clk1,
    output                  phy_clk1,
    output                  ddr_clk2,
    output                  phy_clk2,
    output                  apb_clk,
    output                  hctrl_clk       ,
    output                  bank31_hctrl_clk,
    output                  bank32_hctrl_clk,
    output                  bank33_hctrl_clk,

`ifdef USE_CLK1 
    output          user_clk0,
`endif
`ifdef USE_CLK2
    output          user_clk1,
`endif  
`ifdef USE_CLK3 
    output          user_clk2,
`endif  
`ifdef USE_CLK4
    output          user_clk3,
`endif

    output          pll_locked,
    output          pll_locked_to_phy
);

//--------------internal signals-----------------------
wire            pll0_ddr_clk;
wire            pll0_phy_clk;
wire            clkc0;
wire            clkc1;
wire            clkc2;

wire            hctrl_clk_int ;
wire            hctrl_clk_bufg ;

ph1_logic_pll0 u_pll0 (
    .refclk                 ( sys_clk           ),
    .reset                  (~sys_rstn          ),
    .clk0_out               ( clkc0             ),
    .clk1_out               ( clkc1             ),
    .clk2_out               ( clkc2             ),
    .clk3_out               ( apb_clk           ),
    .lock                   ( pll_locked_to_phy )
);


ph1_logic_pll1 u_pll1 (
    .refclk                 ( clkc0             ),
    .clk0_out               ( hctrl_clk_int     ),
    .clk1_out               ( user_clk0         ),
    .clk2_out               ( user_clk1         ),
    .clk3_out               ( user_clk2         ),
    .clk4_out               ( user_clk3         ),
    .reset                  (~pll_locked_to_phy ),

`ifdef USE_CLK1
    .clk1_en                ( USER_CLK_EN[0]    ),
`endif
`ifdef USE_CLK2
    .clk2_en                ( USER_CLK_EN[1]    ),
`endif
`ifdef USE_CLK3
    .clk3_en                ( USER_CLK_EN[2]    ),
`endif
`ifdef USE_CLK4
    .clk4_en                ( USER_CLK_EN[3]    ),
`endif

    .lock                   ( pll_locked        )
);

PH1_PHY_HP_MLCLK #(
    .MODE ("HPS")
) u_mlclk0(
    .ce             ( 1'b1         ),
    .clkin          ( clkc1        ),
    .clkout         ( pll0_phy_clk )
);
PH1_PHY_HP_MLCLK #(
    .MODE ("HPS")
) u_mlclk1(
    .ce             ( 1'b1         ),
    .clkin          ( clkc2        ),
    .clkout         ( pll0_ddr_clk )
);
PH1_PHY_HP_IOCLK #( 
    .MODE ("HPS")
) u_ioclk0 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk0     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk1 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk0    )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk2 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk1     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk3 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk1     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk4 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk2     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk5 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk2     )
);

PH1_LOGIC_BUFG bufg_hctrlclk( .i(hctrl_clk_int), .o(hctrl_clk_bufg) );

assign hctrl_clk = hctrl_clk_bufg;

generate
if( BYTE_LANE_0 != 0 ) begin: gen_bank33_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (3) 
    ) u_bank33_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank33_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank33_hctrl_clk_0
    assign bank33_hctrl_clk = 0;
end

if( BYTE_LANE_1 != 0 ) begin: gen_bank32_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (2) 
    ) u_bank32_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank32_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank32_hctrl_clk_0
    assign bank32_hctrl_clk = 0;
end

if( BYTE_LANE_2 != 0 ) begin: gen_bank31_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (1) 
    ) u_bank31_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank31_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank31_hctrl_clk_0
    assign bank31_hctrl_clk = 0;
end
endgenerate

endmodule

///////////////////////////////////////////////////////////////////////////////
//	Input frequency:             25.000MHz
//	Clock multiplication factor: 64
//	Clock division factor:       1
//	Clock information:
//		Clock name	| Frequency 	| Phase shift
//		C0        	| 133.333333MHZ	| 18 DEG     
//		C1        	| 133.333333MHZ	| 0  DEG     
//		C2        	| 533.333333MHZ	| 0  DEG     
//		C3        	| 50.000000 MHZ	| 0  DEG     
///////////////////////////////////////////////////////////////////////////////
`timescale 1 ns / 100 fs

module ph1_logic_pll0 (
  refclk,
  reset,
  lock,
  clk0_out,
  clk1_out,
  clk2_out,
  clk3_out,
  clkb1_out,
  clkb2_out 
);

  input refclk;
  input reset;
  output lock;
  output clk0_out;
  output clk1_out;
  output clk2_out;
  output clk3_out;
  output clkb1_out;
  output clkb2_out;


  PH1_PHY_PLL #(
    .DYN_PHASE_PATH_SEL("DISABLE"),
    .DYN_FPHASE_EN("DISABLE"),
    .MPHASE_ENABLE("ENABLE"),
    .FIN("25.000"),
    .FEEDBK_MODE("NOCOMP"),
    .FBKCLK("VCO_PHASE0"),
    .FBKCLK_INT("VCO_PHASE0"),
    .PLL_FEED_TYPE("INTERNAL"),
    .PLL_USR_RST("ENABLE"),
    .GMC_GAIN(0),
    .ICP_CUR(5),
    .LPF_CAP(2),
    .LPF_RES(4),
    .REFCLK_DIV(1),
    .FBCLK_DIV(64),
    .CLKC0_ENABLE("ENABLE"),
    .CLKC0_DIV(12),
    .CLKC0_CPHASE(11),
    .CLKC0_FPHASE(5),
    .CLKC0_FPHASE_RSTSEL(1),
    .CLKC0_DUTY_INT(6),
    .CLKC0_DUTY50("ENABLE"),
    .CLKC1_ENABLE("ENABLE"),
    .CLKC1_DIV(12),
    .CLKC1_CPHASE(11),
    .CLKC1_FPHASE(0),
    .CLKC1_FPHASE_RSTSEL(0),
    .CLKC1_DUTY_INT(6),
    .CLKC1_DUTY50("ENABLE"),
    .CLKC2_ENABLE("ENABLE"),
    .CLKC2_DIV(3),
    .CLKC2_CPHASE(2),
    .CLKC2_FPHASE(0),
    .CLKC2_FPHASE_RSTSEL(0),
    .CLKC2_DUTY_INT(2),
    .CLKC2_DUTY50("ENABLE"),
    .CLKC3_ENABLE("ENABLE"),
    .CLKC3_DIV(32),
    .CLKC3_CPHASE(31),
    .CLKC3_FPHASE(0),
    .CLKC3_FPHASE_RSTSEL(0),
    .CLKC3_DUTY_INT(16),
    .CLKC3_DUTY50("ENABLE"),
    .INTPI(2),
    .HIGH_SPEED_EN("DISABLE"),
    .SSC_ENABLE("DISABLE"),
    .SSC_MODE("CENTER"),
    .SSC_AMP(0.0000),
    .SSC_FREQ_DIV(0),
    .SSC_RNGE(0),
    .FRAC_ENABLE("DISABLE"),
    .DITHER_ENABLE("DISABLE"),
    .SDM_FRAC(0) 
  ) pll_inst (
    .refclk(refclk),
    .pllreset(reset),
    .lock(lock),
    .pllpd(1'b0),
    .refclk_rst(1'b0),
    .wakeup(1'b0),
    .psclk(1'b0),
    .psdown(1'b0),
    .psstep(1'b0),
    .psclksel(3'b000),
    .psdone(open),
    .cps_step(2'b00),
    .drp_clk(1'b0),
    .drp_rstn(1'b1),
    .drp_sel(1'b0),
    .drp_rd(1'b0),
    .drp_wr(1'b0),
    .drp_addr(8'b00000000),
    .drp_wdata(8'b00000000),
    .drp_err(open),
    .drp_rdy(open),
    .drp_rdata({open, open, open, open, open, open, open, open}),
    .fbclk(1'b0),
    .clkc({open, open, open, open, clk3_out, clk2_out, clk1_out, clk0_out}),
    .clkcb({open, open, open, open, open, clkb2_out, clkb1_out, open}),
    .clkc_en({8'b00001111}),
    .clkc_rst(2'b00),
    .ext_freq_mod_clk(1'b0),
    .ext_freq_mod_en(1'b0),
    .ext_freq_mod_val(17'b00000000000000000),
    .ssc_en(1'b0) 
  );

endmodule

///////////////////////////////////////////////////////////////////////////////
//	Input frequency:             133.250MHz
//	Clock multiplication factor: 1
//	Clock division factor:       1
//	Clock information:
//		Clock name	| Frequency 	| Phase shift
//		C0        	| 133.250000MHZ	| 0  DEG     
//		C1        	| 99.937500 MHZ	| 0  DEG     
//		C2        	| 99.937500 MHZ	| 0  DEG     
//		C3        	| 99.937500 MHZ	| 0  DEG     
//		C4        	| 99.937500 MHZ	| 0  DEG     
///////////////////////////////////////////////////////////////////////////////
`timescale 1 ns / 100 fs

module ph1_logic_pll1 (
  refclk,
  reset,
  clk1_en,
  clk2_en,
  clk3_en,
  clk4_en,
  lock,
  clk0_out,
  clk1_out,
  clk2_out,
  clk3_out,
  clk4_out 
);

  input refclk;
  input reset;
  input clk1_en;
  input clk2_en;
  input clk3_en;
  input clk4_en;
  output lock;
  output clk0_out;
  output clk1_out;
  output clk2_out;
  output clk3_out;
  output clk4_out;

  wire clk0_buf;

  PH1_LOGIC_BUFG bufg_feedback (
    .i(clk0_buf),
    .o(clk0_out) 
  );

  PH1_PHY_PLL #(
    .DYN_PHASE_PATH_SEL("DISABLE"),
    .DYN_FPHASE_EN("DISABLE"),
    .MPHASE_ENABLE("DISABLE"),
    .FIN("133.250"),
    .FEEDBK_MODE("NORMAL"),
    .FBKCLK("CLKC0_EXT"),
    .PLL_FEED_TYPE("EXTERNAL"),
    .PLL_USR_RST("ENABLE"),
    .GMC_GAIN(2),
    .ICP_CUR(5),
    .LPF_CAP(2),
    .LPF_RES(2),
    .REFCLK_DIV(1),
    .FBCLK_DIV(1),
    .CLKC0_ENABLE("ENABLE"),
    .CLKC0_DIV(9),
    .CLKC0_CPHASE(8),
    .CLKC0_FPHASE(0),
    .CLKC0_FPHASE_RSTSEL(0),
    .CLKC0_DUTY_INT(5),
    .CLKC0_DUTY50("ENABLE"),
    .CLKC1_ENABLE("ENABLE"),
    .CLKC1_DIV(12),
    .CLKC1_CPHASE(11),
    .CLKC1_FPHASE(0),
    .CLKC1_FPHASE_RSTSEL(0),
    .CLKC1_DUTY_INT(6),
    .CLKC1_DUTY50("ENABLE"),
    .CLKC2_ENABLE("ENABLE"),
    .CLKC2_DIV(12),
    .CLKC2_CPHASE(11),
    .CLKC2_FPHASE(0),
    .CLKC2_FPHASE_RSTSEL(0),
    .CLKC2_DUTY_INT(6),
    .CLKC2_DUTY50("ENABLE"),
    .CLKC3_ENABLE("ENABLE"),
    .CLKC3_DIV(12),
    .CLKC3_CPHASE(11),
    .CLKC3_FPHASE(0),
    .CLKC3_FPHASE_RSTSEL(0),
    .CLKC3_DUTY_INT(6),
    .CLKC3_DUTY50("ENABLE"),
    .CLKC4_ENABLE("ENABLE"),
    .CLKC4_DIV(12),
    .CLKC4_CPHASE(11),
    .CLKC4_FPHASE(0),
    .CLKC4_FPHASE_RSTSEL(0),
    .CLKC4_DUTY_INT(6),
    .CLKC4_DUTY50("ENABLE"),
    .INTPI(1),
    .HIGH_SPEED_EN("DISABLE"),
    .SSC_ENABLE("DISABLE"),
    .SSC_MODE("CENTER"),
    .SSC_AMP(0.0000),
    .SSC_FREQ_DIV(0),
    .SSC_RNGE(0),
    .FRAC_ENABLE("DISABLE"),
    .DITHER_ENABLE("DISABLE"),
    .SDM_FRAC(0) 
  ) pll_inst (
    .refclk(refclk),
    .pllreset(reset),
    .lock(lock),
    .pllpd(1'b0),
    .refclk_rst(1'b0),
    .wakeup(1'b0),
    .psclk(1'b0),
    .psdown(1'b0),
    .psstep(1'b0),
    .psclksel(3'b000),
    .psdone(open),
    .cps_step(2'b00),
    .drp_clk(1'b0),
    .drp_rstn(1'b1),
    .drp_sel(1'b0),
    .drp_rd(1'b0),
    .drp_wr(1'b0),
    .drp_addr(8'b00000000),
    .drp_wdata(8'b00000000),
    .drp_err(open),
    .drp_rdy(open),
    .drp_rdata({open, open, open, open, open, open, open, open}),
    .fbclk(clk0_out),
    .clkc({open, open, open, clk4_out, clk3_out, clk2_out, clk1_out, clk0_buf}),
    .clkcb({open, open, open, open, open, open, open, open}),
    .clkc_en({3'b000, clk4_en, clk3_en, clk2_en, clk1_en, 1'b1}),
    .clkc_rst(2'b00),
    .ext_freq_mod_clk(1'b0),
    .ext_freq_mod_en(1'b0),
    .ext_freq_mod_val(17'b00000000000000000),
    .ssc_en(1'b0) 
  );

endmodule


`timescale 1ps/1ps

module ph1_logic_ddrphy_standard #(
    parameter TCK                   = 1250,         // memory tCK parameter, clock period in ps
    parameter NCK_PER_CLK           = 4,
    parameter DRAM_TYPE             = "DDR3",       // "DDR3","DDR4"
    parameter DQS_GATE              = "External",   // Internal, External
    parameter CTRL_INDEX            = 0,            // multi-controller, 0: ctrl0; 1: ctrl1.
//bank and pad position parameters about ddr bus
    parameter BYTE_LANE_0           = 4'b1111,      // [3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    parameter BYTE_LANE_1           = 4'b1111,
    parameter BYTE_LANE_2           = 4'b1111,
    parameter DATA_CTRL_0           = 4'b1000,      // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    parameter DATA_CTRL_1           = 4'b1111,
    parameter DATA_CTRL_2           = 4'b1111,
    parameter ADDR_MAP              = 215'h000_018_016_017_014_015_012_013_010_011_008_009_006_007_002_003_000_001,
    parameter CK_MAP                = 48'h004_005,
    parameter BANK_MAP              = 60'h000_000_000_025_024,
    parameter CKE_MAP               = 24'h020,
    parameter ODT_MAP               = 24'h000_023,
    parameter CS_MAP                = 24'h000_022,

`ifdef DRAM_DDR4
    parameter BANK_GROUP_MAP        = 24'h020_019,
    parameter PARITY_MAP            = 12'h028,
    parameter ACT_MAP               = 12'h026,
    parameter DM_DBI_MAP            = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
    parameter ALERT_MAP             = 12'h029, 
`elsif DRAM_DDR3
    parameter RAS_MAP               = 12'h000,
    parameter CAS_MAP               = 12'h000,
    parameter WE_MAP                = 12'h000,
    parameter DM_MAP                = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
`endif

    parameter RESET_MAP             = 12'h027,
    parameter DQS_GATE_MAP          = 108'h101_214_201_224_23b_014_03b_001_02a,
    parameter DQS_BYTE_MAP          = 215'h235_234_225_224_215_214_205_204_135_134_125_124_115_114_105_104_035_034,
    parameter DATA0_MAP             = 96'h039_038_037_036_033_032_031_030,
    parameter DATA1_MAP             = 96'h109_108_107_106_103_102_101_100,
    parameter DATA2_MAP             = 96'h119_118_117_116_113_112_111_110,
    parameter DATA3_MAP             = 96'h129_128_127_126_123_122_121_120,
    parameter DATA4_MAP             = 96'h139_138_137_136_133_132_131_130,
    parameter DATA5_MAP             = 96'h209_208_207_206_203_202_201_200,
    parameter DATA6_MAP             = 96'h219_218_217_216_213_212_211_210,
    parameter DATA7_MAP             = 96'h229_228_227_226_223_222_221_220,
    parameter DATA8_MAP             = 96'h239_238_237_236_233_232_231_230,
    parameter LOC_DX_BYTELANE_MAP   = 72'h23_22_21_20_13_12_11_10_03,
    parameter LOC_AC_BYTELANE_MAP   = 32'h00_02_01_00,

    parameter DQS_GATE_WIDTH        = 9,
    parameter ADDR_WIDTH            = 17,       //DRAM address bus width
    parameter ROW_WIDTH             = 17,       //DRAM address bus width
    parameter BANK_WIDTH            = 2,
`ifdef DRAM_DDR4
    parameter BG_WIDTH              = 2,
    parameter DM_DBI                = "NONE",   //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    parameter ODT_WIDTH             = 1,
    parameter CK_WIDTH              = 1,        // # of CK/CK# outputs to memory
    parameter CKE_WIDTH             = 1,        // # of cke outputs
    parameter CS_WIDTH              = 1,        // # of unique CS outputs
    parameter DQ_WIDTH              = 72,
    parameter DQS_WIDTH             = 9,        // # of DQS (strobe)
    parameter DM_WIDTH              = 9,

    parameter AC_WIDTH              = 4,
//Memory Option
    parameter INTER_VREF            = "ENABLE", //"ENABLE", "DISABLE"
    parameter DCI                   = "ENABLE"  // "ENABLE", "DISABLE"
)(
    input               rst_n,
    input               phy_clk0,           //bank0 clkin group
    input               ddr_clk0,
    input               phy_clk1,           //bank1 clkin group
    input               ddr_clk1,
    input               phy_clk2,           //bank2 clkin group
    input               ddr_clk2,
    input               lclk_0,
    input               lclk_1,
    input               lclk_2,
    input               bank31_hctrl_clk,
    input               bank32_hctrl_clk,
    input               bank33_hctrl_clk,

    input[8:0]          ctrlclk_en_upp,
    input[8:0]          ddrclk_en_upp,
    input[8:0]          rdclk_en_upp,
    input               ctrlclk_en_low,
    input               ddrclk_en_low,
    input               rdclk_en_low,

// DDR bus signals
`ifdef USE_DQS_GATE
    inout  [DQS_GATE_WIDTH-1:0]    dqs_gate,
`endif
output     [    ADDR_WIDTH-1:0]    ddr_addr,
output     [    BANK_WIDTH-1:0]    ddr_ba,
`ifdef USE_CS 
    output [      CS_WIDTH-1:0]    ddr_cs_n,
`endif
    output [     ODT_WIDTH-1:0]    ddr_odt,
`ifdef USE_DM
    inout  [      DM_WIDTH-1:0]    ddr_dm,
`endif
output     [     CKE_WIDTH-1:0]    ddr_cke,
`ifdef USE_RESET
    output                         ddr_reset_n,
`endif
    inout  [      DQ_WIDTH-1:0]    ddr_dq,

`ifdef DRAM_DDR4
    output [      BG_WIDTH-1:0]    ddr_bg,
    output [      CK_WIDTH-1:0]    ddr_ck_c,
    output [      CK_WIDTH-1:0]    ddr_ck_t,
    output                         ddr_act_n,
`ifdef USE_PAR_ALERT
    output                         ddr_parity,
    input                          ddr_alert_n,
`endif
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_c,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_t,
`elsif DRAM_DDR3
    output [      CK_WIDTH-1:0]    ddr_ck_n,
    output [      CK_WIDTH-1:0]    ddr_ck_p,
    output                         ddr_ras_n,
    output                         ddr_cas_n,
    output                         ddr_we_n,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_n,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_p,
`endif

// controller signals, between hard controller and users or top-level systems
    input                hctrl_ctl_idle,
    output [ 31:0 ]      hctrl_gpr0,
    input                atpg_mode,

// DFI bus signals, between hard controller and users or top-level systems
    input  [  3:0]       dfi_reset_n,
    input  [  7:0]       dfi_cke,
    input  [  7:0]       dfi_odt,
    input  [  7:0]       dfi_cs_n,
    input  [  3:0]       dfi_act_n,
    input  [  3:0]       dfi_ras_n,
    input  [  3:0]       dfi_cas_n,
    input  [  3:0]       dfi_we_n,
    input  [  7:0]       dfi_bg,
    input  [ 11:0]       dfi_bank,
    input  [ 71:0]       dfi_address,
    input  [ 35:0]       dfi_wrdata_en,
    input  [575:0]       dfi_wrdata,
    input  [ 71:0]       dfi_wrdata_mask,
    input  [ 35:0]       dfi_rddata_en,
    output [ 35:0]       dfi_rddata_valid,
    output [575:0]       dfi_rddata,
    output [ 71:0]       dfi_rddata_dbi_n,
    input  [  1:0]       dfi_ctrlupd_req,
    output [  1:0]       dfi_ctrlupd_ack,
    output [  1:0]       dfi_phyupd_req,
    input  [  1:0]       dfi_phyupd_ack,
    output [  3:0]       dfi_phyupd_type,
    input                dfi_init_start,
    input  [  8:0]       dfi_data_byte_disable,
    input  [  1:0]       dfi_dram_clk_disable,
    output               dfi_init_complete,
    input  [  3:0]       dfi_parity_in,
    output [  3:0]       dfi_alert_n,
    input  [  1:0]       dfi_lp_ctrl_req,
    input  [  1:0]       dfi_lp_data_req,
    input  [  7:0]       dfi_lp_wakeup,
    output [  1:0]       dfi_lp_ack,

// debug bus signals, between hard controller and users or top-level systems
    input                hctrl_jtag_trst_n,
    input                hctrl_jtag_tclk,
    input                hctrl_jtag_tdi,
    output               hctrl_jtag_tdo,
    output               hctrl_jtag_tdo_en,
    input                hctrl_jtag_tms,

// APB bus signals
    input                apb_clk,
    input                apb_rst_n,
    input  [ 15:0]       apb_addr,
    input                apb_enable,
    output               apb_error,
    output [ 31:0]       apb_rdata,
    output               apb_ready,
    input                apb_sync_path_sel,
    input  [ 31:0]       apb_wdata,
    input                apb_wr_rdn,
    input                apb_sel,

    output [ 13:0]       zqcal_debug_data0,
    output [ 13:0]       zqcal_debug_data1,
    output [ 13:0]       zqcal_debug_data2,
    output [ 63:0]       dqsgr_debug_data0,
    output [ 63:0]       dqsgr_debug_data1,
    output [ 63:0]       dqsgr_debug_data2
);

// APB bus signals, between hard controller and users or top-level systems
wire                hctrl_apb_clk;
wire                hctrl_apb_rst_n;
wire                hctrl_apb_sel;
wire                hctrl_apb_wr_rdn;
wire                hctrl_apb_enable;
wire [ 9:0]         hctrl_apb_addr;
wire [31:0]         hctrl_apb_wdata;
wire [31:0]         hctrl_apb_rdata;
wire                hctrl_apb_rdy;
wire                hctrl_apb_error;

wire                phy_apb_clk;
wire                phy_apb_rst_n;
wire [15:0]         phy_apb_addr;
wire                phy_apb_enable;
wire                phy_apb_error;
wire [31:0]         phy_apb_rdata;
wire                phy_apb_ready;
wire [31:0]         phy_apb_wdata;
wire                phy_apb_wr_rdn;
wire                phy_apb_sel;

wire                gate_apb_clk;
wire                gate_apb_rst_n;
wire [15:0]         gate_apb_addr;
wire                gate_apb_enable;
wire                gate_apb_error;
wire [31:0]         gate_apb_rdata;
wire                gate_apb_ready;
wire [31:0]         gate_apb_wdata;
wire                gate_apb_wr_rdn;
wire                gate_apb_sel;

wire [ 8:0]         ctrlclk_en_gate_upp;
wire [ 8:0]         rdclk_en_gate_upp;
wire [ 8:0]         ddrclk_en_gate_upp;
wire                ctrlclk_en_gate_low;
wire                rdclk_en_gate_low;
wire                ddrclk_en_gate_low;
wire [ 8:0]         rstn_upp;
wire                rstn_low;

wire [167:0]        zqcal_code_o;
wire [167:0]        zqcal_code_i;
wire [ 31:0]        dqs_rd_gate_status_p0;  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                            //clock domain: phy_clk, parallel signals
wire [ 31:0]        dqs_rd_gate_status_p1;  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                            //clock domain: phy_clk, parallel signals
wire [ 31:0]        dqs_rd_gate_status_p2;  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane


wire [11:0]          mc0_phy_clk_wren_gt;    //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
wire [11:0]          mc0_phy_clk_rden_gt;    //clock gate signal of phy_clk in read operation;
wire [ 3:0]          phy_ddr_clk_gate0;      //phy_clk and ddr_clk gate signal
wire [ 3:0]          phy_ddr_clk_gate1;      //phy_clk and ddr_clk gate signal
wire [ 3:0]          phy_ddr_clk_gate2;      //phy_clk and ddr_clk gate signal
wire [11:0]          phy_rstn_low;
wire [11:0]          phy_rstn_upp;

wire [12* 8-1:0]      phy_rd_dm;      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [12*64-1:0]      phy_rdata;      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
wire [11     :0]      phy_rd_en;      //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [ 6* 8-1:0]      phy_rdata_se;   //2 single pad per bank, 6 pairs pads in 3 banks;
wire [12* 8-1:0]      phy_rd_dqsn;
wire [12* 8-1:0]      phy_rd_dqsp;

wire [12* 8-1:0]      phy_wr_dm;      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [12*64-1:0]      phy_wdata;      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
wire [12* 8-1:0]      phy_wr_en;      //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [ 6* 8-1:0]      phy_wrdata_se;  //2 single pad per bank, 6 pads in 3 banks;
wire [12* 8-1:0]      phy_wr_dqsn;
wire [12* 8-1:0]      phy_wr_dqsp;
wire [95     :0]      dqs_iogate_rdata;   //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
wire [12* 8-1:0]      dqs_rd_gate_en;     //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
wire [12* 8-1:0]      dqs_rd_en_shadow;
wire                  dqs_pupd_en_i;      //dqs pull-up and pull-down enable when training
wire [11     :0]      dqs_pupd_en_o;      //dqs pull-up and pull-down enable when training


wire [143:0]          hctrl_addr;
wire [ 15:0]          hctrl_cke;
wire [ 15:0]          hctrl_odt;
wire [ 15:0]          hctrl_cs_n;
wire [ 15:0]          hctrl_bg;
wire [ 15:0]          hctrl_ba;
wire [  7:0]          hctrl_act_n;
wire [  7:0]          hctrl_parity;
wire [  7:0]          hctrl_alert_n;
wire [ 17:0]          hctrl_datain_en_upp;
wire [575:0]          hctrl_dqin;
wire [ 71:0]          hctrl_dmin;
wire [ 71:0]          dqs_gate_in;
wire [ 15:0]          hctrl2mem_ck;
wire                  hctrl2mem_ram_rst_n;
wire [ 15:0]          hctrl2mem_cke;
wire [ 15:0]          hctrl2mem_cs_n;
wire [ 15:0]          hctrl2mem_odt;
wire [ 15:0]          hctrl2mem_bg;
wire [ 15:0]          hctrl2mem_ba;
wire [  7:0]          hctrl2mem_act_n;
wire [143:0]          hctrl2mem_addr;
wire [  7:0]          hctrl2mem_parity;
wire [575:0]          hctrl2mem_dqout;
wire [ 71:0]          hctrl2mem_dmout;
wire [ 71:0]          hctrl2mem_dataout_en;
wire [ 71:0]          hctrl2mem_wdqsout;
wire [ 71:0]          hctrl2mem_rdqs_en;
wire [ 71:0]          hctrl2mem_rdqs_en_pre;
wire                  hctrl_datain_en_low;
wire [ 12:0]          apb_dly_sel;
wire [ 59:0]          apb_dly_addr;
wire [ 89:0]          apb_dly_data;
wire [  9:0]          apb_dly_gate;
wire                  dfi_io_pd;
wire                  o_dfi_io_pd;
wire                  zqcal_clrcfg;
wire                  zqcal_start;
wire                  zqcal_update_en;
wire                  zqcal_vt_update_en_out;
wire [  2:0]          zqcal_vt_update_en_in;
wire [  2:0]          zqcal_done;
wire                  offcal_clrcfg;
wire                  offcal_start;
wire                  offcal_update_en;
wire                  offcal_vt_update_en_out;
wire [ 11:0]          offcal_vt_update_en_in;
wire [ 11:0]          offcal_done;

wire                  zqcal_clrcfg_o;
wire                  zqcal_start_o;
wire                  zqcal_update_en_o;
wire [  2:0]          zqcal_vt_update_en_out_i;
wire                  zqcal_vt_update_en_in_o;
wire [  2:0]          zqcal_done_i;
wire                  offcal_clrcfg_o;
wire                  offcal_start_o;
wire                  offcal_update_en_o;
wire [ 11:0]          offcal_vt_update_en_out_i;
wire                  offcal_vt_update_en_in_o;
wire [ 11:0]          offcal_done_i;
wire [ 11:0]          remap_apb_dly_sel;
wire [ 71:0]          remap_apb_dly_addr;
wire [107:0]          remap_apb_dly_data;
wire [ 11:0]          remap_apb_dly_gate;

// dcc control
wire                  dcc_clrcfg;
wire                  dcc_start;
wire                  dcc_update_en;
wire                  dcc_vt_update_en_out;
wire [ 11:0]          dcc_vt_update_en_in;
wire [ 11:0]          dcc_done;
// dcc control
wire                  dcc_clrcfg_o;
wire                  dcc_start_o;
wire                  dcc_update_en_o;
wire [ 11:0]          dcc_vt_update_en_out_i;
wire                  dcc_vt_update_en_in_o;
wire [ 11:0]          dcc_done_i;
// delay control
wire [ 62:0]          delay_cal_en_in_upp;
wire [ 62:0]          delay_cal_in_upp;
wire [  1:0]          delay_cal_en_in_low;
wire [  1:0]          delay_cal_in_low;
wire [  8:0]          delay_cal_mode_upp;
wire [ 62:0]          delay_cal_clk_en_upp;
wire [ 62:0]          delay_cal_en_out_upp;
wire                  delay_cal_mode_low;
wire [  1:0]          delay_cal_clk_en_low;
wire [  1:0]          delay_cal_en_out_low;

wire [ 83:0]          remap_delay_cal_en_in;
wire [ 83:0]          remap_delay_cal_in;
wire [ 11:0]          remap_delay_cal_mode;
wire [ 83:0]          remap_delay_cal_clk_en;
wire [ 83:0]          remap_delay_cal_en_out;

wire [  8:0]          loopback_fifo_rstn_upp;
wire                  loopback_fifo_rstn_low;
wire [  8:0]          delay_gate;
wire [ 17:0]          phy_dqs_cnt;
wire                  loopback_fifo_resp_upp;
wire                  loopback_fifo_resp_low;

// dqs signals
wire [  7:0]          dqs_rd_gate_status0;  // bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  7:0]          dqs_rd_gate_status1;  // bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  7:0]          dqs_rd_gate_status2;  // bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  3:0]          dqs_rstn0;            // bank0,[3:0]:D/C/B/A
wire [  3:0]          dqs_rstn1;            // bank1,[3:0]:D/C/B/A
wire [  3:0]          dqs_rstn2;            // bank2,[3:0]:D/C/B/A
wire [ 17:0]          phy_status;
 
wire [  8:0]          wrlvl_mode;
wire [ 95:0]          wrlvl_wrqout;
wire [ 71:0]          wrlvl_rdqout;
wire                  loopback_mode;
wire [  1:0]          loopback_clknum_sel;
wire [  1:0]          loopback_clk_sel;
wire [ 17:0]          loopback_fifo_dataout_upp;
wire                  loopback_fifo_dataout_low;
wire [ 71:0]          hctrl2io_pdr;
wire [ 71:0]          hctrl2io_odt_en;
wire [  8:0]          delay_dti_upp;
wire [  8:0]          hctrl_vref_rank_sel_upp;
wire [  7:0]          loopback_en_out;
wire [ 95:0]          remap_loopback_en ;
//delay ctrl signals, uhy_clk
wire                  delay_testmode_en;
wire                  delay_osc_chain_en;
wire [ 2:0]           delay_dti_low;
wire [ 3:0]           delay_osc_div;
wire [ 1:0]           delay_osc_wrlvl_sel;
wire [ 1:0]           delay_osc_wdata_sel;
wire [ 1:0]           delay_osc_sel_low;
//
wire [ 41:0]          vref_value_low;
wire [125:0]          vref_value_upp;
wire                  ioloopback_sel_upp;         // no use
wire                  ioloopback_sel_low;         // no use
wire [ 11:0]          loopback_fifo_datain_low;   // [3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
wire [ 11:0]          loopback_fifo_datain_upp;

wire [ 11:0]          remap_loopback_fifo_rstn_upp;
wire [ 11:0]          remap_loopback_fifo_rstn_low;
wire [ 11:0]          remap_delay_gate;
wire [ 23:0]          remap_dqs_cnt;
wire [ 11:0]          remap_loopback_fifo_resp_upp;
wire [ 11:0]          remap_loopback_fifo_resp_low;
wire [ 11:0]          remap_delay_dti;
wire [ 23:0]          remap_delay_osc_wdq_ac_sel;
wire [167:0]          remap_vref_ctrl_value;
wire [ 23:0]          remap_loopback_clknum_sel;
wire [ 23:0]          remap_loopback_clk_sel;
wire [ 11:0]          remap_wrlvl_mode;
wire [ 71:0]          remap_wrlvl_qin;
wire [ 11:0]          remap_loopback_mode;
wire [ 95:0]          remap_phy_rd_dqs_pdr;
wire [ 95:0]          remap_phy_rd_dqs_te;
wire [ 11:0]          remap_vref_rank_sel;

wire                  hctrl_clk;

`ifdef PPC_LOC_Y80
assign hctrl_clk   = bank33_hctrl_clk;
`elsif PPC_LOC_Y40
assign hctrl_clk   = bank32_hctrl_clk;
`else
assign hctrl_clk   = bank31_hctrl_clk;
`endif

///////   APB MUX   ////////
ph1_logic_apb_mux_1_3 u_apb_mux (
// APB master
    .mst_psel    ( apb_sel   ),
    .mst_paddr   ( apb_addr  ),
    .mst_prdata  ( apb_rdata ),
    .mst_pready  ( apb_ready ),
    .mst_pslverr ( apb_error ),

    // APB slaves
    .slv_psel    ( {gate_apb_sel,   phy_apb_sel,   hctrl_apb_sel  } ),
    .slv_prdata  ( {gate_apb_rdata, phy_apb_rdata, hctrl_apb_rdata} ),
    .slv_pready  ( {gate_apb_ready, phy_apb_ready, hctrl_apb_rdy  } ),
    .slv_pslverr ( {gate_apb_error, phy_apb_error, hctrl_apb_error} )
);

assign hctrl_apb_clk    = apb_clk ;
assign phy_apb_clk      = apb_clk ;
assign gate_apb_clk     = apb_clk ;

assign hctrl_apb_rst_n  = apb_rst_n ;
assign phy_apb_rst_n    = apb_rst_n ;
assign gate_apb_rst_n   = apb_rst_n ;

assign hctrl_apb_addr   = apb_addr ;
assign phy_apb_addr     = apb_addr ;
assign gate_apb_addr    = apb_addr ;

assign hctrl_apb_enable = apb_enable ;
assign phy_apb_enable   = apb_enable ;
assign gate_apb_enable  = apb_enable ;

assign hctrl_apb_wr_rdn = apb_wr_rdn ;
assign phy_apb_wr_rdn   = apb_wr_rdn ;
assign gate_apb_wr_rdn  = apb_wr_rdn ;

assign hctrl_apb_wdata  = apb_wdata ;
assign phy_apb_wdata    = apb_wdata ;
assign gate_apb_wdata   = apb_wdata ;

`ifdef CTRL_INDEX_0
  PH1_PHY_DDR4_CAL  u_hard_controller_0(
`else
  PH1_PHY_DDR4_CAL  u_hard_controller_1(
`endif
// controller signals, between hard controller and users or top-level systems
    .hctrl_clk                  ( hctrl_clk      ),
    .hctrl_rst_n                ( rst_n                 ),
    .hctrl_ctl_idle             ( hctrl_ctl_idle        ),
    .hctrl_gpr0                 ( hctrl_gpr0            ),

// DFI bus signals, between hard controller and users or top-level systems
    .dfi_reset_n                ( dfi_reset_n           ),
    .dfi_cke                    ( dfi_cke               ),
    .dfi_odt                    ( dfi_odt               ),
    .dfi_cs_n                   ( dfi_cs_n              ),
    .dfi_act_n                  ( dfi_act_n             ),
    .dfi_ras_n                  ( dfi_ras_n             ),
    .dfi_cas_n                  ( dfi_cas_n             ),
    .dfi_we_n                   ( dfi_we_n              ),
    .dfi_bg                     ( dfi_bg                ),
    .dfi_bank                   ( dfi_bank              ),
    .dfi_address                ( dfi_address           ),
    .dfi_wrdata_en              ( dfi_wrdata_en         ),
    .dfi_wrdata                 ( dfi_wrdata            ),
    .dfi_wrdata_mask            ( dfi_wrdata_mask       ),
    .dfi_rddata_en              ( dfi_rddata_en         ),
    .dfi_rddata_valid           ( dfi_rddata_valid      ),
    .dfi_rddata                 ( dfi_rddata            ),
    .dfi_rddata_dbi_n           ( dfi_rddata_dbi_n      ),
    .dfi_ctrlupd_req            ( dfi_ctrlupd_req       ),
    .dfi_ctrlupd_ack            ( dfi_ctrlupd_ack       ),
    .dfi_phyupd_req             ( dfi_phyupd_req        ),
    .dfi_phyupd_ack             ( dfi_phyupd_ack        ),
    .dfi_phyupd_type            ( dfi_phyupd_type       ),
    .dfi_init_start             ( dfi_init_start        ),
    .dfi_data_byte_disable      ( dfi_data_byte_disable ),
    .dfi_dram_clk_disable       ( dfi_dram_clk_disable  ),
    .dfi_init_complete          ( dfi_init_complete     ),
    .dfi_parity_in              ( dfi_parity_in         ),
    .dfi_alert_n                ( dfi_alert_n           ),
    .dfi_lp_ctrl_req            ( dfi_lp_ctrl_req       ),
    .dfi_lp_data_req            ( dfi_lp_data_req       ),
    .dfi_lp_wakeup              ( dfi_lp_wakeup         ),
    .dfi_lp_ack                 ( dfi_lp_ack            ),

// APB bus signals, between hard controller and users or top-level systems
    .hctrl_scan_atpg_mode       ( atpg_mode ),
    .hctrl_apb_rst_n            ( hctrl_apb_rst_n       ),
    .hctrl_apb_clk              ( hctrl_apb_clk         ),
    .hctrl_apb_sel              ( hctrl_apb_sel         ),
    .hctrl_apb_wr_rdn           ( hctrl_apb_wr_rdn      ),
    .hctrl_apb_enable           ( hctrl_apb_enable      ),
    .hctrl_apb_addr             ( hctrl_apb_addr        ),
    .hctrl_apb_wdata            ( hctrl_apb_wdata       ),
    .hctrl_apb_rdata            ( hctrl_apb_rdata       ),
    .hctrl_apb_rdy              ( hctrl_apb_rdy         ),
    .hctrl_apb_error            ( hctrl_apb_error       ),

//debug bus signals, between hard controller and users or top-level systems
    .hctrl_jtag_trst_n          ( hctrl_jtag_trst_n     ),
    .hctrl_jtag_tclk            ( hctrl_jtag_tclk       ),
    .hctrl_jtag_tdi             ( hctrl_jtag_tdi        ),
    .hctrl_jtag_tdo             ( hctrl_jtag_tdo        ),
    .hctrl_jtag_tdo_en          ( hctrl_jtag_tdo_en     ),
    .hctrl_jtag_tms             ( hctrl_jtag_tms        ),


//control signals, between hard controller and fabric/IOL
    .ctrlclk_en_upp             ( ctrlclk_en_upp        ),
    .ddrclk_en_upp              ( ddrclk_en_upp         ),
    .rdclk_en_upp               ( rdclk_en_upp          ),
    .ctrlclk_en_low             ( ctrlclk_en_low        ),
    .ddrclk_en_low              ( ddrclk_en_low         ),
    .rdclk_en_low               ( rdclk_en_low          ),
    .ctrlclk_en_gate_upp        ( ctrlclk_en_gate_upp   ),
    .rdclk_en_gate_upp          ( rdclk_en_gate_upp     ),
    .ddrclk_en_gate_upp         ( ddrclk_en_gate_upp    ),
    .ctrlclk_en_gate_low        ( ctrlclk_en_gate_low   ),
    .rdclk_en_gate_low          ( rdclk_en_gate_low     ),
    .ddrclk_en_gate_low         ( ddrclk_en_gate_low    ),
    .rstn_upp                   ( rstn_upp              ),
    .rstn_low                   ( rstn_low              ),

//signals are relative to SDRAM, between hard controller and fabric/IOL
    .hctrl_addr                 ( hctrl_addr            ),
    .hctrl_cke                  ( hctrl_cke             ),
    .hctrl_odt                  ( hctrl_odt             ),
    .hctrl_cs_n                 ( hctrl_cs_n            ),
    .hctrl_bg                   ( hctrl_bg              ),
    .hctrl_ba                   ( hctrl_ba              ),
    .hctrl_act_n                ( hctrl_act_n           ),
    .hctrl_parity               ( hctrl_parity          ),
    .hctrl_alert_n              ( hctrl_alert_n         ),
    .hctrl_datain_en_upp        ( hctrl_datain_en_upp   ),
    .hctrl_dqin                 ( hctrl_dqin            ),
    .hctrl_dmin                 ( hctrl_dmin            ),
    .dqs_gate_in                ( dqs_gate_in ),
    .hctrl2mem_ck               ( hctrl2mem_ck          ),
    .hctrl2mem_ram_rst_n        ( hctrl2mem_ram_rst_n   ),
    .hctrl2mem_cke              ( hctrl2mem_cke         ),
    .hctrl2mem_cs_n             ( hctrl2mem_cs_n        ),
    .hctrl2mem_odt              ( hctrl2mem_odt         ),
    .hctrl2mem_bg               ( hctrl2mem_bg          ),
    .hctrl2mem_ba               ( hctrl2mem_ba          ),
    .hctrl2mem_act_n            ( hctrl2mem_act_n       ),
    .hctrl2mem_addr             ( hctrl2mem_addr        ),
    .hctrl2mem_parity           ( hctrl2mem_parity      ),
    .hctrl2mem_dqout            ( hctrl2mem_dqout       ),
    .hctrl2mem_dmout            ( hctrl2mem_dmout       ),
    .hctrl2mem_dataout_en       ( hctrl2mem_dataout_en  ),
    .hctrl2mem_wdqsout          ( hctrl2mem_wdqsout     ),
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en_pre ),
    .hctrl_datain_en_low        ( hctrl_datain_en_low   ),

//apb signals, between hard controller and fabric/IOL
    .apb_dly_sel                ( apb_dly_sel           ),
    .apb_dly_addr               ( apb_dly_addr          ),
    .apb_dly_data               ( apb_dly_data          ),
    .apb_dly_gate               ( apb_dly_gate          ),
    .apb_dfi_io_pd              ( dfi_io_pd             ),

//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg               ( zqcal_clrcfg              ),
    .zqcal_start                ( zqcal_start               ),
    .zqcal_update_en            ( zqcal_update_en           ),
    .zqcal_vt_update_en_out     ( zqcal_vt_update_en_out    ),
    .zqcal_vt_update_en_in      ( zqcal_vt_update_en_in     ),
    .zqcal_done_bank            ( zqcal_done                ),

//offcal control, between hard controller and fabric/IOL
    .offcal_clrcfg              ( offcal_clrcfg             ),
    .offcal_start               ( offcal_start              ),
    .offcal_update_en           ( offcal_update_en          ),
    .offcal_vt_update_en_out    ( offcal_vt_update_en_out   ),
    .offcal_vt_update_en_in     ( offcal_vt_update_en_in    ),
    .offcal_done_bank           ( offcal_done               ),

//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg                 ( dcc_clrcfg                ),
    .dcc_start                  ( dcc_start                 ),
    .dcc_update_en              ( dcc_update_en             ),
    .dcc_vt_update_en_out       ( dcc_vt_update_en_out      ),
    .dcc_vt_update_en_in        ( dcc_vt_update_en_in       ),
    .dcc_done_bank              ( dcc_done                  ),

//Delay Line calibration, between hard controller and fabric/IOL
    .delay_cal_en_in_upp        ( delay_cal_en_in_upp       ),
    .delay_cal_in_upp           ( delay_cal_in_upp          ),
    .delay_cal_en_in_low        ( delay_cal_en_in_low       ),
    .delay_cal_in_low           ( delay_cal_in_low          ),
    .delay_cal_mode_upp         ( delay_cal_mode_upp        ),
    .delay_cal_clk_en_upp       ( delay_cal_clk_en_upp      ),
    .delay_cal_en_out_upp       ( delay_cal_en_out_upp      ),
    .delay_cal_mode_low         ( delay_cal_mode_low        ),
    .delay_cal_clk_en_low       ( delay_cal_clk_en_low      ),
    .delay_cal_en_out_low       ( delay_cal_en_out_low      ),
//debug signals, between hard controller and fabric/IOL
    .loopback_fifo_rstn_upp     ( loopback_fifo_rstn_upp    ),
    .loopback_fifo_rstn_low     ( loopback_fifo_rstn_low    ),
    .delay_gate                 ( delay_gate                ),
    .phy_dqs_cnt                ( phy_dqs_cnt               ),
    .loopback_fifo_resp_upp     ( loopback_fifo_resp_upp    ),
    .loopback_fifo_resp_low     ( loopback_fifo_resp_low    ),
    .phy2hctrl_dti_upp          ( phy2hctrl_dti_upp         ),
    .phy2hctrl_dti_low          ( phy2hctrl_dti_low         ),
    .phy_status                 ( phy_status                ),
    .hctrl2phy_dto              (                           ),
    .wrlvl_mode                 ( wrlvl_mode                ),
    .wrlvl_qin                  ( remap_wrlvl_qin           ),
    .loopback_mode              ( loopback_mode             ),
    .loopback_clknum_sel        ( loopback_clknum_sel       ),
    .loopback_clk_sel           ( loopback_clk_sel          ),
    .loopback_fifo_dataout_upp  ( loopback_fifo_dataout_upp ),
    .loopback_fifo_dataout_low  ( loopback_fifo_dataout_low ),
    .hctrl2io_pdr               ( hctrl2io_pdr              ),
    .hctrl2io_odt_en            ( hctrl2io_odt_en           ),
    .delay_dti_upp              ( delay_dti_upp             ),
    .hctrl_vref_rank_sel_upp    ( hctrl_vref_rank_sel_upp   ),
    .loopback_en_out            ( loopback_en_out           ),
    .delay_testmode_en          ( delay_testmode_en         ),
    .delay_osc_chain_en         ( delay_osc_chain_en        ),
    .delay_dti_low              ( delay_dti_low             ),
    .delay_osc_div              ( delay_osc_div             ),
    .delay_osc_wrlvl_sel        ( delay_osc_wrlvl_sel       ),
    .delay_osc_wdata_sel        ( delay_osc_wdata_sel       ),
    .delay_osc_sel_low          ( delay_osc_sel_low         ),
    .vref_value_low             ( vref_value_low            ),
    .vref_value_upp             ( vref_value_upp            ),
    .ioloopback_sel_upp         ( ioloopback_sel_upp        ),
    .ioloopback_sel_low         ( ioloopback_sel_low        ),
    .apb_sync_path_sel          ( apb_sync_path_sel         ),
    .wakeup_mux_dly             ( 1'b1                      ),
    .dqs_pupd_en                ( dqs_pupd_en_i             )
);


ph1_logic_bus_matrix #(
    .BYTE_LANE_0                ( BYTE_LANE_0       ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1                ( BYTE_LANE_1       ),
    .BYTE_LANE_2                ( BYTE_LANE_2       ),
    .DATA_CTRL_0                ( DATA_CTRL_0       ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1                ( DATA_CTRL_1       ),
    .DATA_CTRL_2                ( DATA_CTRL_2       ),
    .ADDR_MAP                   ( ADDR_MAP          ),
    .CK_MAP                     ( CK_MAP            ),
    .BANK_MAP                   ( BANK_MAP          ),
    .CKE_MAP                    ( CKE_MAP           ),
    .ODT_MAP                    ( ODT_MAP           ),
    .CS_MAP                     ( CS_MAP            ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP             ( BANK_GROUP_MAP    ),
    .ACT_MAP                    ( ACT_MAP           ),
    .PARITY_MAP                 ( PARITY_MAP        ),
    .ALERT_MAP                  ( ALERT_MAP         ),
    .DM_DBI_MAP                 ( DM_DBI_MAP        ),
`elsif DRAM_DDR3
    .RAS_MAP                    ( RAS_MAP           ),
    .CAS_MAP                    ( CAS_MAP           ),
    .WE_MAP                     ( WE_MAP            ),
    .DM_MAP                     ( DM_MAP            ),
`endif

    .DQS_GATE_MAP               ( DQS_GATE_MAP      ),
    .DQS_BYTE_MAP               ( DQS_BYTE_MAP      ),
    .RESET_MAP                  ( RESET_MAP         ),
    .DATA0_MAP                  ( DATA0_MAP         ),
    .DATA1_MAP                  ( DATA1_MAP         ),
    .DATA2_MAP                  ( DATA2_MAP         ),
    .DATA3_MAP                  ( DATA3_MAP         ),
    .DATA4_MAP                  ( DATA4_MAP         ),
    .DATA5_MAP                  ( DATA5_MAP         ),
    .DATA6_MAP                  ( DATA6_MAP         ),
    .DATA7_MAP                  ( DATA7_MAP         ),
    .DATA8_MAP                  ( DATA8_MAP         ),
    .LOC_DX_BYTELANE_MAP        ( LOC_DX_BYTELANE_MAP ),
    .LOC_AC_BYTELANE_MAP        ( LOC_AC_BYTELANE_MAP ),
    .DQS_GATE_WIDTH             ( DQS_GATE_WIDTH    ),
    .ADDR_WIDTH                 ( ADDR_WIDTH        ), //DRAM address bus width
    .ROW_WIDTH                  ( ROW_WIDTH         ), //DRAM address bus width
    .BANK_WIDTH                 ( BANK_WIDTH        ),
`ifdef DRAM_DDR4
    .BG_WIDTH                   ( BG_WIDTH          ),
`endif
    .ODT_WIDTH                  ( ODT_WIDTH         ),
    .CK_WIDTH                   ( CK_WIDTH          ), // # of CK/CK# outputs to memory
    .CKE_WIDTH                  ( CKE_WIDTH         ), // # of cke outputs
    .CS_WIDTH                   ( CS_WIDTH          ), // # of unique CS outputs
    .DQ_WIDTH                   ( DQ_WIDTH          ),
    .DQS_WIDTH                  ( DQS_WIDTH         ), // # of DQS (strobe)
    .DM_WIDTH                   ( DM_WIDTH          ),
    .DCI                        ( DCI               ),
    .AC_WIDTH                   ( AC_WIDTH          )

) u_bus_matrix(
    .sys_clk                    ( hctrl_clk            ),
    .sys_rstn                   ( rst_n                ),

    .ctrlclk_en_gate_upp        ( ctrlclk_en_gate_upp   ),
    .rdclk_en_gate_upp          ( rdclk_en_gate_upp     ),
    .ddrclk_en_gate_upp         ( ddrclk_en_gate_upp    ),
    .ctrlclk_en_gate_low        ( ctrlclk_en_gate_low   ),
    .rdclk_en_gate_low          ( rdclk_en_gate_low     ),
    .ddrclk_en_gate_low         ( ddrclk_en_gate_low    ),
    .rstn_upp                   ( rstn_upp              ),
    .rstn_low                   ( rstn_low              ),

//signals are relative to SDRAM, between hard controller and fabric/IOL
    .hctrl_addr                 ( hctrl_addr            ),
    .hctrl_cke                  ( hctrl_cke             ),
    .hctrl_odt                  ( hctrl_odt             ),
    .hctrl_cs_n                 ( hctrl_cs_n            ),
    .hctrl_bg                   ( hctrl_bg              ),
    .hctrl_ba                   ( hctrl_ba              ),
    .hctrl_act_n                ( hctrl_act_n           ),
    .hctrl_parity               ( hctrl_parity          ),
    .hctrl_alert_n              ( hctrl_alert_n         ),
    .hctrl_datain_en_upp        ( hctrl_datain_en_upp   ),
    .hctrl_dqin                 ( hctrl_dqin            ),
    .hctrl_dmin                 ( hctrl_dmin            ),
    .dqs_gate_in                ( dqs_gate_in           ),
    .hctrl2mem_ck               ( hctrl2mem_ck          ),
    .hctrl2mem_ram_rst_n        ( hctrl2mem_ram_rst_n   ),
    .hctrl2mem_cke              ( hctrl2mem_cke         ),
    .hctrl2mem_cs_n             ( hctrl2mem_cs_n        ),
    .hctrl2mem_odt              ( hctrl2mem_odt         ),
    .hctrl2mem_bg               ( hctrl2mem_bg          ),
    .hctrl2mem_ba               ( hctrl2mem_ba          ),
    .hctrl2mem_act_n            ( hctrl2mem_act_n       ),
    .hctrl2mem_addr             ( hctrl2mem_addr        ),
    .hctrl2mem_parity           ( hctrl2mem_parity      ),
    .hctrl2mem_dqout            ( hctrl2mem_dqout       ),
    .hctrl2mem_dmout            ( hctrl2mem_dmout       ),
    .hctrl2mem_dataout_en       ( hctrl2mem_dataout_en  ),
    .hctrl2mem_wdqsout          ( hctrl2mem_wdqsout     ),
`ifdef USE_EFFICIENCY_EQUALIZER
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en     ),
`else
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en_pre ),
`endif
    .hctrl_datain_en_low        ( hctrl_datain_en_low   ),

//apb signals, between hard controller and fabric/IOL
    .apb_dly_sel                ( apb_dly_sel           ),
    .apb_dly_addr               ( apb_dly_addr          ),
    .apb_dly_data               ( apb_dly_data          ),
    .apb_dly_gate               ( apb_dly_gate          ),
    .apb_dfi_io_pd              ( dfi_io_pd             ),

//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg               ( zqcal_clrcfg              ),
    .zqcal_start                ( zqcal_start               ),
    .zqcal_update_en            ( zqcal_update_en           ),
    .zqcal_vt_update_en_out     ( zqcal_vt_update_en_in     ),
    .zqcal_vt_update_en_in      ( zqcal_vt_update_en_out    ),
    .zqcal_done                 ( zqcal_done                ),
//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg                 ( dcc_clrcfg                ),
    .dcc_start                  ( dcc_start                 ),
    .dcc_update_en              ( dcc_update_en             ),
    .dcc_vt_update_en_out       ( dcc_vt_update_en_in       ),
    .dcc_vt_update_en_in        ( dcc_vt_update_en_out      ),
    .dcc_done                   ( dcc_done                  ),
//Delay Line calibration, between hard controller and fabric/IOL
    .delay_cal_en_in_upp        ( delay_cal_en_in_upp       ),
    .delay_cal_in_upp           ( delay_cal_in_upp          ),
    .delay_cal_en_in_low        ( delay_cal_en_in_low       ),
    .delay_cal_in_low           ( delay_cal_in_low          ),
    .delay_cal_mode_upp         ( delay_cal_mode_upp        ),
    .delay_cal_clk_en_upp       ( delay_cal_clk_en_upp      ),
    .delay_cal_en_out_upp       ( delay_cal_en_out_upp      ),
    .delay_cal_mode_low         ( delay_cal_mode_low        ),
    .delay_cal_clk_en_low       ( delay_cal_clk_en_low      ),
    .delay_cal_en_out_low       ( delay_cal_en_out_low      ),
//debug signals, between hard controller and fabric/IOL
    .loopback_fifo_rstn_upp     ( loopback_fifo_rstn_upp    ),
    .loopback_fifo_rstn_low     ( loopback_fifo_rstn_low    ),
    .delay_gate                 ( delay_gate                ),
    .phy_dqs_cnt                ( phy_dqs_cnt               ),
    .loopback_fifo_resp_upp     ( loopback_fifo_resp_upp    ),
    .loopback_fifo_resp_low     ( loopback_fifo_resp_low    ),
    .phy_status                 ( phy_status                ),
    .wrlvl_mode                 ( wrlvl_mode                ),
    .wrlvl_qin                  ( remap_wrlvl_qin           ),
    .loopback_mode              ( loopback_mode             ),
    .loopback_clknum_sel        ( loopback_clknum_sel       ),
    .loopback_clk_sel           ( loopback_clk_sel          ),
    .loopback_fifo_dataout_upp  ( loopback_fifo_dataout_upp ),
    .loopback_fifo_dataout_low  ( loopback_fifo_dataout_low ),
    .hctrl2io_pdr               ( hctrl2io_pdr              ),
    .hctrl2io_odt_en            ( hctrl2io_odt_en           ),
    .delay_dti_upp              ( delay_dti_upp             ),
    .hctrl_vref_rank_sel_upp    ( hctrl_vref_rank_sel_upp   ),
    .loopback_en_in             ( loopback_en_out           ),
    .delay_dti_low              ( delay_dti_low             ),
    .delay_osc_div              ( delay_osc_div             ),
    .delay_osc_wrlvl_sel        ( delay_osc_wrlvl_sel       ),
    .delay_osc_wdata_sel        ( delay_osc_wdata_sel       ),
    .delay_osc_sel_low          ( delay_osc_sel_low         ),
    .vref_value_low             ( vref_value_low            ),
    .vref_value_upp             ( vref_value_upp            ),
    .dqs_pupd_en_i              ( dqs_pupd_en_i             ),

//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
    .o_dfi_io_pd                    ( o_dfi_io_pd           ),
    .wrlvl_rdqout                   ( wrlvl_rdqout          ),  //A_wrlvl_qout
    .wrlvl_wrqout                   ( wrlvl_wrqout          ),
    .dqs_rd_gate_status_p0          ( dqs_rd_gate_status_p0 ),  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status_p1          ( dqs_rd_gate_status_p1 ),  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status_p2          ( dqs_rd_gate_status_p2 ),  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .mc0_phy_clk_wren_gt            ( mc0_phy_clk_wren_gt   ),  //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
    .mc0_phy_clk_rden_gt            ( mc0_phy_clk_rden_gt   ),  //clock gate signal of phy_clk in read operation;
    .phy_ddr_clk_gate0              ( phy_ddr_clk_gate0     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate1              ( phy_ddr_clk_gate1     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate2              ( phy_ddr_clk_gate2     ),  //phy_clk and ddr_clk gate signal
    .phy_rstn_low                   ( phy_rstn_low          ),
    .phy_rstn_upp                   ( phy_rstn_upp          ),
    .phy_rd_dm                      ( phy_rd_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                                //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata                      ( phy_rdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_rd_en                      ( phy_rd_en             ),  //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata_se                   ( phy_rdata_se          ),  //2 single pad per bank, 6 pairs pads in 3 banks;
    .phy_rd_dqsn                    ( phy_rd_dqsn           ),
    .phy_rd_dqsp                    ( phy_rd_dqsp           ),
    .phy_wr_dm                      ( phy_wr_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A;
                                                                //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wdata                      ( phy_wdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_wr_en                      ( phy_wr_en             ),  //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wrdata_se                  ( phy_wrdata_se         ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_wr_dqsn                    ( phy_wr_dqsn           ),
    .phy_wr_dqsp                    ( phy_wr_dqsp           ),
    .dqs_iogate_rdata               ( dqs_iogate_rdata      ),  //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_gate_en                 ( dqs_rd_gate_en        ),  //read dqs gate enable; [7:0]: bank0_bytelane_A; 
                                                                //[95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_en_shadow               ( dqs_rd_en_shadow      ),
    .dqs_pupd_en_o                  ( dqs_pupd_en_o         ),  //dqs pull-up and pull-down enable when training
    .remap_apb_dly_sel              ( remap_apb_dly_sel     ),
    .remap_apb_dly_addr             ( remap_apb_dly_addr    ),
    .remap_apb_dly_data             ( remap_apb_dly_data    ),
    .remap_apb_dly_gate             ( remap_apb_dly_gate    ),
    .remap_delay_cal_en_in          ( remap_delay_cal_en_in ),
    .remap_delay_cal_in             ( remap_delay_cal_in    ),
    .remap_delay_cal_mode           ( remap_delay_cal_mode  ),
    .remap_delay_cal_clk_en         ( remap_delay_cal_clk_en),
    .remap_delay_cal_en_out         ( remap_delay_cal_en_out),
    .dqs_rd_gate_status0            ( dqs_rd_gate_status0   ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status1            ( dqs_rd_gate_status1   ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status2            ( dqs_rd_gate_status2   ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .remap_loopback_fifo_rstn_upp   ( remap_loopback_fifo_rstn_upp),
    .remap_loopback_fifo_rstn_low   ( remap_loopback_fifo_rstn_low),
//dqs signals
    .dqs_rstn0                      ( dqs_rstn0                 ),  //bank0,[3:0]:D/C/B/A
    .dqs_rstn1                      ( dqs_rstn1                 ),  //bank1,[3:0]:D/C/B/A
    .dqs_rstn2                      ( dqs_rstn2                 ),  //bank2,[3:0]:D/C/B/A
    .loopback_fifo_datain_low       ( loopback_fifo_datain_low  ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_upp       ( loopback_fifo_datain_upp  ),
    .remap_vref_ctrl_value          ( remap_vref_ctrl_value     ),
    .remap_dqs_cnt                  ( remap_dqs_cnt             ),
    .remap_loopback_fifo_resp_upp   ( remap_loopback_fifo_resp_upp  ),
    .remap_loopback_fifo_resp_low   ( remap_loopback_fifo_resp_low  ),
    .remap_delay_gate               ( remap_delay_gate          ),
    .remap_loopback_clknum_sel      ( remap_loopback_clknum_sel ),
    .remap_loopback_clk_sel         ( remap_loopback_clk_sel    ),
    .remap_delay_dti                ( remap_delay_dti           ),
    .remap_delay_osc_wdq_ac_sel     ( remap_delay_osc_wdq_ac_sel),
    .remap_wrlvl_mode               ( remap_wrlvl_mode          ),
    .remap_loopback_mode            ( remap_loopback_mode       ),
    .remap_phy_rd_dqs_pdr           ( remap_phy_rd_dqs_pdr      ),
    .remap_phy_rd_dqs_te            ( remap_phy_rd_dqs_te       ),
    .remap_vref_rank_sel            ( remap_vref_rank_sel       ),
    .remap_loopback_en                      ( remap_loopback_en ),
//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg_o                 ( zqcal_clrcfg_o            ),
    .zqcal_start_o                  ( zqcal_start_o             ),
    .zqcal_update_en_o              ( zqcal_update_en_o         ),
    .zqcal_vt_update_en_out_i       ( zqcal_vt_update_en_out_i  ),
    .zqcal_vt_update_en_in_o        ( zqcal_vt_update_en_in_o   ),
    .zqcal_done_i                   ( zqcal_done_i              ),

//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg_o                   ( dcc_clrcfg_o              ),
    .dcc_start_o                    ( dcc_start_o               ),
    .dcc_update_en_o                ( dcc_update_en_o           ),
    .dcc_vt_update_en_out_i         ( dcc_vt_update_en_out_i    ),
    .dcc_vt_update_en_in_o          ( dcc_vt_update_en_in_o     ),
    .dcc_done_i                     ( dcc_done_i                )

);

ph1_logic_ddrphy_streamlined #(
    .TCK                        ( TCK               ),  //memory tCK parameter, clock period in ps
    .NCK_PER_CLK                ( NCK_PER_CLK       ),  //4,2. Fabric clk period : Memory clk period
    .DQS_GATE                   ( DQS_GATE          ),
    .CTRL_INDEX                 ( CTRL_INDEX        ),
//bank and pad position parameters about ddr bus
    .BYTE_LANE_0                ( BYTE_LANE_0       ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1                ( BYTE_LANE_1       ),
    .BYTE_LANE_2                ( BYTE_LANE_2       ),
    .DATA_CTRL_0                ( DATA_CTRL_0       ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1                ( DATA_CTRL_1       ),
    .DATA_CTRL_2                ( DATA_CTRL_2       ),
    .ADDR_MAP                   ( ADDR_MAP          ),
    .CK_MAP                     ( CK_MAP            ),
    .BANK_MAP                   ( BANK_MAP          ),
    .CKE_MAP                    ( CKE_MAP           ),
    .ODT_MAP                    ( ODT_MAP           ),
    .CS_MAP                     ( CS_MAP            ),
    .DQS_GATE_MAP               ( DQS_GATE_MAP      ),
    .RESET_MAP                  ( RESET_MAP         ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP             ( BANK_GROUP_MAP    ),
    .ACT_MAP                    ( ACT_MAP           ),
    .PARITY_MAP                 ( PARITY_MAP        ),
    .ALERT_MAP                  ( ALERT_MAP         ),  
    .DM_DBI_MAP                 ( DM_DBI_MAP        ),
`elsif DRAM_DDR3
    .RAS_MAP                    ( RAS_MAP           ),
    .CAS_MAP                    ( CAS_MAP           ),
    .WE_MAP                     ( WE_MAP            ),
    .DM_MAP                     ( DM_MAP            ),
`endif
    .DQS_BYTE_MAP               ( DQS_BYTE_MAP      ),
    .DATA0_MAP                  ( DATA0_MAP         ),
    .DATA1_MAP                  ( DATA1_MAP         ),
    .DATA2_MAP                  ( DATA2_MAP         ),
    .DATA3_MAP                  ( DATA3_MAP         ),
    .DATA4_MAP                  ( DATA4_MAP         ),
    .DATA5_MAP                  ( DATA5_MAP         ),
    .DATA6_MAP                  ( DATA6_MAP         ),
    .DATA7_MAP                  ( DATA7_MAP         ),
    .DATA8_MAP                  ( DATA8_MAP         ),
    .DQS_GATE_WIDTH             ( DQS_GATE_WIDTH    ),
    .ADDR_WIDTH                 ( ADDR_WIDTH        ),  // DRAM address bus width
    .ROW_WIDTH                  ( ROW_WIDTH         ),
    .BANK_WIDTH                 ( BANK_WIDTH        ),
    .ODT_WIDTH                  ( ODT_WIDTH         ),
    .CK_WIDTH                   ( CK_WIDTH          ),  // # of CK/CK# outputs to memory
    .CKE_WIDTH                  ( CKE_WIDTH         ),  // # of cke outputs
    .CS_WIDTH                   ( CS_WIDTH          ),  // # of unique CS outputs
    .DQ_WIDTH                   ( DQ_WIDTH          ),
    .DQS_WIDTH                  ( DQS_WIDTH         ),  // # of DQS (strobe)
    .DM_WIDTH                   ( DM_WIDTH          ),
`ifdef DRAM_DDR4
    .BG_WIDTH                   ( BG_WIDTH          ),
    .DM_DBI                     ( DM_DBI            ),  //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    .AC_WIDTH                   ( AC_WIDTH          ),
//Memory Option
    .INTER_VREF                 ( INTER_VREF        ),  //"Enable", "Disable"
    .DCI                        ( DCI               )   //"Enable", "Disable"

) u_ddrphy(
    .ctl_rst_n_bank0        ( {4{rst_n}}            ),
    .ctl_rst_n_bank1        ( {4{rst_n}}            ),
    .ctl_rst_n_bank2        ( {4{rst_n}}            ),
    .pzq_ctl_rst_n          ( {3{rst_n}}            ),
    .A_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .B_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .C_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .D_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .A_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .B_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .C_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .D_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .A_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .B_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .C_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .D_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .lclk_0                 ( lclk_0                ),
    .lclk_1                 ( lclk_1                ),
    .lclk_2                 ( lclk_2                ),
    .hctrl_clk0             ( {4{bank33_hctrl_clk}} ),
    .hctrl_clk1             ( {4{bank32_hctrl_clk}} ),
    .hctrl_clk2             ( {4{bank31_hctrl_clk}} ),
    .pzq_user_clk           ( {bank31_hctrl_clk, bank32_hctrl_clk, bank33_hctrl_clk} ),
    .mc0_phy_clk_wren_gt    ( mc0_phy_clk_wren_gt   ),  //clock gate signal of phy_clk in write operation ;
    .mc0_phy_clk_rden_gt    ( mc0_phy_clk_rden_gt   ),  //clock gate signal of phy_clk in read operation;
    .phy_ddr_clk_gate0      ( phy_ddr_clk_gate0     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate1      ( phy_ddr_clk_gate1     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate2      ( phy_ddr_clk_gate2     ),  //phy_clk and ddr_clk gate signal
    .phy_rstn_low           ( phy_rstn_low          ),
    .phy_rstn_upp           ( phy_rstn_upp          ),
//DDR bus signals
    `ifdef USE_DQS_GATE
        .dqs_gate           ( dqs_gate              ),
    `endif
    .ddr_addr               ( ddr_addr              ),
    .ddr_ba                 ( ddr_ba                ),
    .ddr_cke                ( ddr_cke               ),
    .ddr_odt                ( ddr_odt               ),
`ifdef USE_RESET
    .ddr_reset_n            ( ddr_reset_n           ),
`endif
`ifdef USE_CS
    .ddr_cs_n               ( ddr_cs_n              ),
`endif
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm                ),
`endif
    .ddr_dq                 ( ddr_dq                ),
`ifdef DRAM_DDR4
    .ddr_bg                 ( ddr_bg                ),
    .ddr_ck_c               ( ddr_ck_c              ),
    .ddr_ck_t               ( ddr_ck_t              ),
`ifdef USE_PAR_ALERT
    .ddr_parity             ( ddr_parity            ),
    .ddr_alert_n            ( ddr_alert_n           ),
`endif
    .ddr_act_n              ( ddr_act_n             ),
    .ddr_dqs_c              ( ddr_dqs_c             ),
    .ddr_dqs_t              ( ddr_dqs_t             ),
`elsif DRAM_DDR3
    .ddr_ck_c               ( ddr_ck_n              ),
    .ddr_ck_t               ( ddr_ck_p              ),
    .ddr_ras_n              ( ddr_ras_n             ),
    .ddr_cas_n              ( ddr_cas_n             ),
    .ddr_we_n               ( ddr_we_n              ),
    .ddr_dqs_c              ( ddr_dqs_n             ),
    .ddr_dqs_t              ( ddr_dqs_p             ),
`endif
//debug signals
    .age_toggle_inv         ( 3'b000                ),  //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    .age_toggle_en          ( 3'b000                ),  //{3{age_toggle_en}}  ),  //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    .dfi_io_pd              ( {12{o_dfi_io_pd}}     ),  //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
//dcc control
    .dcc_cfg_done           ( dcc_done_i            ),  //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
    .dcc_clrcfg             ( dcc_clrcfg_o          ),
    .dcc_start              ( dcc_start_o           ),
    .dcc_update_en_in       ( dcc_update_en_o       ),
    .dcc_vt_update_en_in    ( dcc_vt_update_en_in_o ),
    .dcc_vt_update_en_out   ( dcc_vt_update_en_out_i), //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
//delay control
    .delay_cal_clk_en0      ( remap_delay_cal_clk_en[27:0]  ),  //bank0,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in0       ( remap_delay_cal_en_out[27:0]  ),
    .delay_cal_en_out0      ( remap_delay_cal_en_in[27:0]   ),
    .delay_cal_mode0        ( remap_delay_cal_mode[3:0]     ),  //bank0,[3:0]:D/C/B/A
    .delay_cal_value0       ( remap_delay_cal_in[27:0]      ),
    .delay_cal_clk_en1      ( remap_delay_cal_clk_en[55:28] ),  //bank1,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in1       ( remap_delay_cal_en_out[55:28] ),
    .delay_cal_en_out1      ( remap_delay_cal_en_in[55:28]  ),
    .delay_cal_mode1        ( remap_delay_cal_mode[7:4]     ),  //bank1,[3:0]:D/C/B/A
    .delay_cal_value1       ( remap_delay_cal_in[55:28]     ),
    .delay_cal_clk_en2      ( remap_delay_cal_clk_en[83:56] ),  //bank2,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in2       ( remap_delay_cal_en_out[83:56] ),
    .delay_cal_en_out2      ( remap_delay_cal_en_in[83:56]  ),
    .delay_cal_mode2        ( remap_delay_cal_mode[11:8]    ),  //bank2,[3:0]:D/C/B/A
    .delay_cal_value2       ( remap_delay_cal_in[83:56]     ),
//delay ctrl signals, use phy_clk
    .delay_paddr0           ( remap_apb_dly_addr[23:0]      ),  //bank0,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data0            ( remap_apb_dly_data[35:0]      ),  //bank0,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel0             ( remap_apb_dly_sel[3:0]        ),  //bank0,[3:0]:D/C/B/A
    .delay_ranksel0         ( remap_delay_gate[3:0]         ),  //bank0,[3:0]:D/C/B/A
    .delay_dto0             ( remap_delay_dti[3:0]          ),  //bank0,[3:0]:D/C/B/A
    .delay_gate0            ( remap_apb_dly_gate[3:0]       ),  //bank0,[3:0]:D/C/B/A
    .delay_osc_div0         ( {4{delay_osc_div}}            ),  //bank0,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en0          ( {4{delay_osc_chain_en}}       ),  //bank0,[3:0]:D/C/B/A
    .delay_osc_wdq_sel0     ( remap_delay_osc_wdq_ac_sel[7:0]), //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel0   ( {4{delay_osc_wrlvl_sel}}      ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en0     ( {4{delay_testmode_en}}        ),  //bank0,[3:0]:D/C/B/A

    .delay_paddr1           ( remap_apb_dly_addr[47:24]     ),  //bank1,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data1            ( remap_apb_dly_data[71:36]     ),  //bank1,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel1             ( remap_apb_dly_sel[7:4]        ),  //bank1,[3:0]:D/C/B/A
    .delay_ranksel1         ( remap_delay_gate[7:4]         ),  //bank1,[3:0]:D/C/B/A
    .delay_dto1             ( remap_delay_dti[7:4]          ),  //bank1,[3:0]:D/C/B/A
    .delay_gate1            ( remap_apb_dly_gate[7:4]       ),  //bank1,[3:0]:D/C/B/A
    .delay_osc_div1         ( {4{delay_osc_div}}            ),  //bank1,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en1          ( {4{delay_osc_chain_en}}       ),  //bank1,[3:0]:D/C/B/A
    .delay_osc_wdq_sel1     ( remap_delay_osc_wdq_ac_sel[15:8]),//bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel1   ( {4{delay_osc_wrlvl_sel}}      ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en1     ( {4{delay_testmode_en}}        ),  //bank1,[3:0]:D/C/B/A

    .delay_paddr2           ( remap_apb_dly_addr[71:48]     ),  //bank2,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data2            ( remap_apb_dly_data[107:72]    ),  //bank2,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel2             ( remap_apb_dly_sel[11:8]       ),  //bank2,[3:0]:D/C/B/A
    .delay_ranksel2         ( remap_delay_gate[11:8]        ),  //bank2,[3:0]:D/C/B/A
    .delay_dto2             ( remap_delay_dti[11:8]         ),  //bank2,[3:0]:D/C/B/A
    .delay_gate2            ( remap_apb_dly_gate[11:8]      ),  //bank2,[3:0]:D/C/B/A
    .delay_osc_div2         ( {4{delay_osc_div}}            ),  //bank2,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en2          ( {4{delay_osc_chain_en}}       ),  //bank2,[3:0]:D/C/B/A
    .delay_osc_wdq_sel2     ( remap_delay_osc_wdq_ac_sel[23:16]),//bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel2   ( {4{delay_osc_wrlvl_sel}}      ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en2     ( {4{delay_testmode_en}}        ),  //bank2,[3:0]:D/C/B/A

//APB bus signals
    .apb_clk                ( phy_apb_clk           ),
    .apb_rst_n              ( phy_apb_rst_n         ),
    .apb_addr               ( phy_apb_addr          ),
    .apb_enable             ( phy_apb_enable        ),
    .apb_error              ( phy_apb_error         ),
    .apb_rdata              ( phy_apb_rdata         ),
    .apb_ready              ( phy_apb_ready         ),
    .apb_sync_path_sel      ( apb_sync_path_sel     ),
    .apb_wdata              ( phy_apb_wdata         ),
    .apb_wr_rdn             ( phy_apb_wr_rdn        ),
    .apb_sel                ( phy_apb_sel           ),

//data signals, need to use the bit width parameter
    .phy_rd_dm              ( phy_rd_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata              ( phy_rdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_rd_en              ( phy_rd_en             ),  //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata_se           ( phy_rdata_se          ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_rd_dqsn            ( phy_rd_dqsn           ),
    .phy_rd_dqsp            ( phy_rd_dqsp           ),

    .phy_wr_dm              ( phy_wr_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wdata              ( phy_wdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_wr_en              ( phy_wr_en             ),  //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wrdata_se          ( phy_wrdata_se         ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_wr_dqsn            ( phy_wr_dqsn           ),
    .phy_wr_dqsp            ( phy_wr_dqsp           ),

//dqs signals
    .dqs_rd_gate_status0    ( dqs_rd_gate_status0   ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p0  ( dqs_rd_gate_status_p0 ),  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status1    ( dqs_rd_gate_status1   ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p1  ( dqs_rd_gate_status_p1 ),  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status2    ( dqs_rd_gate_status2   ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p2  ( dqs_rd_gate_status_p2 ),  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rstn0              ( dqs_rstn0             ),  //bank0,[3:0]:D/C/B/A
    .dqs_rstn1              ( dqs_rstn1             ),  //bank1,[3:0]:D/C/B/A
    .dqs_rstn2              ( dqs_rstn2             ),  //bank2,[3:0]:D/C/B/A
    .dqs_cnt                ( remap_dqs_cnt         ),  //[7:0]: bank0_bytelane_D/C/B/A; [15:8]:bank1_bytelane_D/C/B/A; [23:16]:bank2_bytelane_D/C/B/A
    .dqs_iogate_rdata       ( dqs_iogate_rdata      ),  //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_gate_en         ( dqs_rd_gate_en        ),  //read dqs gate enable; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_en_shadow       ( dqs_rd_en_shadow ),


//debug signals
    .atpg_mode0             ( {5{atpg_mode}}                ),  //bank0,[4:0]:pzq/D/C/B/A
    .atpg_mode1             ( {5{atpg_mode}}                ),  //bank1,[4:0]:pzq/D/C/B/A
    .atpg_mode2             ( {5{atpg_mode}}                ),  //bank2,[4:0]:pzq/D/C/B/A
    .loopback_clk_sel       ( remap_loopback_clk_sel        ),  //[1:0]: bank0_bytelane_A; [7:0]: bank0_bytelane_D/C/B/A;
                                                                //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    .loopback_clknum_sel    ( remap_loopback_clknum_sel     ),  //[1:0]: bank0_bytelane_A; [7:0]: bank0_bytelane_D/C/B/A;
                                                                //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_low( loopback_fifo_datain_low     ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_upp( loopback_fifo_datain_upp     ),
    .loopback_fifo_resp_low ( remap_loopback_fifo_resp_low  ),
    .loopback_fifo_resp_upp ( remap_loopback_fifo_resp_upp  ),
    .loopback_fifo_rstn_low ( remap_loopback_fifo_rstn_low  ),
    .loopback_fifo_rstn_upp ( remap_loopback_fifo_rstn_upp  ),
    .loopback_mode          ( remap_loopback_mode           ),
    .loopback_en            ( remap_loopback_en             ),
                                                                //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    .offcal_clrcfg          ( offcal_clrcfg_o               ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .offcal_done            ( offcal_done_i                 ),
    .offcal_start           ( offcal_start_o                ),
    .offcal_update_en       ( offcal_update_en_o            ),
    .offcal_vt_update_en_in ( offcal_vt_update_en_in_o      ),
    .offcal_vt_update_en_out( offcal_vt_update_en_out_i     ),

    .phy_rd_dqs_pdr0        ( remap_phy_rd_dqs_pdr[31:0]    ),  //IO power downreceiver;
    .phy_rd_dqs_pdr1        ( remap_phy_rd_dqs_pdr[63:32]   ),
    .phy_rd_dqs_pdr2        ( remap_phy_rd_dqs_pdr[95:64]   ),
    .phy_rd_dqs_te0         ( remap_phy_rd_dqs_te[31:0]     ),  //IO termination enable;
    .phy_rd_dqs_te1         ( remap_phy_rd_dqs_te[63:32]    ),
    .phy_rd_dqs_te2         ( remap_phy_rd_dqs_te[95:64]    ),
    .wrlvl_en               ( remap_wrlvl_mode              ),  //write leveling enable;
    .wrlvl_qin              ( wrlvl_wrqout                  ),  //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    .wrlvl_qout             ( wrlvl_rdqout                  ),
    .dqs_pupd_en            ( dqs_pupd_en_o                 ),  //dqs pull-up and pull-down enable when training
    .clb2phy_vref0          ( 24'hffffff                    ),
    .clb2phy_vref1          ( 24'hffffff                    ),
    .clb2phy_vref2          ( 24'hffffff                    ),
    .clb2phy_vref3          ( 24'hffffff                    ),
    .zqcal_clrcfg           ( {zqcal_clrcfg_o,zqcal_clrcfg_o,zqcal_clrcfg_o}        ),
    .zqcal_done             ( zqcal_done_i                                          ),
    .zqcal_start            ( {zqcal_start_o,zqcal_start_o,zqcal_start_o}           ),
    .zqcal_update_en        ( {zqcal_update_en_o,zqcal_update_en_o,zqcal_update_en_o}),
    .zqcal_vt_update_en_in  ( {3{zqcal_vt_update_en_in_o}}                          ),
    .zqcal_vt_update_en_out ( zqcal_vt_update_en_out_i                              ),
    .vref_value_sel         ( {remap_vref_rank_sel[8],remap_vref_rank_sel[9],remap_vref_rank_sel[10],remap_vref_rank_sel[11],
                               remap_vref_rank_sel[4],remap_vref_rank_sel[5],remap_vref_rank_sel[6],remap_vref_rank_sel[7],
                               remap_vref_rank_sel[0],remap_vref_rank_sel[1],remap_vref_rank_sel[2],remap_vref_rank_sel[3]}),
    .vref_ctrl_value        ( {remap_vref_ctrl_value[125:112],remap_vref_ctrl_value[139:126],remap_vref_ctrl_value[153:140],remap_vref_ctrl_value[167:154],
                               remap_vref_ctrl_value[69:56  ],remap_vref_ctrl_value[83:70  ],remap_vref_ctrl_value[97:84  ],remap_vref_ctrl_value[111:98 ],
                               remap_vref_ctrl_value[13:0   ],remap_vref_ctrl_value[27:14  ],remap_vref_ctrl_value[41:28  ],remap_vref_ctrl_value[55:42  ]}),
    .zqcal_debug_data0      ( zqcal_debug_data0             ),
    .zqcal_debug_data1      ( zqcal_debug_data1             ),
    .zqcal_debug_data2      ( zqcal_debug_data2             ),
    .dqsgr_debug_data0      ( dqsgr_debug_data0             ),
    .dqsgr_debug_data1      ( dqsgr_debug_data1             ),
    .dqsgr_debug_data2      ( dqsgr_debug_data2             )

);

`ifdef USE_EFFICIENCY_EQUALIZER
ph1_logic_ddrphy_gate_gen_glue u_gate_gen (
    .ctl_clk                   ( hctrl_clk       ),
    .ctl_rst_n                 ( rst_n                  ),
    .dfi_cs_n                  ( dfi_cs_n               ),
    .dfi_act_n                 ( dfi_act_n              ),
    .dfi_ras_n                 ( dfi_ras_n              ),
    .dfi_cas_n                 ( dfi_cas_n              ),
    .dfi_we_n                  ( dfi_we_n               ),
    .dfi_rddata_en             ( dfi_rddata_en          ),
    .gate_ctl_qs_en            ( hctrl2mem_rdqs_en_pre  ),
    .phy_ctl_qs_en             ( hctrl2mem_rdqs_en      ),

    .apb_clk                   ( gate_apb_clk           ),
    .apb_rst_n                 ( gate_apb_rst_n         ),
    .apb_ready                 ( gate_apb_ready         ),
    .apb_enable                ( gate_apb_enable        ),
    .apb_sel                   ( gate_apb_sel           ),
    .apb_wr_rdn                ( gate_apb_wr_rdn        ),
    .apb_addr                  ( gate_apb_addr          ),
    .apb_rdata                 ( gate_apb_rdata         ),
    .apb_wdata                 ( gate_apb_wdata         ),
    .apb_error                 ( gate_apb_error         )

);

`endif

endmodule


`timescale 1ps/1ps

module ph1_logic_bus_matrix(
//---------------------apb bus and general signals--------------------------------------------------
        input                             sys_rstn,
        input                             sys_clk,

//----------------ports lay on between phy_control and bus_matrix----------------------------------
//control signals, between hard controller and fabric/IOL
        input[8:0]                      ctrlclk_en_gate_upp,
        input[8:0]                      rdclk_en_gate_upp,
        input[8:0]                      ddrclk_en_gate_upp,
        input                           ctrlclk_en_gate_low,
        input                           rdclk_en_gate_low,
        input                           ddrclk_en_gate_low,
        input[8:0]                      rstn_upp,
        input                           rstn_low,
//signals are relative to SDRAM, between hard controller and fabric/IOL
        output reg[143:0]               hctrl_addr,
        output reg[15:0]                hctrl_cke,
        output reg[15:0]                hctrl_odt,
        output reg[15:0]                hctrl_cs_n,
        output reg[15:0]                hctrl_bg,
        output reg[15:0]                hctrl_ba,
        output reg[7:0]                 hctrl_act_n,
        output reg[7:0]                 hctrl_parity,
        output reg[7:0]                 hctrl_alert_n,
        output reg[17:0]                hctrl_datain_en_upp,
        output reg[575:0]               hctrl_dqin,
        output reg[71:0]                hctrl_dmin,
        output reg[71:0]                dqs_gate_in,
        input[15:0]                     hctrl2mem_ck,
        input                           hctrl2mem_ram_rst_n,
        input[15:0]                     hctrl2mem_cke,
        input[15:0]                     hctrl2mem_cs_n,
        input[15:0]                     hctrl2mem_odt,
        input[15:0]                     hctrl2mem_bg,
        input[15:0]                     hctrl2mem_ba,
        input[7:0]                      hctrl2mem_act_n,
        input[143:0]                    hctrl2mem_addr,
        input[7:0]                      hctrl2mem_parity,
        input[575:0]                    hctrl2mem_dqout,
        input[71:0]                     hctrl2mem_dmout,
        input[71:0]                     hctrl2mem_dataout_en,
        input[71:0]                     hctrl2mem_wdqsout,
        input[71:0]                     hctrl2mem_rdqs_en,
        output                          hctrl_datain_en_low,
//apb signals, between hard controller and fabric/IOL
        input[12:0]                     apb_dly_sel,
        input[59:0]                     apb_dly_addr,
        input[89:0]                     apb_dly_data,
        input[9:0]                      apb_dly_gate,
        input                           apb_dfi_io_pd,

//zcal control, between hard controller and fabric/IOL
        input                           zqcal_clrcfg,
        input                           zqcal_start,
        input                           zqcal_update_en,
        input                           zqcal_vt_update_en_in,
        output [2:0]                    zqcal_vt_update_en_out,
        output [2:0]                    zqcal_done,

//DCC control, between hard controller and fabric/IOL
        input                           dcc_clrcfg,
        input                           dcc_start,
        input                           dcc_update_en,
        input                           dcc_vt_update_en_in,
        output [11:0]                   dcc_vt_update_en_out,
        output [11:0]                   dcc_done,

//Delay Line calibration, between hard controller and fabric/IOL
         //delay control
        output reg[62:0]                delay_cal_en_in_upp,
        output reg[62:0]                delay_cal_in_upp,
        output [1:0]                    delay_cal_en_in_low,
        output [1:0]                    delay_cal_in_low,
        input[8:0]                      delay_cal_mode_upp,
        input[62:0]                     delay_cal_clk_en_upp,
        input[62:0]                     delay_cal_en_out_upp,
        input                           delay_cal_mode_low,
        input[1:0]                      delay_cal_clk_en_low,
        input[1:0]                      delay_cal_en_out_low,

//debug signals, between hard controller and fabric/IOL
        input[8:0]                      loopback_fifo_rstn_upp,
        input                           loopback_fifo_rstn_low,
        input[8:0]                      delay_gate,
        output reg[17:0]                phy_dqs_cnt,
        input                           loopback_fifo_resp_low,
        input                           loopback_fifo_resp_upp,
        output reg[17:0]                phy_status,
        input[8:0]                      wrlvl_mode,
        output reg[71:0]                wrlvl_qin, //remap_wrlvl_qin
        input                           loopback_mode,
        input[1:0]                      loopback_clknum_sel,
        input[1:0]                      loopback_clk_sel,
        input[71:0]                     hctrl2io_pdr,
        input[71:0]                     hctrl2io_odt_en,
        output reg[8:0]                 delay_dti_upp,
        input[8:0]                      hctrl_vref_rank_sel_upp,
        input[7:0]                      loopback_en_in,
        input[17:0]                     loopback_fifo_dataout_upp,
        input                           loopback_fifo_dataout_low,
        output[2:0]                     delay_dti_low,
        input[3:0]                      delay_osc_div,
        input[1:0]                      delay_osc_wrlvl_sel,
        input[1:0]                      delay_osc_wdata_sel,
        input[1:0]                      delay_osc_sel_low,
        input[41:0]                     vref_value_low,
        input[125:0]                    vref_value_upp,
        input                           dqs_pupd_en_i,
//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
        output                          o_dfi_io_pd,
        input[71:0]                     wrlvl_rdqout, //A_wrlvl_qout
        output reg[95:0]                wrlvl_wrqout,
        input[31:0]                     dqs_rd_gate_status_p0,//bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                                            //clock domain: phy_clk, parallel signals
        input[31:0]                     dqs_rd_gate_status_p1,//bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
        input[31:0]                     dqs_rd_gate_status_p2,//bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                                    //clock domain: phy_clk, parallel signals
        output reg[11:0]                mc0_phy_clk_wren_gt, //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
        output reg[11:0]                mc0_phy_clk_rden_gt, //clock gate signal of phy_clk in read operation;
        output[3:0]                     phy_ddr_clk_gate0,   //phy_clk and ddr_clk gate signal
        output[3:0]                     phy_ddr_clk_gate1,   //phy_clk and ddr_clk gate signal
        output[3:0]                     phy_ddr_clk_gate2,   //phy_clk and ddr_clk gate signal
        output reg[11:0]                phy_rstn_low,
        output reg[11:0]                phy_rstn_upp,
        input[12*8-1:0]                 phy_rd_dm,    //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        input[12*64-1:0]                phy_rdata,    //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
        input[11:0]                     phy_rd_en,    //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        input[6*8-1:0]                  phy_rdata_se, //2 single pad per bank, 6 pairs pads in 3 banks;
        input[12*8-1:0]                 phy_rd_dqsn,
        input[12*8-1:0]                 phy_rd_dqsp,
        output[12*8-1:0]                phy_wr_dm,    //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        output[12*64-1:0]               phy_wdata,    //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
        output reg[12*8-1:0]            phy_wr_en,    //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        output reg[6*8-1:0]             phy_wrdata_se,//2 single pad per bank, 6 pads in 3 banks;
        output [12*8-1:0]               phy_wr_dqsn,
        output[12*8-1:0]                phy_wr_dqsp,
        input[95:0]                     dqs_iogate_rdata,           //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
        output reg[12*8-1:0]            dqs_rd_gate_en,             //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
        output[12*8-1:0]                dqs_rd_en_shadow,
        output[11:0]                    dqs_pupd_en_o,                  //dqs pull-up and pull-down enable when training
        output reg[11:0]                remap_apb_dly_sel,
        output reg[71:0]                remap_apb_dly_addr,
        output reg[107:0]               remap_apb_dly_data,
        output reg[11:0]                remap_apb_dly_gate,
        input[83:0]                     remap_delay_cal_en_in,
        input[83:0]                     remap_delay_cal_in,
        output reg[11:0]                remap_delay_cal_mode,
        output reg[83:0]                remap_delay_cal_clk_en,
        output reg[83:0]                remap_delay_cal_en_out,
        input[7:0]                      dqs_rd_gate_status0,  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                        //clock domain: ddr_clk, serial signals
        input[7:0]                      dqs_rd_gate_status1,  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                        //clock domain: ddr_clk, serial signals
        input[7:0]                      dqs_rd_gate_status2,  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                    //clock domain: ddr_clk, serial signals
        output reg[11:0]                remap_loopback_fifo_rstn_upp,
        output reg[11:0]                remap_loopback_fifo_rstn_low,
//dqs signals
        output[3:0]                     dqs_rstn0,          //bank0,[3:0]:D/C/B/A
        output[3:0]                     dqs_rstn1,          //bank1,[3:0]:D/C/B/A
        output[3:0]                     dqs_rstn2,          //bank2,[3:0]:D/C/B/A
        output reg[11:0]                loopback_fifo_datain_low,//[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
        output reg[11:0]                loopback_fifo_datain_upp,
        output reg[167:0]               remap_vref_ctrl_value,
        input[23:0]                     remap_dqs_cnt,
        output[11:0]                    remap_loopback_fifo_resp_upp,
        output[11:0]                    remap_loopback_fifo_resp_low,
        output reg[11:0]                remap_delay_gate, //dly_ranksel
        output[23:0]                    remap_loopback_clknum_sel,
        output[23:0]                    remap_loopback_clk_sel,
        output [95:0]                   remap_loopback_en,
        input[11:0]                     remap_delay_dti,
        output reg[23:0]                remap_delay_osc_wdq_ac_sel,
        output reg[11:0]                remap_wrlvl_mode,
        output[11:0]                    remap_loopback_mode,
        output reg[95:0]                remap_phy_rd_dqs_pdr,
        output reg[95:0]                remap_phy_rd_dqs_te,
        output reg[11:0]                remap_vref_rank_sel,

//zcal control, between hard controller and fabric/IOL
        output                          zqcal_clrcfg_o,
        output                          zqcal_start_o,
        output                          zqcal_update_en_o,
        output                          zqcal_vt_update_en_in_o,
        input [2:0]                     zqcal_vt_update_en_out_i,
        input [2:0]                     zqcal_done_i,

//DCC control, between hard controller and fabric/IOL
        output                          dcc_clrcfg_o,
        output                          dcc_start_o,
        output                          dcc_update_en_o,
        output                          dcc_vt_update_en_in_o,
        input [11:0]                    dcc_vt_update_en_out_i,
        input [11:0]                    dcc_done_i
);

        parameter BYTE_LANE_0                   = 4'b1111;   //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
        parameter BYTE_LANE_1                   = 4'b1111;
        parameter BYTE_LANE_2                   = 4'b1111;
        parameter DATA_CTRL_0                   = 4'b1111;   // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
        parameter DATA_CTRL_1                   = 4'b0001;
        parameter DATA_CTRL_2                   = 4'b1111;
        parameter ADDR_MAP                      = 215'h000_138_139_12b_13a_130_119_129_127_12a_13b_124_122_113_132_115_121_126;
        parameter CK_MAP                        = 48'h137_136_117_116;
        parameter BANK_MAP                      = 60'h000_000_000_135_114;
        parameter CKE_MAP                       = 24'h134_133;
        parameter ODT_MAP                       = 24'h11b_120;
        parameter CS_MAP                        = 24'h118_128;

        parameter DQS_GATE_MAP                  = 108'h101_214_201_224_23b_014_03b_001_02a;
        parameter DQS_BYTE_MAP                  = 215'h107_106_217_216_207_206_227_226_237_236_017_016_037_036_007_006_027_026;

`ifdef DRAM_DDR4
        parameter DM_DBI_MAP                    = 108'h105_218_200_228_231_018_039_00a_020;
        parameter ACT_MAP                       = 12'h000;
        parameter BANK_GROUP_MAP                = 24'h000_000;
        parameter PARITY_MAP                    = 12'h000;
        parameter ALERT_MAP                     = 12'h000; 
        parameter BG_WIDTH                      = 2;
`elsif DRAM_DDR3
        parameter CAS_MAP                       = 12'h000;
        parameter RAS_MAP                       = 12'h000;
        parameter WE_MAP                        = 12'h000;
        parameter DM_MAP                        = 108'h105_218_200_228_231_018_039_00a_020;
`endif
        parameter RESET_MAP                     = 12'h11a;
        parameter DATA0_MAP                     = 96'h025_022_02b_029_021_028_023_024;
        parameter DATA1_MAP                     = 96'h00b_005_009_002_008_004_003_000;
        parameter DATA2_MAP                     = 96'h033_031_03a_034_038_030_032_035;
        parameter DATA3_MAP                     = 96'h012_015_010_01b_013_019_011_01a;
        parameter DATA4_MAP                     = 96'h232_239_233_235_230_234_238_23a;
        parameter DATA5_MAP                     = 96'h222_223_220_22b_221_22a_225_229;
        parameter DATA6_MAP                     = 96'h20a_205_202_209_203_208_204_20b;
        parameter DATA7_MAP                     = 96'h211_219_215_21b_210_213_212_21a;
        parameter DATA8_MAP                     = 96'h10a_109_100_103_102_108_104_10b;
        parameter LOC_DX_BYTELANE_MAP           = 72'h10_21_20_22_23_01_03_00_02;
        parameter LOC_AC_BYTELANE_MAP           = 32'h00_13_11_12;

        parameter DQS_GATE_WIDTH                = 9;
        parameter ADDR_WIDTH                    = 17;   //DRAM address bus width
        parameter ROW_WIDTH                     = 17;
        parameter BANK_WIDTH                    = 2;
        parameter ODT_WIDTH                     = 1;
        parameter CK_WIDTH                      = 1;       // # of CK/CK# outputs to memory
        parameter CKE_WIDTH                     = 1;       // # of cke outputs
        parameter CS_WIDTH                      = 1;       // # of unique CS outputs
        parameter DQ_WIDTH                      = 72;
        parameter DQS_WIDTH                     = 9;       // # of DQS (strobe)
        parameter DM_WIDTH                      = 9;
        parameter DCI                           = "DISABLE"; // "ENABLE", "DISABLE"
        parameter AC_WIDTH                      = 3;


//-------------------collect all beats together---------------------
        reg[15:0]                   tmp_hctrl2mem_ck;
        reg[15:0]                   tmp_hctrl2mem_cke;
        reg[15:0]                   tmp_hctrl2mem_cs_n;
        reg[15:0]                   tmp_hctrl2mem_odt;
        reg[15:0]                   tmp_hctrl2mem_bg;
        reg[15:0]                   tmp_hctrl2mem_ba;
        reg[7:0]                    tmp_hctrl2mem_act_n;
        reg[143:0]                  tmp_hctrl2mem_addr;
        reg[575:0]                  tmp_hctrl2mem_dqout;
        reg[7:0]                    tmp_hctrl2mem_parity;
        reg[575:0]                  tmp_hctrl_dqin;

//------------------read data collect all beats together-----------------------
        reg [143:0]                 tmp_hctrl_addr;
        reg [15:0]                  tmp_hctrl_cke;
        reg [15:0]                  tmp_hctrl_odt;
        reg [15:0]                  tmp_hctrl_cs_n;
        reg [15:0]                  tmp_hctrl_bg;
        reg [15:0]                  tmp_hctrl_ba;
        reg [7:0]                   tmp_hctrl_act_n;
        reg [7:0]                   tmp_hctrl_parity;

//---------------------------------------------
        reg[11:0]                   phy_ddr_clk_gate;

//---------------------------------------------
        reg[8:0]                                    rstn_upp_r;
        reg                                         rstn_low_r;
        reg[15:0]                                   hctrl2mem_ck_r;
        reg                                         hctrl2mem_ram_rst_n_r;
        reg[15:0]                                   hctrl2mem_cke_r;
        reg[15:0]                                   hctrl2mem_cs_n_r;
        reg[15:0]                                   hctrl2mem_odt_r;
        reg[15:0]                                   hctrl2mem_bg_r;
        reg[15:0]                                   hctrl2mem_ba_r;
        reg[7:0]                                    hctrl2mem_act_n_r;
        reg[143:0]                                  hctrl2mem_addr_r;
        reg[7:0]                                    hctrl2mem_parity_r;
        reg[575:0]                                  hctrl2mem_dqout_r;
        reg[71:0]                                   hctrl2mem_dmout_r;
        reg[71:0]                                   hctrl2mem_dataout_en_r;
        reg[71:0]                                   hctrl2mem_wdqsout_r;
        reg[71 :0]                                  hctrl2mem_rdqs_en_r;
        reg[8:0]                                    loopback_fifo_rstn_upp_r;
        reg                                         loopback_fifo_rstn_low_r;
        reg[71:0]                                   hctrl2io_pdr_r;
        reg[71:0]                                   hctrl2io_odt_en_r;

localparam FULL_DATA_MAP = {DATA8_MAP,DATA7_MAP,DATA6_MAP,DATA5_MAP,DATA4_MAP,DATA3_MAP,DATA2_MAP,DATA1_MAP,DATA0_MAP};

//apb signals, between hard controller and fabric/IOL
        reg[12:0]                   apb_dly_sel_r  ;
        reg[59:0]                   apb_dly_addr_r ;
        reg[89:0]                   apb_dly_data_r ;
        reg[9:0]                    apb_dly_gate_r ;

//Delay Line calibration, between hard controller and fabric/IOL
         //delay control
        reg[8:0]                    delay_cal_mode_upp_r;
        reg[62:0]                   delay_cal_clk_en_upp_r;
        reg[62:0]                   delay_cal_en_out_upp_r;
        reg                         delay_cal_mode_low_r;
        reg[1:0]                    delay_cal_clk_en_low_r;
        reg[1:0]                    delay_cal_en_out_low_r;

//debug signals, between hard controller and fabric/IOL
        reg[8:0]                    delay_gate_r;
        reg                         loopback_fifo_resp_low_r;
        reg                         loopback_fifo_resp_upp_r;
        reg[8:0]                    wrlvl_mode_r;
        reg[8:0]                    hctrl_vref_rank_sel_upp_r;
        reg[17:0]                   loopback_fifo_dataout_upp_r;
        reg                         loopback_fifo_dataout_low_r;
        reg[41:0]                   vref_value_low_r;
        reg[125:0]                  vref_value_upp_r;
//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
        reg[71:0]                   wrlvl_rdqout_r;
        reg[31:0]                   dqs_rd_gate_status_p0_r;
        reg[31:0]                   dqs_rd_gate_status_p1_r;
        reg[31:0]                   dqs_rd_gate_status_p2_r;
        reg[12*8-1:0]               phy_rd_dm_r;
        reg[12*64-1:0]              phy_rdata_r;
        reg[11:0]                   phy_rd_en_r;
        reg[6*8-1:0]                phy_rdata_se_r;
        reg[12*8-1:0]               phy_rd_dqsn_r;
        reg[12*8-1:0]               phy_rd_dqsp_r;
        reg[95:0]                   dqs_iogate_rdata_r;
        reg[83:0]                   remap_delay_cal_en_in_r;
        reg[83:0]                   remap_delay_cal_in_r;
        reg[7:0]                    dqs_rd_gate_status0_r;
        reg[7:0]                    dqs_rd_gate_status1_r;
        reg[7:0]                    dqs_rd_gate_status2_r;
        reg[23:0]                   remap_dqs_cnt_r;
        reg[11:0]                   remap_delay_dti_r;

always@( posedge sys_clk or negedge sys_rstn )
begin
    if(!sys_rstn) begin
        rstn_upp_r                      <= 9'd0;
        rstn_low_r                      <= 1'b0;
        hctrl2mem_ck_r                  <= 16'd0;
        hctrl2mem_ram_rst_n_r           <= 1'b0;
        hctrl2mem_cke_r                 <= 16'd0;
        hctrl2mem_cs_n_r                <= 16'hffff;
        hctrl2mem_odt_r                 <= 16'd0;
        hctrl2mem_bg_r                  <= 16'd0;
        hctrl2mem_ba_r                  <= 16'd0;
        hctrl2mem_act_n_r               <= 8'hff;
        hctrl2mem_addr_r                <= 144'd0;
        hctrl2mem_parity_r              <= 8'd0;
        hctrl2mem_dqout_r               <= 576'd0;
        hctrl2mem_dmout_r               <= 72'd0;
        hctrl2mem_dataout_en_r          <= 72'd0;
        hctrl2mem_wdqsout_r             <= 72'd0;
        hctrl2mem_rdqs_en_r             <= 72'd0;
        loopback_fifo_rstn_upp_r        <= 9'd0;
        loopback_fifo_rstn_low_r        <= 1'b0;
        hctrl2io_pdr_r                  <= 72'd0;
        hctrl2io_odt_en_r               <= 72'd0;
    end else begin
        rstn_upp_r                      <= rstn_upp                     ;
        rstn_low_r                      <= rstn_low                     ;
        hctrl2mem_ck_r                  <= hctrl2mem_ck                 ;
        hctrl2mem_ram_rst_n_r           <= hctrl2mem_ram_rst_n          ;
        hctrl2mem_cke_r                 <= hctrl2mem_cke                ;
        hctrl2mem_cs_n_r                <= hctrl2mem_cs_n               ;
        hctrl2mem_odt_r                 <= hctrl2mem_odt                ;
        hctrl2mem_bg_r                  <= hctrl2mem_bg                 ;
        hctrl2mem_ba_r                  <= hctrl2mem_ba                 ;
        hctrl2mem_act_n_r               <= hctrl2mem_act_n              ;
        hctrl2mem_addr_r                <= hctrl2mem_addr               ;
        hctrl2mem_parity_r              <= hctrl2mem_parity             ;
        hctrl2mem_dqout_r               <= hctrl2mem_dqout              ;
        hctrl2mem_dmout_r               <= hctrl2mem_dmout              ;
        hctrl2mem_dataout_en_r          <= hctrl2mem_dataout_en         ;
        hctrl2mem_wdqsout_r             <= hctrl2mem_wdqsout            ;
        hctrl2mem_rdqs_en_r             <= hctrl2mem_rdqs_en            ;
        loopback_fifo_rstn_upp_r        <= loopback_fifo_rstn_upp       ;
        loopback_fifo_rstn_low_r        <= loopback_fifo_rstn_low       ;
        hctrl2io_pdr_r                  <= hctrl2io_pdr                 ;
        hctrl2io_odt_en_r               <= hctrl2io_odt_en              ;
    end
end

always @ (posedge sys_clk or negedge sys_rstn)
begin
    if ( !sys_rstn ) begin
        apb_dly_sel_r          <= 13'd0;
        apb_dly_addr_r         <= 60'd0;
        apb_dly_data_r         <= 90'd0;
        apb_dly_gate_r         <= 10'd0;

        delay_cal_mode_upp_r   <= 9'd0 ;
        delay_cal_clk_en_upp_r <= 63'd0;
        delay_cal_en_out_upp_r <= 63'd0;
        delay_cal_mode_low_r   <= 1'd0 ;
        delay_cal_clk_en_low_r <= 2'd0 ;
        delay_cal_en_out_low_r <= 2'd0 ;

        delay_gate_r           <= 10'd0;
        loopback_fifo_resp_low_r    <= 1'd0;
        loopback_fifo_resp_upp_r    <= 1'd0;
        wrlvl_mode_r                <= 9'd0;
        hctrl_vref_rank_sel_upp_r   <= 9'd0;
        loopback_fifo_dataout_upp_r <= 18'd0;
        loopback_fifo_dataout_low_r <= 1'd0;
        vref_value_low_r            <= 42'd0;
        vref_value_upp_r            <= 126'd0;

        wrlvl_rdqout_r          <= 72 'd0;
        dqs_rd_gate_status_p0_r <= 32 'd0;
        dqs_rd_gate_status_p1_r <= 32 'd0;
        dqs_rd_gate_status_p2_r <= 32 'd0;
        phy_rd_dm_r             <= 96 'd0;
        phy_rdata_r             <= 768'd0;
        phy_rd_en_r             <= 12 'd0;
        phy_rdata_se_r          <= 48 'd0;
        phy_rd_dqsn_r           <= 96 'd0;
        phy_rd_dqsp_r           <= 96 'd0;
        dqs_iogate_rdata_r      <= 96 'd0;
        remap_delay_cal_en_in_r <= 84 'd0;
        remap_delay_cal_in_r    <= 84 'd0;
        dqs_rd_gate_status0_r   <= 8  'd0;
        dqs_rd_gate_status1_r   <= 8  'd0;
        dqs_rd_gate_status2_r   <= 8  'd0;
        remap_dqs_cnt_r         <= 24 'd0;
        remap_delay_dti_r       <= 12 'd0;
    end else begin
        apb_dly_sel_r               <= apb_dly_sel;
        apb_dly_addr_r              <= apb_dly_addr;
        apb_dly_data_r              <= apb_dly_data;
        apb_dly_gate_r              <= apb_dly_gate;

        delay_cal_mode_upp_r        <= delay_cal_mode_upp;
        delay_cal_clk_en_upp_r      <= delay_cal_clk_en_upp;
        delay_cal_en_out_upp_r      <= delay_cal_en_out_upp;
        delay_cal_mode_low_r        <= delay_cal_mode_low;
        delay_cal_clk_en_low_r      <= delay_cal_clk_en_low;
        delay_cal_en_out_low_r      <= delay_cal_en_out_low;

        delay_gate_r                <= delay_gate;
        loopback_fifo_resp_low_r    <= loopback_fifo_resp_low   ;
        loopback_fifo_resp_upp_r    <= loopback_fifo_resp_upp   ;
        wrlvl_mode_r                <= wrlvl_mode               ;
        hctrl_vref_rank_sel_upp_r   <= hctrl_vref_rank_sel_upp  ;
        loopback_fifo_dataout_upp_r <= loopback_fifo_dataout_upp;
        loopback_fifo_dataout_low_r <= loopback_fifo_dataout_low;
        vref_value_low_r            <= vref_value_low           ;
        vref_value_upp_r            <= vref_value_upp           ;


        wrlvl_rdqout_r              <= wrlvl_rdqout         ;
        dqs_rd_gate_status_p0_r     <= dqs_rd_gate_status_p0;
        dqs_rd_gate_status_p1_r     <= dqs_rd_gate_status_p1;
        dqs_rd_gate_status_p2_r     <= dqs_rd_gate_status_p2;
        phy_rd_dm_r                 <= phy_rd_dm            ;
        phy_rdata_r                 <= phy_rdata            ;
        phy_rd_en_r                 <= phy_rd_en            ;
        phy_rdata_se_r              <= phy_rdata_se         ;
        phy_rd_dqsn_r               <= phy_rd_dqsn          ;
        phy_rd_dqsp_r               <= phy_rd_dqsp          ;
        dqs_iogate_rdata_r          <= dqs_iogate_rdata     ;
        remap_delay_cal_en_in_r     <= remap_delay_cal_en_in;
        remap_delay_cal_in_r        <= remap_delay_cal_in   ;
        dqs_rd_gate_status0_r       <= dqs_rd_gate_status0  ;
        dqs_rd_gate_status1_r       <= dqs_rd_gate_status1  ;
        dqs_rd_gate_status2_r       <= dqs_rd_gate_status2  ;
        remap_dqs_cnt_r             <= remap_dqs_cnt        ;
        remap_delay_dti_r           <= remap_delay_dti      ;
    end
end

//zcal control, between hard controller and fabric/IOL

assign zqcal_clrcfg_o = zqcal_clrcfg;
assign zqcal_start_o = zqcal_start;
assign zqcal_update_en_o = zqcal_update_en;
assign zqcal_vt_update_en_in_o = zqcal_vt_update_en_in;
assign zqcal_vt_update_en_out = zqcal_vt_update_en_out_i;
assign zqcal_done[0] = (BYTE_LANE_0 != 0) ?  zqcal_done_i[0] : 1'b1;
assign zqcal_done[1] = (BYTE_LANE_1 != 0) ?  zqcal_done_i[1] : 1'b1;
assign zqcal_done[2] = (BYTE_LANE_2 != 0) ?  zqcal_done_i[2] : 1'b1;


//DCC control, between hard controller and fabric/IOL
assign dcc_clrcfg_o = dcc_clrcfg;
assign dcc_start_o = dcc_start;
assign dcc_update_en_o = dcc_update_en;
assign dcc_vt_update_en_in_o = dcc_vt_update_en_in;
assign dcc_vt_update_en_out = dcc_vt_update_en_out_i;
assign dcc_done = dcc_done_i;


assign o_dfi_io_pd = apb_dfi_io_pd;

assign dqs_pupd_en_o = {12{dqs_pupd_en_i}};

assign phy_ddr_clk_gate0 = phy_ddr_clk_gate[3:0];
assign phy_ddr_clk_gate1 = phy_ddr_clk_gate[7:4];
assign phy_ddr_clk_gate2 = phy_ddr_clk_gate[11:8];

//delay control
assign delay_cal_en_in_low[0] = remap_delay_cal_en_in_r[(28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]) + 2];
assign delay_cal_en_in_low[1] = remap_delay_cal_en_in_r[ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]];
assign delay_cal_in_low[0]    = remap_delay_cal_in_r   [ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0] + 2];
assign delay_cal_in_low[1]    = remap_delay_cal_in_r   [ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]];

wire[23:0] remap_phy_status = {dqs_rd_gate_status2_r,dqs_rd_gate_status1_r,dqs_rd_gate_status0_r};

//assign phy_status = {dqs_rd_gate_status2[1:0],dqs_rd_gate_status1,dqs_rd_gate_status0};
reg[11:0] remap_dqs_rstn;
assign dqs_rstn0 = remap_dqs_rstn[3:0];
assign dqs_rstn1 = remap_dqs_rstn[7:4];
assign dqs_rstn2 = remap_dqs_rstn[11:8];
assign remap_loopback_fifo_resp_upp = {12{loopback_fifo_resp_upp_r}};
assign remap_loopback_fifo_resp_low = {12{loopback_fifo_resp_low_r}};
assign remap_loopback_clknum_sel    = {12{loopback_clknum_sel}};
assign remap_loopback_clk_sel       = {12{loopback_clk_sel}};
assign remap_loopback_mode          = {12{loopback_mode}};
assign remap_loopback_en            = {12{loopback_en_in}};



reg[1151:0] remap_wr_data;
assign phy_wdata = { remap_wr_data[140*8 +: 16],remap_wr_data[132*8 +: 48],remap_wr_data[128*8 +: 16],remap_wr_data[120*8 +: 48]
                    ,remap_wr_data[116*8 +: 16],remap_wr_data[108*8 +: 48],remap_wr_data[104*8 +: 16],remap_wr_data[96*8  +: 48]
                    ,remap_wr_data[92*8  +: 16],remap_wr_data[84*8  +: 48],remap_wr_data[80*8  +: 16],remap_wr_data[72*8  +: 48]
                    ,remap_wr_data[68*8  +: 16],remap_wr_data[60*8  +: 48],remap_wr_data[56*8  +: 16],remap_wr_data[48*8  +: 48]
                    ,remap_wr_data[44*8  +: 16],remap_wr_data[36*8  +: 48],remap_wr_data[32*8  +: 16],remap_wr_data[24*8  +: 48]
                    ,remap_wr_data[20*8  +: 16],remap_wr_data[12*8  +: 48],remap_wr_data[8*8   +: 16],remap_wr_data[0     +: 48]};


assign dqs_rd_en_shadow = {remap_wr_data[143*8 +: 8],remap_wr_data[131*8 +: 8],remap_wr_data[119*8 +: 8],remap_wr_data[107*8 +: 8]
                          ,remap_wr_data[ 95*8 +: 8],remap_wr_data[ 83*8 +: 8],remap_wr_data[ 71*8 +: 8],remap_wr_data[ 59*8 +: 8]
                          ,remap_wr_data[ 47*8 +: 8],remap_wr_data[ 35*8 +: 8],remap_wr_data[ 23*8 +: 8],remap_wr_data[ 11*8 +: 8]};

//assign dqs_rd_gate_en = {remap_wr_data[143*8 +: 8],remap_wr_data[131*8 +: 8],remap_wr_data[119*8 +: 8],remap_wr_data[107*8 +: 8]
//                      ,remap_wr_data[95*8 +: 8],remap_wr_data[83*8 +: 8],remap_wr_data[71*8 +: 8],remap_wr_data[59*8 +: 8]
//                      ,remap_wr_data[47*8 +: 8],remap_wr_data[35*8 +: 8],remap_wr_data[23*8 +: 8],remap_wr_data[11*8 +: 8]};

assign phy_wr_dm =  {remap_wr_data[142*8 +: 8],remap_wr_data[130*8 +: 8],remap_wr_data[118*8 +: 8],remap_wr_data[106*8 +: 8]
                    ,remap_wr_data[ 94*8 +: 8],remap_wr_data[ 82*8 +: 8],remap_wr_data[ 70*8 +: 8],remap_wr_data[ 58*8 +: 8]
                    ,remap_wr_data[ 46*8 +: 8],remap_wr_data[ 34*8 +: 8],remap_wr_data[ 22*8 +: 8],remap_wr_data[ 10*8 +: 8]};

assign phy_wr_dqsn = {remap_wr_data[139*8 +: 8],remap_wr_data[127*8 +: 8],remap_wr_data[115*8 +: 8],remap_wr_data[103*8 +: 8]
                     ,remap_wr_data[ 91*8 +: 8],remap_wr_data[ 79*8 +: 8],remap_wr_data[ 67*8 +: 8],remap_wr_data[ 55*8 +: 8]
                     ,remap_wr_data[ 43*8 +: 8],remap_wr_data[ 31*8 +: 8],remap_wr_data[ 19*8 +: 8],remap_wr_data[  7*8 +: 8]};

assign phy_wr_dqsp= {remap_wr_data[138*8 +: 8],remap_wr_data[126*8 +: 8],remap_wr_data[114*8 +: 8],remap_wr_data[102*8 +: 8]
                    ,remap_wr_data[ 90*8 +: 8],remap_wr_data[ 78*8 +: 8],remap_wr_data[ 66*8 +: 8],remap_wr_data[ 54*8 +: 8]
                    ,remap_wr_data[ 42*8 +: 8],remap_wr_data[ 30*8 +: 8],remap_wr_data[ 18*8 +: 8],remap_wr_data[  6*8 +: 8] };

wire[1199:0] remap_rd_data = {phy_rdata_se_r    [ 2*16 +: 16]
                             ,dqs_iogate_rdata_r[11* 8 +:  8],phy_rd_dm_r[11*8 +: 8],phy_rdata_r[94*8+:16],phy_rd_dqsn_r[11*8+:8],phy_rd_dqsp_r[11*8+:8],phy_rdata_r[88*8+:48]
                             ,dqs_iogate_rdata_r[10* 8 +:  8],phy_rd_dm_r[10*8 +: 8],phy_rdata_r[86*8+:16],phy_rd_dqsn_r[10*8+:8],phy_rd_dqsp_r[10*8+:8],phy_rdata_r[80*8+:48]
                             ,dqs_iogate_rdata_r[ 9* 8 +:  8],phy_rd_dm_r[ 9*8 +: 8],phy_rdata_r[78*8+:16],phy_rd_dqsn_r[9*8+:8] ,phy_rd_dqsp_r[9*8+:8] ,phy_rdata_r[72*8+:48]
                             ,dqs_iogate_rdata_r[ 8* 8 +:  8],phy_rd_dm_r[ 8*8 +: 8],phy_rdata_r[70*8+:16],phy_rd_dqsn_r[8*8+:8] ,phy_rd_dqsp_r[8*8+:8] ,phy_rdata_r[64*8+:48]
                             ,phy_rdata_se_r    [ 1*16 +: 16]
                             ,dqs_iogate_rdata_r[ 7* 8 +:  8],phy_rd_dm_r[ 7*8 +: 8],phy_rdata_r[62*8+:16],phy_rd_dqsn_r[7*8+:8] ,phy_rd_dqsp_r[7*8+:8] ,phy_rdata_r[56*8+:48]
                             ,dqs_iogate_rdata_r[ 6* 8 +:  8],phy_rd_dm_r[ 6*8 +: 8],phy_rdata_r[54*8+:16],phy_rd_dqsn_r[6*8+:8] ,phy_rd_dqsp_r[6*8+:8] ,phy_rdata_r[48*8+:48]
                             ,dqs_iogate_rdata_r[ 5* 8 +:  8],phy_rd_dm_r[ 5*8 +: 8],phy_rdata_r[46*8+:16],phy_rd_dqsn_r[5*8+:8] ,phy_rd_dqsp_r[5*8+:8] ,phy_rdata_r[40*8+:48]
                             ,dqs_iogate_rdata_r[ 4* 8 +:  8],phy_rd_dm_r[ 4*8 +: 8],phy_rdata_r[38*8+:16],phy_rd_dqsn_r[4*8+:8] ,phy_rd_dqsp_r[4*8+:8] ,phy_rdata_r[32*8+:48]
                             ,phy_rdata_se_r    [    0 +: 16]
                             ,dqs_iogate_rdata_r[ 3* 8 +:  8],phy_rd_dm_r[ 3*8 +: 8],phy_rdata_r[30*8+:16],phy_rd_dqsn_r[3*8+:8] ,phy_rd_dqsp_r[3*8+:8] ,phy_rdata_r[24*8+:48]
                             ,dqs_iogate_rdata_r[ 2* 8 +:  8],phy_rd_dm_r[ 2*8 +: 8],phy_rdata_r[22*8+:16],phy_rd_dqsn_r[2*8+:8] ,phy_rd_dqsp_r[2*8+:8] ,phy_rdata_r[16*8+:48]
                             ,dqs_iogate_rdata_r[ 1* 8 +:  8],phy_rd_dm_r[ 1*8 +: 8],phy_rdata_r[14*8+:16],phy_rd_dqsn_r[1*8+:8] ,phy_rd_dqsp_r[1*8+:8] ,phy_rdata_r[8*8 +:48]
                             ,dqs_iogate_rdata_r[    0 +:  8],phy_rd_dm_r[   0 +: 8],phy_rdata_r[6*8 +:16],phy_rd_dqsn_r[0  +:8] ,phy_rd_dqsp_r[0  +:8] ,phy_rdata_r[0  +:48]};


reg[1199:0] remap_rd_data_r;
reg[  95:0] remap_dqs_gate_in_r;

always @ ( * )
begin
    if( !sys_rstn ) begin
        remap_rd_data_r <= 1200'd0;
        remap_dqs_gate_in_r    <= 96'd0;
    end else begin
        remap_rd_data_r <= remap_rd_data;
        remap_dqs_gate_in_r <= {dqs_rd_gate_status_p2_r, dqs_rd_gate_status_p1_r,dqs_rd_gate_status_p0_r};
    end

end

reg[575:0]  hctrl_dqin_pre;

//--------------collect all beats together---------------------

integer b_i,a_i,c_i;
always@(*)
begin: collect_block

        hctrl_dqin              = 576'd0;
        tmp_hctrl2mem_dqout     = 576'd0;
        hctrl_addr              = 144'd0;
        hctrl_bg                = 16 'd0;
        hctrl_ba                = 16 'd0;
        hctrl_act_n             = 8  'd0;
        hctrl_cs_n              = 16 'd0;
        hctrl_odt               = 16 'd0;
        hctrl_cke               = 16 'd0;
        hctrl_parity            =  8  'd0;

        for(b_i = 0; b_i < 8; b_i = b_i+1)
        begin
                //AC bus
                for(a_i=0; a_i<18; a_i=a_i+1) tmp_hctrl2mem_addr        [a_i*8+b_i] = hctrl2mem_addr_r    [b_i*18 + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_bg          [a_i*8+b_i] = hctrl2mem_bg_r      [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_ba          [a_i*8+b_i] = hctrl2mem_ba_r      [b_i*2  + a_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) tmp_hctrl2mem_act_n       [a_i*8+b_i] = hctrl2mem_act_n_r   [b_i*1  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_cs_n        [a_i*8+b_i] = hctrl2mem_cs_n_r    [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_odt         [a_i*8+b_i] = hctrl2mem_odt_r     [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_cke         [a_i*8+b_i] = hctrl2mem_cke_r     [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_ck          [a_i*8+b_i] = hctrl2mem_ck_r      [a_i*8  + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) tmp_hctrl2mem_parity      [a_i*8+b_i] = hctrl2mem_parity_r  [b_i*1  + a_i];
/*
                //--------------loopback---------------------------
                for(a_i=0; a_i<18; a_i=a_i+1) hctrl_addr        [b_i*18 +a_i] = tmp_hctrl_addr   [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_bg          [b_i*2  +a_i] = tmp_hctrl_bg     [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_ba          [b_i*2  +a_i] = tmp_hctrl_ba     [a_i*8 + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) hctrl_act_n       [b_i*1  +a_i] = tmp_hctrl_act_n  [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_cs_n        [b_i*2  +a_i] = tmp_hctrl_cs_n   [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_odt         [b_i*2  +a_i] = tmp_hctrl_odt    [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_cke         [b_i*2  +a_i] = tmp_hctrl_cke    [a_i*8 + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) hctrl_parity      [b_i*1  +a_i] = tmp_hctrl_parity [a_i*8 + b_i];
*/
        end

        for(b_i = 0; b_i < 9; b_i = b_i+1)
//        for(b_i = 0; b_i<DQS_WIDTH; b_i=b_i+1)
        begin
            for(a_i = 0; a_i < 8; a_i = a_i+1) begin
                for(c_i=0; c_i<8; c_i = c_i+1)    tmp_hctrl2mem_dqout [a_i+8*(c_i+b_i*8)] = hctrl2mem_dqout_r [c_i+8*(a_i+b_i*8)];
                for(c_i=0; c_i<8; c_i = c_i+1)    hctrl_dqin          [c_i+8*(a_i+b_i*8)] = tmp_hctrl_dqin    [a_i+8*(c_i+b_i*8)];
            end
        end
end


integer n;
always @(*)
begin
    remap_wr_data    = 1152'd0;
    phy_wrdata_se    = 48'd0;
    wrlvl_qin        = 72'd0;

    phy_dqs_cnt      = 18'd0;
    tmp_hctrl_dqin   = 576'd0;
    hctrl_dmin       = 72'd0;

//-----------------------ddr_reset--------------------------------------------------------------------
 `ifdef USE_RESET
    if(RESET_MAP[3:0] < 4'hc) begin
        remap_wr_data[(384*RESET_MAP[11:8]+96*RESET_MAP[7:4]+8*RESET_MAP[3:0]) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end else if((RESET_MAP[3:0] == 4'hc) && (RESET_MAP[7:4] == 4'h0)) begin
        phy_wrdata_se[(16*RESET_MAP[11:8]) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end else begin
        phy_wrdata_se[(16*RESET_MAP[11:8] + 8) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end
 `endif
//------------------------ddr_ck-----------------------------------------------------------------------
    for(n = 0; n < CK_WIDTH; n = n + 1) begin
        remap_wr_data[(384*CK_MAP[(12*(2*n+1)+8) +: 3]+96*CK_MAP[(12*(2*n+1)+4) +: 2]+8*CK_MAP[12*(2*n+1) +: 4]) +: 8] = ~tmp_hctrl2mem_ck[8*n +: 8];
        remap_wr_data[(384*CK_MAP[(12* 2*n   +8) +: 3]+96*CK_MAP[(12* 2*n   +4) +: 2]+8*CK_MAP[12* 2*n    +: 4]) +: 8] =  tmp_hctrl2mem_ck[8*n +: 8];
    end


    for(n = 0; n < CKE_WIDTH; n = n + 1) begin
        if(CKE_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*CKE_MAP[(12*n+8) +: 3]+96*CKE_MAP[(12*n+4) +: 2]+8*CKE_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cke[8*0 +: 8];
        `else
            remap_wr_data[(384*CKE_MAP[(12*n+8) +: 3]+96*CKE_MAP[(12*n+4) +: 2]+8*CKE_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cke[8*n +: 8];
        `endif
        end else if((CKE_MAP[12*n +: 4] == 4'hc) && (CKE_MAP[(12*n+4) +: 2] == 4'h0))  begin
            phy_wrdata_se[(16*CKE_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_cke[8*0 +: 8];
        end else begin
            phy_wrdata_se[(16*CKE_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_cke[8*n +: 8];
        end
    end
 `ifdef USE_CS
    for(n = 0; n < CS_WIDTH; n = n + 1) begin
        if(CS_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*CS_MAP[(12*n+8) +: 3]+96*CS_MAP[(12*n+4) +: 2]+8*CS_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cs_n[8*0 +: 8];
        `else
            remap_wr_data[(384*CS_MAP[(12*n+8) +: 3]+96*CS_MAP[(12*n+4) +: 2]+8*CS_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        `endif
        end else if((CS_MAP[12*n +: 4] == 4'hc) && (CS_MAP[(12*n+4) +: 2] == 4'h0)) begin
            phy_wrdata_se[(16*CS_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        end else begin
            phy_wrdata_se[(16*CS_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        end
    end
 `endif
    for(n = 0; n < ODT_WIDTH; n = n + 1) begin
        if(ODT_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*ODT_MAP[(12*n+8) +: 3]+96*ODT_MAP[(12*n+4) +: 2]+8*ODT_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_odt[8*0 +: 8];
        `else
            remap_wr_data[(384*ODT_MAP[(12*n+8) +: 3]+96*ODT_MAP[(12*n+4) +: 2]+8*ODT_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        `endif
        end else if((ODT_MAP[12*n +: 4] == 4'hc) && (ODT_MAP[(12*n+4) +: 2] == 4'h0)) begin
            phy_wrdata_se[(16*ODT_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        end else begin
            phy_wrdata_se[(16*ODT_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        end
    end

//------------------------------------address----------------------------------------------

    for(n = 0; n < ADDR_WIDTH; n = n + 1) begin
        if(ADDR_MAP[12*n +: 4] < 4'hc) begin
             remap_wr_data[(384*ADDR_MAP[(12*n+8) +: 3]+96*ADDR_MAP[(12*n+4) +: 2]+8*ADDR_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end else if((ADDR_MAP[12*n +: 4] == 4'hc) && (ADDR_MAP[(12*n+4) +: 2] == 4'h0)) begin
             phy_wrdata_se[(16*ADDR_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end else begin
             phy_wrdata_se[(16*ADDR_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end
    end

`ifdef DRAM_DDR4

    //-------------------------------------bank address--------------------------------------
    
        for(n = 0; n < BANK_WIDTH; n = n + 1) begin
            if(BANK_MAP[12*n +: 4] < 4'hc) begin
                remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end else begin
                phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end
        end
    
    
    //----------------------bank group---------------------------------------------------------
    
        for(n = 0; n < BG_WIDTH; n = n + 1) begin
            if(BANK_GROUP_MAP[12*n +: 4] < 4'hc) begin
                remap_wr_data[(384*BANK_GROUP_MAP[(12*n+8) +: 3]+96*BANK_GROUP_MAP[(12*n+4) +: 2]+8*BANK_GROUP_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end else if((BANK_GROUP_MAP[12*n +: 4] == 4'hc) && (BANK_GROUP_MAP[(12*n+4) +: 2] == 4'h0)) begin
                phy_wrdata_se[(16*BANK_GROUP_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end else begin
                phy_wrdata_se[(16*BANK_GROUP_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end
        end
    

    
    //----------------------------------parity---------------------------------------------
     `ifdef USE_PAR_ALERT
            if(PARITY_MAP[3:0] < 4'hc) begin
                 remap_wr_data[(384*PARITY_MAP[11:8]+96*PARITY_MAP[7:4]+8*PARITY_MAP[3:0]) +: 8] = tmp_hctrl2mem_parity;
            end else if((PARITY_MAP[3:0] == 4'hc) && (PARITY_MAP[7:4] == 4'h0)) begin
                 phy_wrdata_se[(16*PARITY_MAP[11:8]) +: 8] = tmp_hctrl2mem_parity;
            end else begin
                 phy_wrdata_se[(16*PARITY_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_parity;
            end
    
    //----------------------------alert----------------------------------------
    
            if(ALERT_MAP[3:0] < 4'hc) begin
                 hctrl_alert_n = remap_rd_data_r[(400*ALERT_MAP[11:8]+96*ALERT_MAP[7:4]+8*ALERT_MAP[3:0]) +: 8];
            end else if((ALERT_MAP[3:0] == 4'hc) && (ALERT_MAP[7:4] == 4'h0)) begin
                 hctrl_alert_n = remap_rd_data_r[(50*ALERT_MAP[11:8] + 48)*8 +: 8];
            end else begin
                 hctrl_alert_n = remap_rd_data_r[(50*ALERT_MAP[11:8] + 49)*8 +: 8];
            end
     `else
           hctrl_alert_n = 8'hff;
     `endif
    //------------------------------------ACT_N-----------------------------------------------
    
            if(ACT_MAP[3:0] < 4'hc) begin
                 remap_wr_data[(384*ACT_MAP[11:8]+96*ACT_MAP[7:4]+8*ACT_MAP[3:0]) +: 8] = tmp_hctrl2mem_act_n;
            end else if((ACT_MAP[3:0] == 4'hc) && (ACT_MAP[7:4] == 4'h0)) begin
                 phy_wrdata_se[(16*ACT_MAP[11:8]) +: 8] = tmp_hctrl2mem_act_n;
            end else begin
                 phy_wrdata_se[(16*ACT_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_act_n;
            end
//-------------------------------------------ddr_dm------------------------------------------------------
 `ifdef USE_DM
    for(n = 0; n < DM_WIDTH; n = n + 1) begin
         
    `ifdef USE_PING_PONG_PHY
        if(n < (DM_WIDTH/2)) begin
            remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
            hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8];
        end else begin
            remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*(4+n-(DM_WIDTH/2)) +: 8];
            hctrl_dmin[(4+n-(DM_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8];
        end
    `else
        hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8]; 
        remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
    `endif
    end
 `endif 

`elsif DRAM_DDR3
    //-------------------------------------ras_n--------------------------------------
        if(RAS_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*RAS_MAP[11:8]+96*RAS_MAP[7:4]+8*RAS_MAP[3:0]) +: 8] = tmp_hctrl2mem_act_n;
        end else if((RAS_MAP[3:0] == 4'hc) && (RAS_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*RAS_MAP[11:8]) +: 8] = tmp_hctrl2mem_act_n;
        end else begin
             phy_wrdata_se[(16*RAS_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_act_n;
        end

    //-------------------------------------cas_n--------------------------------------

        if(CAS_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*CAS_MAP[11:8]+96*CAS_MAP[7:4]+8*CAS_MAP[3:0]) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end else if((CAS_MAP[3:0] == 4'hc) && (CAS_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*CAS_MAP[11:8]) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end else begin
             phy_wrdata_se[(16*CAS_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end
    //-------------------------------------we_n--------------------------------------
        if(WE_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*WE_MAP[11:8]+96*WE_MAP[7:4]+8*WE_MAP[3:0]) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end else if((WE_MAP[3:0] == 4'hc) && (WE_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*WE_MAP[11:8]) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end else begin
             phy_wrdata_se[(16*WE_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end

    //-------------------------------------bank address--------------------------------------
    
        for(n = 0; n < BANK_WIDTH; n = n + 1) 
        begin
            if (n < 2) begin
                if(BANK_MAP[12*n +: 4] < 4'hc) begin
                    remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];        
                end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                    phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
                end else begin
                    phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
                end
            end else begin
                if(BANK_MAP[12*n +: 4] < 4'hc) begin
                     remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];       
                end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                     phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];
                end else begin
                     phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];
                end
            end
        end
    //-------------------------------------------ddr_dm------------------------------------------------------
        `ifdef USE_DM
            for(n = 0; n < DM_WIDTH; n = n + 1) begin
                `ifdef USE_PING_PONG_PHY
                    if(n < (DM_WIDTH/2)) begin
                        remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
                        hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8];
                    end else begin
                        remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*(4+n-(DM_WIDTH/2)) +: 8];
                        hctrl_dmin[(4+n-(DM_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8];
                    end
                `else
                    hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8]; 
                    remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
                `endif
            end
        `endif    
    
`endif    



`ifdef USE_DQS_GATE

    for (n = 0; n < DQS_GATE_WIDTH; n = n + 1) begin
        `ifdef USE_PING_PONG_PHY
             if(n < (DQS_GATE_WIDTH/2))
                 remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
             else
                 remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*(4+n-(DQS_GATE_WIDTH/2)) +: 8];
        `else
             remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
        `endif
    end

`endif
//-----------------------------------------------------------------------------------------------
    for(n = 0; n < DQ_WIDTH; n = n + 1) begin
    `ifdef USE_PING_PONG_PHY
        if(n < (DQ_WIDTH/2)) begin
            remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*n +: 8];
            tmp_hctrl_dqin[n*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
            wrlvl_qin[n] = wrlvl_rdqout_r[n];
        end else begin
            remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*(4*8+n-(DQ_WIDTH/2)) +: 8];
            tmp_hctrl_dqin[(4*8+n-(DQ_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
            wrlvl_qin[4*8+n-(DQ_WIDTH/2)] = wrlvl_rdqout_r[n];
        end
    `else
         remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*n +: 8];
         tmp_hctrl_dqin[n*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
         wrlvl_qin[n] = wrlvl_rdqout_r[n];
    `endif
    end

//----------------------------------------------ddr_dqs----------------------------------------------------------------
    for(n = 0; n < DQS_WIDTH; n = n + 1) begin
    `ifdef USE_PING_PONG_PHY
        if (n < (DQS_WIDTH/2))  begin
            remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
            remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*n +: 8];
            phy_dqs_cnt[2*n +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
        end else begin
            remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_dqs_cnt[2*(4+n-(DQS_WIDTH/2)) +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
        end
    `else
         remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
         remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*n +: 8];
         phy_dqs_cnt[2*n +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
    `endif
    end

end

wire[55:0] vref_value_low_r_4ac = {vref_value_low_r[13:0], vref_value_low_r};
reg [ 3:0] delay_dti_low_4ac;
assign delay_dti_low = delay_dti_low_4ac[2:0];

integer x;
always @(*)
begin

    phy_wr_en                       = 96'd0;
    hctrl_datain_en_upp             = 18'd0;
    dqs_gate_in                     = 72'd0;
    wrlvl_wrqout                    = 96'd0;
    remap_delay_cal_mode            = 12'd0;
    remap_delay_cal_clk_en          = 84'd0;
    remap_delay_cal_en_out          = 84'd0;
    phy_status                      = 18'd0;
    remap_loopback_fifo_rstn_upp    = 12'hfff;
    delay_cal_in_upp                = 63'd0;
    delay_cal_en_in_upp             = 63'd0;
    remap_loopback_fifo_rstn_low    = 12'hfff;
    remap_dqs_rstn                  = 12'hfff;
    loopback_fifo_datain_low        = 12'd0;
    loopback_fifo_datain_upp        = 12'd0;
    remap_vref_ctrl_value           = 168'd0;
    remap_delay_gate                = 12'd0;
    delay_dti_upp                   = 9'd0;
    remap_delay_osc_wdq_ac_sel      = 24'd0;
    remap_wrlvl_mode                = 12'd0;
    remap_phy_rd_dqs_pdr            = 96'hffff_ffff_ffff_ffff_ffff_ffff;
    remap_phy_rd_dqs_te             = 96'hffff_ffff_ffff_ffff_ffff_ffff;
    remap_vref_rank_sel             = 12'd0;
    remap_apb_dly_sel               = 12'd0;
    remap_apb_dly_addr              = 72'd0;
    remap_apb_dly_data              = 108'd0;
    remap_apb_dly_gate              = 12'd0;
    mc0_phy_clk_wren_gt             = 12'hfff;
    mc0_phy_clk_rden_gt             = 12'd0;
    phy_ddr_clk_gate                = 12'hfff;
    phy_rstn_low                    = 12'hfff;
    phy_rstn_upp                    = 12'hfff;
    delay_dti_low_4ac               = 4'd0;
    delay_dti_upp                   = 9'd0;
    dqs_rd_gate_en                  = 96'd0;


    for(n = 0; n < DQS_WIDTH; n= n+1 ) begin
         remap_dqs_rstn            [ 4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]      = sys_rstn;
         remap_delay_osc_wdq_ac_sel[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2]= delay_osc_wdata_sel;
    end

    for(x = 0; x < AC_WIDTH; x = x + 1) begin
        phy_wr_en                   [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        wrlvl_wrqout                [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_delay_cal_mode        [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = delay_cal_mode_low_r;
        remap_delay_cal_clk_en      [(28*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  7*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  7] = {4'd0,delay_cal_clk_en_low_r[0],1'b0,delay_cal_clk_en_low_r[1]};
        remap_delay_cal_en_out      [(28*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  7*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  7] = {4'd0,delay_cal_en_out_low_r[0],1'b0,delay_cal_en_out_low_r[1]};
        remap_loopback_fifo_rstn_upp[  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_rstn_low_r;
        remap_loopback_fifo_rstn_low[  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_rstn_low_r;
        remap_dqs_rstn              [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = sys_rstn;
        loopback_fifo_datain_low    [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_dataout_low_r;
        loopback_fifo_datain_upp    [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_dataout_low_r;
        remap_vref_ctrl_value       [(56*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] + 14*LOC_AC_BYTELANE_MAP[8*x +: 4]) +: 14] = vref_value_low_r_4ac[14*x +: 14];
        remap_delay_gate            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = delay_gate_r[0];
        remap_delay_osc_wdq_ac_sel  [( 8*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  2*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  2] = delay_osc_sel_low;
        remap_wrlvl_mode            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = 1'b0;
        remap_phy_rd_dqs_pdr        [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_phy_rd_dqs_te         [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_vref_rank_sel         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = 1'b0;
        remap_apb_dly_sel           [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = apb_dly_sel_r[3 - LOC_AC_BYTELANE_MAP[8*x +: 4]];
        remap_apb_dly_addr          [(24*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  6*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  6] = apb_dly_addr_r[5:0];
        remap_apb_dly_data          [(36*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  9*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  9] = apb_dly_data_r[8:0];
        remap_apb_dly_gate          [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = apb_dly_gate_r[0];
        mc0_phy_clk_wren_gt         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = ctrlclk_en_gate_low;
        mc0_phy_clk_rden_gt         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rdclk_en_gate_low;
        phy_ddr_clk_gate            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = ddrclk_en_gate_low;
        phy_rstn_low                [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rstn_low_r;
        phy_rstn_upp                [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rstn_low_r;
        delay_dti_low_4ac[x] = remap_delay_dti[4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] + LOC_AC_BYTELANE_MAP[8*x +: 4]];
    end

    for(n = 0; n < DQS_WIDTH; n= n+1 ) begin
    `ifdef USE_PING_PONG_PHY

        if(n < (DQS_WIDTH/2)) begin
            hctrl_datain_en_upp[n*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
            dqs_gate_in        [n*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
            phy_status         [n*2 +: 2] = remap_phy_status   [( 8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
            delay_dti_upp      [n]        = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]];
            {delay_cal_en_in_upp[n*7 + 3],delay_cal_en_in_upp[n*7 + 6],delay_cal_en_in_upp[n*7 + 4],delay_cal_en_in_upp[n*7 + 2],delay_cal_en_in_upp[n*7 + 1],delay_cal_en_in_upp[n*7 + 0],delay_cal_en_in_upp[n*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            {delay_cal_in_upp   [n*7 + 3],delay_cal_in_upp   [n*7 + 6],delay_cal_in_upp   [n*7 + 4],delay_cal_in_upp   [n*7 + 2],delay_cal_in_upp   [n*7 + 1],delay_cal_in_upp   [n*7 + 0],delay_cal_in_upp   [n*7 + 5] }= remap_delay_cal_in_r   [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = ~hctrl2mem_dataout_en_r[8*n +: 8];
            dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +: 4] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
            phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
            phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
            remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
            remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
            remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r[8*n +: 8];
            phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp[n];
            mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp[n];
            mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp[n];
            wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
            remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r[8*n +: 8];
            remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r[n+1];
            remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r[n+4];
            remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r[(6*n+6) +: 6];
            remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r[(9*n+9) +: 9];
            remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r[n];
            remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r[n];
            remap_delay_cal_clk_en  [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7]  = {delay_cal_clk_en_upp_r[7*n + 3],delay_cal_clk_en_upp_r[7*n + 6],delay_cal_clk_en_upp_r[7*n + 4],delay_cal_clk_en_upp_r[7*n + 2],delay_cal_clk_en_upp_r[7*n + 1],delay_cal_clk_en_upp_r[7*n + 0],delay_cal_clk_en_upp_r[7*n + 5]};
            remap_delay_cal_en_out  [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7]  = {delay_cal_en_out_upp_r[7*n + 3],delay_cal_en_out_upp_r[7*n + 6],delay_cal_en_out_upp_r[7*n + 4],delay_cal_en_out_upp_r[7*n + 2],delay_cal_en_out_upp_r[7*n + 1],delay_cal_en_out_upp_r[7*n + 0],delay_cal_en_out_upp_r[7*n + 5]};
            remap_delay_gate        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = delay_gate_r[n];        
            remap_wrlvl_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = wrlvl_mode_r[n]; 
            remap_vref_ctrl_value   [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14] = vref_value_upp_r[14*n +: 14];       
            loopback_fifo_datain_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = loopback_fifo_dataout_upp_r[n];
            loopback_fifo_datain_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = loopback_fifo_dataout_upp_r[n];
        end else begin
            hctrl_datain_en_upp [  (4+n-(DQS_WIDTH/2))*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
            dqs_gate_in         [  (4+n-(DQS_WIDTH/2))*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
            delay_dti_upp       [   4+n-(DQS_WIDTH/2)]         = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]];
            phy_status          [2*(4+n-(DQS_WIDTH/2)) +: 2] = remap_phy_status[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
            {delay_cal_en_in_upp[  (4+n-(DQS_WIDTH/2))*7 + 3],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 6],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 4],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 2],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 1],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 0],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            {delay_cal_in_upp   [  (4+n-(DQS_WIDTH/2))*7 + 3],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 6],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 4],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 2],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 1],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 0],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 5] }= remap_delay_cal_in_r   [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] =~hctrl2mem_dataout_en_r     [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r        [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r                 [   (4+n-(DQS_WIDTH/2))];
            phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r                 [   (4+n-(DQS_WIDTH/2))];
            remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r   [    4+n-(DQS_WIDTH/2)];
            remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r   [    4+n-(DQS_WIDTH/2)];
            remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r             [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp         [    4+n-(DQS_WIDTH/2)];
            mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp        [    4+n-(DQS_WIDTH/2)];
            mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp          [    4+n-(DQS_WIDTH/2)];
            wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r        [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r          [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r             [   (4+n-(DQS_WIDTH/2))+1];
            remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r              [   (4+n-(DQS_WIDTH/2))+4];
            remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r             [(6*(4+n-(DQS_WIDTH/2))+6) +: 6];
            remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r             [(9*(4+n-(DQS_WIDTH/2))+9) +: 9];
            remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r  [   (4+n-(DQS_WIDTH/2))];
            remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r       [    4+n-(DQS_WIDTH/2)];
            remap_delay_cal_clk_en      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_clk_en_upp_r    [ 7*(4+n-(DQS_WIDTH/2)) + 3],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 6],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 4],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 2],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 1],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 0],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 5]};
            remap_delay_cal_en_out      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_en_out_upp_r    [ 7*(4+n-(DQS_WIDTH/2)) + 3],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 6],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 4],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 2],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 1],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 0],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 5]};
            remap_delay_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_gate_r               [   (4+n-(DQS_WIDTH/2))];        
            remap_wrlvl_mode            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = wrlvl_mode_r               [   (4+n-(DQS_WIDTH/2))];  
            remap_vref_ctrl_value       [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14]= vref_value_upp_r           [14*(4+n-(DQS_WIDTH/2)) +: 14];  
            loopback_fifo_datain_low    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[    4+n-(DQS_WIDTH/2)];
            loopback_fifo_datain_upp    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[    4+n-(DQS_WIDTH/2)];
    end
 
    `else
         phy_status         [n*2 +: 2] = remap_phy_status[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
         hctrl_datain_en_upp[n*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
         dqs_gate_in        [n*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
         delay_dti_upp      [n]        = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]];
         {delay_cal_en_in_upp[n*7 + 3],delay_cal_en_in_upp[n*7 + 6],delay_cal_en_in_upp[n*7 + 4],delay_cal_en_in_upp[n*7 + 2],delay_cal_en_in_upp[n*7 + 1],delay_cal_en_in_upp[n*7 + 0],delay_cal_en_in_upp[n*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
         {delay_cal_in_upp[n*7 + 3],delay_cal_in_upp[n*7 + 6],delay_cal_in_upp[n*7 + 4],delay_cal_in_upp[n*7 + 2],delay_cal_in_upp[n*7 + 1],delay_cal_in_upp[n*7 + 0],delay_cal_in_upp[n*7 + 5] }= remap_delay_cal_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
         phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] =~hctrl2mem_dataout_en_r[8*n +: 8];
         dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
         phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
         phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
         remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
         remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
         remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r[8*n +: 8];
         phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp[n];
         mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp[n];
         mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp[n];
         wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
         remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r[8*n +: 8];
         remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r[n+1];
         remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r[n+4];
         remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r[(6*n+6) +: 6];
         remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r[(9*n+9) +: 9];
         remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r[n];
         remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r[n];
         remap_delay_cal_clk_en      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_clk_en_upp_r[7*n + 3],delay_cal_clk_en_upp_r[7*n + 6],delay_cal_clk_en_upp_r[7*n + 4],delay_cal_clk_en_upp_r[7*n + 2],delay_cal_clk_en_upp_r[7*n + 1],delay_cal_clk_en_upp_r[7*n + 0],delay_cal_clk_en_upp_r[7*n + 5]};
         remap_delay_cal_en_out      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_en_out_upp_r[7*n + 3],delay_cal_en_out_upp_r[7*n + 6],delay_cal_en_out_upp_r[7*n + 4],delay_cal_en_out_upp_r[7*n + 2],delay_cal_en_out_upp_r[7*n + 1],delay_cal_en_out_upp_r[7*n + 0],delay_cal_en_out_upp_r[7*n + 5]};
         remap_delay_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_gate_r[n];  
         remap_wrlvl_mode            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = wrlvl_mode_r[n];  
         remap_vref_ctrl_value       [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14]= vref_value_upp_r[14*n +: 14];
         loopback_fifo_datain_low    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[n];
         loopback_fifo_datain_upp    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[n];
    `endif

    end
end

assign hctrl_datain_en_low = phy_rd_en_r[4*LOC_AC_BYTELANE_MAP[7:4] + LOC_AC_BYTELANE_MAP[3:0]];


endmodule



`timescale 1ps / 1ps

module ph1_logic_ddrphy_streamlined #(

    parameter TCK            = 1250,         //memory tCK parameter, clock period in ps
    parameter NCK_PER_CLK    = 4,            //4,2. Fabric clk period : Memory clk period
    parameter DQS_GATE       = "Internal",   //Internal, External
    parameter LOOPBACK_CTRL  = "DISABLE",    //DISABLE, ENABLE
    parameter CTRL_INDEX     = 0,            //multi-controller, 0: ctrl0; 1: ctrl1.

// bank and pad position parameters about ddr bus
    parameter BYTE_LANE_0    = 4'b1111,      //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    parameter BYTE_LANE_1    = 4'b1111,
    parameter BYTE_LANE_2    = 4'b1111,
    parameter DATA_CTRL_0    = 4'b1000,      //[3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    parameter DATA_CTRL_1    = 4'b1111,
    parameter DATA_CTRL_2    = 4'b1111,
    parameter ADDR_MAP       = 216'h000_018_016_017_014_015_012_013_010_011_008_009_006_007_002_003_000_001,
    parameter CK_MAP         = 48'h004_005,
    parameter BANK_MAP       = 36'h000_025_024,
    parameter CKE_MAP        = 24'h020,
    parameter ODT_MAP        = 24'h000_023,
    parameter CS_MAP         = 24'h000_022,

`ifdef DRAM_DDR4
    parameter BANK_GROUP_MAP = 24'h020_019,
    parameter PARITY_MAP     = 12'h028,
    parameter ACT_MAP        = 12'h026,
    parameter DM_DBI_MAP     = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
    parameter ALERT_MAP      = 12'h029,
`elsif DRAM_DDR3
    parameter RAS_MAP        = 12'h000,
    parameter CAS_MAP        = 12'h000,
    parameter WE_MAP         = 12'h000,
    parameter DM_MAP         = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
`endif

    parameter RESET_MAP      = 12'h027,
    parameter DQS_GATE_MAP   = 108'h101_214_201_224_23b_014_03b_001_02a,
    parameter DQS_BYTE_MAP   = 216'h235_234_225_224_215_214_205_204_135_134_125_124_115_114_105_104_035_034,
    parameter DATA0_MAP      = 96'h039_038_037_036_033_032_031_030,
    parameter DATA1_MAP      = 96'h109_108_107_106_103_102_101_100,
    parameter DATA2_MAP      = 96'h119_118_117_116_113_112_111_110,
    parameter DATA3_MAP      = 96'h129_128_127_126_123_122_121_120,
    parameter DATA4_MAP      = 96'h139_138_137_136_133_132_131_130,
    parameter DATA5_MAP      = 96'h209_208_207_206_203_202_201_200,
    parameter DATA6_MAP      = 96'h219_218_217_216_213_212_211_210,
    parameter DATA7_MAP      = 96'h229_228_227_226_223_222_221_220,
    parameter DATA8_MAP      = 96'h239_238_237_236_233_232_231_230,

//
    parameter DQS_GATE_WIDTH = 9,
    parameter ADDR_WIDTH     = 17,   //DRAM address bus width
    parameter ROW_WIDTH      = 17,   //DRAM address bus width
    parameter BANK_WIDTH     = 2,

`ifdef DRAM_DDR4
    parameter BG_WIDTH       = 2,
    parameter DM_DBI         = "NONE",   //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    parameter ODT_WIDTH      = 1,
    parameter CK_WIDTH       = 1,    // # of CK/CK# outputs to memory
    parameter CKE_WIDTH      = 1,    // # of cke outputs
    parameter CS_WIDTH       = 1,    // # of unique CS outputs
    parameter DQS_WIDTH      = 9,    // # of DQS (strobe)
    parameter DQ_WIDTH       = 8 * DQS_WIDTH,
    parameter DM_WIDTH       = DQS_WIDTH ,
    parameter AC_WIDTH       = 3,
//DDR4 application,
    parameter OUTPUT_DRV     = 0,           // 0:RZQ/6, 1:RZQ/7
    parameter RTT_NOM        = 120,         //"120":RZQ/2, "60": RZQ/4, "40": RZQ/6
    parameter INTER_VREF     = "ENABLE",    //"ENABLE", "DISABLE"
    parameter DCI            = "ENABLE",    // "ENABLE", "DISABLE"
    parameter ZQ_VALUE       = 8'b10111101, //0-255,  different between DDR3 and DDR4; [7:4]: ODT, [3:0]: driver; upload and download: 2*RZQ/{N+1}, N=0~15;
    parameter ODTINIT_VALUE  = 0            //0-7;

)(
    input    [ 3:0]           ctl_rst_n_bank0,
    input    [ 3:0]           ctl_rst_n_bank1,
    input    [ 3:0]           ctl_rst_n_bank2,
    input    [ 2:0]           pzq_ctl_rst_n,
    input    [ 3:0]           A_ioclk_0,
    input    [ 3:0]           B_ioclk_0,
    input    [ 3:0]           C_ioclk_0,
    input    [ 3:0]           D_ioclk_0,
    input    [ 3:0]           A_ioclk_1,
    input    [ 3:0]           B_ioclk_1,
    input    [ 3:0]           C_ioclk_1,
    input    [ 3:0]           D_ioclk_1,
    input    [ 3:0]           A_ioclk_2,
    input    [ 3:0]           B_ioclk_2,
    input    [ 3:0]           C_ioclk_2,
    input    [ 3:0]           D_ioclk_2,
    input                     lclk_0,
    input                     lclk_1,
    input                     lclk_2,
    input    [ 3:0]           hctrl_clk0,
    input    [ 3:0]           hctrl_clk1,
    input    [ 3:0]           hctrl_clk2,
    input    [ 2:0]           pzq_user_clk,
    input    [11:0]           mc0_phy_clk_wren_gt, //clock gate signal of phy_clk in write operation ;
    input    [11:0]           mc0_phy_clk_rden_gt, //clock gate signal of phy_clk in read operation;
    input    [ 3:0]           phy_ddr_clk_gate0,   //phy_clk and ddr_clk gate signal
    input    [ 3:0]           phy_ddr_clk_gate1,   //phy_clk and ddr_clk gate signal
    input    [ 3:0]           phy_ddr_clk_gate2,   //phy_clk and ddr_clk gate signal
    input    [11:0]           phy_rstn_low,
    input    [11:0]           phy_rstn_upp,

//DRAM signals
`ifdef USE_DQS_GATE
    inout  [DQS_GATE_WIDTH-1 : 0]    dqs_gate,
`endif

    output [CK_WIDTH      -1 : 0]    ddr_ck_c,
    output [CK_WIDTH      -1 : 0]    ddr_ck_t,

    output [ADDR_WIDTH    -1 : 0]    ddr_addr,
    output [BANK_WIDTH    -1 : 0]    ddr_ba,

`ifdef DRAM_DDR4
    output [BG_WIDTH      -1 : 0]    ddr_bg,
`endif

`ifdef DRAM_DDR4
    output                           ddr_act_n,
`endif

`ifdef DRAM_DDR3
    output                           ddr_ras_n,
    output                           ddr_cas_n,
    output                           ddr_we_n,
`endif

    output [CKE_WIDTH     -1 : 0]    ddr_cke,
    output [ODT_WIDTH     -1 : 0]    ddr_odt,

`ifdef USE_CS
    output [CS_WIDTH      -1 : 0]    ddr_cs_n,
`endif

`ifdef USE_DM
    output [DM_WIDTH      -1 : 0]    ddr_dm,
`endif

`ifdef USE_RESET
    output                           ddr_reset_n,
`endif

    inout  [DQS_WIDTH     -1 : 0]    ddr_dqs_c,
    inout  [DQS_WIDTH     -1 : 0]    ddr_dqs_t,
    inout  [DQ_WIDTH      -1 : 0]    ddr_dq,

`ifdef USE_PAR_ALERT
    output                           ddr_parity,
    input                            ddr_alert_n,
`endif


    //debug signals
    input     [ 2:0]                        age_toggle_inv,      //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    input     [ 2:0]                        age_toggle_en,       //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    input     [11:0]                        dfi_io_pd,           //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
    //dcc control
    output    [11:0]                        dcc_cfg_done,        //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
    input                                   dcc_clrcfg,
    input                                   dcc_start,
    input                                   dcc_update_en_in,
    input                                   dcc_vt_update_en_in,
    output    [11:0]                        dcc_vt_update_en_out,//[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
    //delay control
    input     [27:0]                        delay_cal_clk_en0,   //bank0,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    input     [27:0]                        delay_cal_en_in0,
    output    [27:0]                        delay_cal_en_out0,
    input     [3:0]                         delay_cal_mode0,     //bank0,[3:0]:D/C/B/A
    output    [27:0]                        delay_cal_value0,
    input     [27:0]                        delay_cal_clk_en1,   //bank1,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    input     [27:0]                        delay_cal_en_in1,
    output    [27:0]                        delay_cal_en_out1,
    input     [ 3:0]                        delay_cal_mode1,     //bank1,[3:0]:D/C/B/A
    output    [27:0]                        delay_cal_value1,
    input     [27:0]                        delay_cal_clk_en2,   //bank2,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    input     [27:0]                        delay_cal_en_in2,
    output    [27:0]                        delay_cal_en_out2,
    input     [ 3:0]                        delay_cal_mode2,     //bank2,[3:0]:D/C/B/A
    output    [27:0]                        delay_cal_value2,
    //delay ctrl signals, use phy_clk
    input     [23:0]                        delay_paddr0,        //bank0,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    input     [35:0]                        delay_data0,         //bank0,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    input     [ 3:0]                        delay_sel0,          //bank0,[3:0]:D/C/B/A
    input     [ 3:0]                        delay_ranksel0,      //bank0,[3:0]:D/C/B/A
    output    [ 3:0]                        delay_dto0,          //bank0,[3:0]:D/C/B/A
    input     [ 3:0]                        delay_gate0,         //bank0,[3:0]:D/C/B/A
    input     [15:0]                        delay_osc_div0,      //bank0,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    input     [ 3:0]                        delay_osc_en0,       //bank0,[3:0]:D/C/B/A
    input     [ 7:0]                        delay_osc_wdq_sel0,  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 7:0]                        delay_osc_wrlvl_sel0,//bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 3:0]                        delay_testmode_en0,  //bank0,[3:0]:D/C/B/A

    input     [23:0]                        delay_paddr1,        //bank1,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    input     [35:0]                        delay_data1,         //bank1,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    input     [ 3:0]                        delay_sel1,          //bank1,[3:0]:D/C/B/A
    input     [ 3:0]                        delay_ranksel1,      //bank1,[3:0]:D/C/B/A
    output    [ 3:0]                        delay_dto1,          //bank1,[3:0]:D/C/B/A
    input      [3:0]                        delay_gate1,         //bank1,[3:0]:D/C/B/A
    input     [15:0]                        delay_osc_div1,      //bank1,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    input     [ 3:0]                        delay_osc_en1,       //bank1,[3:0]:D/C/B/A
    input     [ 7:0]                        delay_osc_wdq_sel1,  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 7:0]                        delay_osc_wrlvl_sel1,//bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 3:0]                        delay_testmode_en1,  //bank1,[3:0]:D/C/B/A

    input     [23:0]                        delay_paddr2,        //bank2,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    input     [35:0]                        delay_data2,         //bank2,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    input     [ 3:0]                        delay_sel2,          //bank2,[3:0]:D/C/B/A
    input     [ 3:0]                        delay_ranksel2,      //bank2,[3:0]:D/C/B/A
    output    [ 3:0]                        delay_dto2,          //bank2,[3:0]:D/C/B/A
    input     [ 3:0]                        delay_gate2,         //bank2,[3:0]:D/C/B/A
    input     [15:0]                        delay_osc_div2,      //bank2,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    input     [ 3:0]                        delay_osc_en2,       //bank2,[3:0]:D/C/B/A
    input     [ 7:0]                        delay_osc_wdq_sel2,  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 7:0]                        delay_osc_wrlvl_sel2,//bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    input     [ 3:0]                        delay_testmode_en2,  //bank2,[3:0]:D/C/B/A

//APB bus signals
    input                                   apb_clk,
    input                                   apb_rst_n,
    input     [15:0]                        apb_addr,
    input                                   apb_enable,
    output                                  apb_error,
    output    [31:0]                        apb_rdata,
    output                                  apb_ready,
    input                                   apb_sync_path_sel,
    input     [31:0]                        apb_wdata,
    input                                   apb_wr_rdn,
    input                                   apb_sel,

//data signals, need to use the bit width parameter
    output    [12* 8-1:0]                   phy_rd_dm,      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    output    [12*64-1:0]                   phy_rdata,      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    output    [     11:0]                   phy_rd_en,      //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    output    [ 6* 8-1:0]                   phy_rdata_se,   //2 single pad per bank, 6 pairs pads in 3 banks;
    output    [12* 8-1:0]                   phy_rd_dqsn,
    output    [12* 8-1:0]                   phy_rd_dqsp,

    input     [12* 8-1:0]                   phy_wr_dm,      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    input     [12*64-1:0]                   phy_wdata,      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    input     [12* 8-1:0]                   phy_wr_en,      //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    input     [ 6* 8-1:0]                   phy_wrdata_se,  //2 single pad per bank, 6 pads in 3 banks;
    input     [12* 8-1:0]                   phy_wr_dqsn,
    input     [12* 8-1:0]                   phy_wr_dqsp,


//dqs signals
    output    [     7:0]                    dqs_rd_gate_status0,  //bank0,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p0,//bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    output    [     7:0]                    dqs_rd_gate_status1,  //bank1,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p1,//bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    output    [     7:0]                    dqs_rd_gate_status2,  //bank2,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p2,//bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    input     [     3:0]                    dqs_rstn0,            //bank0,[3:0]:D/C/B/A
    input     [     3:0]                    dqs_rstn1,            //bank1,[3:0]:D/C/B/A
    input     [     3:0]                    dqs_rstn2,            //bank2,[3:0]:D/C/B/A
    output    [    23:0]                    dqs_cnt,              //[7:0]: bank0_bytelane_D/C/B/A; [15:8]: bank1_bytelane_D/C/B/A; [23:16]:bank2_bytelane_D/C/B/A
    output    [    95:0]                    dqs_iogate_rdata,     //[7:0]: bank0_bytelane_A;       [95:0]:{bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    input     [12*8-1:0]                    dqs_rd_gate_en,       //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    input     [12*8-1:0]                    dqs_rd_en_shadow,


// debug signals
    input     [  4:0]                       atpg_mode0,                 //bank0,[4:0]:pzq/D/C/B/A
    input     [  4:0]                       atpg_mode1,                 //bank1,[4:0]:pzq/D/C/B/A
    input     [  4:0]                       atpg_mode2,                 //bank2,[4:0]:pzq/D/C/B/A
    input     [ 23:0]                       loopback_clk_sel,           //[ 1:0]: bank0_bytelane_A;      [ 7: 0]: bank0_bytelane_D/C/B/A;
                                                                        //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    input     [ 23:0]                       loopback_clknum_sel,        //[ 1:0]: bank0_bytelane_A;      [ 7: 0]: bank0_bytelane_D/C/B/A;
                                                                        //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    input     [ 11:0]                       loopback_fifo_datain_low,   //[ 3:0]: bank0_bytelane_D/C/B/A;[ 7: 4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    input     [ 11:0]                       loopback_fifo_datain_upp,
    input     [ 11:0]                       loopback_fifo_resp_low,
    input     [ 11:0]                       loopback_fifo_resp_upp,
    input     [ 11:0]                       loopback_fifo_rstn_low,
    input     [ 11:0]                       loopback_fifo_rstn_upp,
    input     [ 11:0]                       loopback_mode,
    input     [ 95:0]                       loopback_en,                //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                        //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    input                                   offcal_clrcfg,              //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    output    [ 11:0]                       offcal_done,
    input                                   offcal_start,
    input                                   offcal_update_en,
    input                                   offcal_vt_update_en_in,
    output    [ 11:0]                       offcal_vt_update_en_out,

    input     [ 31:0]                       phy_rd_dqs_pdr0,            //IO power down receiver;
    input     [ 31:0]                       phy_rd_dqs_pdr1,
    input     [ 31:0]                       phy_rd_dqs_pdr2,
    input     [ 31:0]                       phy_rd_dqs_te0,             //IO termination enable;
    input     [ 31:0]                       phy_rd_dqs_te1,
    input     [ 31:0]                       phy_rd_dqs_te2,
    input     [ 11:0]                       wrlvl_en,                   //write leveling enable;
    input     [ 95:0]                       wrlvl_qin,                  //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                        //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    output reg[ 71:0]                       wrlvl_qout,
    input     [ 11:0]                       dqs_pupd_en,                //dqs pull-up and pull-down enable when training
    input     [ 23:0]                       clb2phy_vref0,              //[7:0]: bank0_vref0; [15:8];bank1_vref0;[23:16]: bank2_vref0;
    input     [ 23:0]                       clb2phy_vref1,              //[7:0]: bank0_vref1; [15:8];bank1_vref1;[23:16]: bank2_vref1;
    input     [ 23:0]                       clb2phy_vref2,              //[7:0]: bank0_vref2; [15:8];bank1_vref2;[23:16]: bank2_vref2;
    input     [ 23:0]                       clb2phy_vref3,              //[7:0]: bank0_vref3; [15:8];bank1_vref3;[23:16]: bank2_vref3;
    input     [ 11:0]                       vref_value_sel,             //[3:0]: bank0; [7:4]: bank1; [11:8]: bank2;
    input     [  2:0]                       zqcal_clrcfg,
    input     [167:0]                       zqcal_code,
    output    [167:0]                       zqcal_code_o,
    output    [  2:0]                       zqcal_done,
    input     [  2:0]                       zqcal_start,
    input     [  2:0]                       zqcal_update_en,
    input     [  2:0]                       zqcal_vt_update_en_in,
    output    [  2:0]                       zqcal_vt_update_en_out,
    input     [167:0]                       vref_ctrl_value,
    output    [ 13:0]                       zqcal_debug_data0,
    output    [ 13:0]                       zqcal_debug_data1,
    output    [ 13:0]                       zqcal_debug_data2,
    output    [ 63:0]                       dqsgr_debug_data0,
    output    [ 63:0]                       dqsgr_debug_data1,
    output    [ 63:0]                       dqsgr_debug_data2

);

//local parameters
//depend on the pad used to AC signal or dqs signal;
localparam DISABLE_GSR            = "ENABLE";
localparam A_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";    //"AC";"DX": dq/dm/dqs signals in bytelane
localparam B_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";
localparam DDR_RST_MODE           = "ASYNC"; //"SYNC","ASYNC"  ,default value: ASYNC, users can not change it.
localparam DATA_OUT_SYNC          = "SYNC_DISABLE"; //default value: enable
localparam DATA_WIDTH             = (NCK_PER_CLK == 4) ? "X8" : "X4" ; // "X8","X4"
localparam DQSN_PUPD              = "PD";  //"PU","PD"
localparam DQSP_PUPD              = "PU";  //"PU","PD"
localparam DQS_PUPD_STRENGTH      = "OFF";  //"WEAK", "MED", "STRONG", "OFF"
localparam VREF_SRC_SEL           = (INTER_VREF == "ENABLE") ? "DISABLE" : "ENABLE";     //NONE, INT, EXT
localparam LOOPBACK_EN            = LOOPBACK_CTRL;  // DISABLE, ENABLE
localparam CTL_CLK_SWI_SEL        = (CTRL_INDEX == 0) ? "IOCLK0" : "IOCLK2";      //LCLK0, LCLK1, LCLK2, LCLK3, IOCLK0, IOCLK1, IOCLK2, IOCLK3, GND
localparam DDR_CLK_SWI_SEL        = (CTRL_INDEX == 0) ? "IOCLK1" : "IOCLK3";      //IOCLK0, IOCLK1, IOCLK2, IOCLK3, GND
localparam IOCLK_D2S_EN           = "DISABLE";
localparam A_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam B_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam C_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam D_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam DLY_TEST_EN            = "ENABLE";    // DISABLE, ENABLE
localparam DLY_CAL_MODE           = "FULL";      // ( TCK > 2000 ) ? "HALF" : "FULL";
localparam A_DQS_BYTE_EN0         = (BYTE_LANE_0[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN0         = (BYTE_LANE_0[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN0         = (BYTE_LANE_0[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN0         = (BYTE_LANE_0[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DQS_BYTE_EN1         = (BYTE_LANE_1[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN1         = (BYTE_LANE_1[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN1         = (BYTE_LANE_1[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN1         = (BYTE_LANE_1[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DQS_BYTE_EN2         = (BYTE_LANE_2[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN2         = (BYTE_LANE_2[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN2         = (BYTE_LANE_2[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN2         = (BYTE_LANE_2[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";
localparam DCC_EN                 = "ENABLE";    // DISABLE, ENABLE
localparam A_DCC_CLK_SEL0         = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "CLK_WL" : "CLK_IO";  // CLK_IO, CLK_WL, CLK_WDQ
localparam B_DCC_CLK_SEL0         = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL0         = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL0         = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_DCC_CLK_SEL1         = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "CLK_WL" : "CLK_IO";
localparam B_DCC_CLK_SEL1         = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL1         = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL1         = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_DCC_CLK_SEL2         = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "CLK_WL" : "CLK_IO";
localparam B_DCC_CLK_SEL2         = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL2         = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL2         = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_BYTE_TYPE0           = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE0           = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE0           = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE0           = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_BYTE_TYPE1           = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE1           = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE1           = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE1           = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_BYTE_TYPE2           = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE2           = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE2           = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE2           = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";

localparam APPS_PZQ               = "DDR_DRAM"; //"GENERIC", "DDR_DRAM"
localparam VREF0_MODE             = "DDR_DRAM"; //10: VREF0_INT; 01: DDR, 00: DISABLE; 11: DISABLE
localparam VREF1_RANK0_MODE       = "DDR_DRAM"; //DISABLE, REG, DDR, SRAM
localparam VREF1_RANK1_MODE       = "DDR_DRAM";
localparam VREF2_RANK0_MODE       = "DDR_DRAM";
localparam VREF2_RANK1_MODE       = "DDR_DRAM";
localparam VREF3_RANK0_MODE       = "DDR_DRAM";
localparam VREF3_RANK1_MODE       = "DDR_DRAM";
localparam VREF4_RANK0_MODE       = "DDR_DRAM";
localparam VREF4_RANK1_MODE       = "DDR_DRAM";
localparam DCI_EN                 = DCI; //DISABLE, ENABLE
localparam AC_LOOPBACK_EN         = LOOPBACK_CTRL ;  // DISABLE, ENABLE
localparam OUTPUT_IMP             = 60; //  (RTT_NOM == 120) ? 40 : 34;
localparam ODT                    = (OUTPUT_DRV == 0) ? 120 : 60;
localparam WL_GATE_DIS_EN         = "ENABLE";
localparam OUTDEL                 = 0;//0-255
localparam OUTDELMUX              = "DDR_DRAM";//NODEL: 100; PROGDEL: 010; DDR_DRAM: 011; SRAM: 000
localparam INDEL                  = 0;//0-255
localparam INDELMUX               = "DDR_DRAM";//NODEL: 100; PROGDEL: 010; DDR_DRAM: 011; SRAM: 000

localparam VREF1_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF1_RANK0_VAL        = 0;
localparam VREF1_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF1_RANK1_VAL        = 0;
localparam VREF2_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF2_RANK0_VAL        = 0;
localparam VREF2_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF2_RANK1_VAL        = 0;
localparam VREF3_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF3_RANK0_VAL        = 0;
localparam VREF3_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF3_RANK1_VAL        = 0;
localparam VREF4_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF4_RANK0_VAL        = 0;
localparam VREF4_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF4_RANK1_VAL        = 0;

localparam FULL_DATA_MAP = {DATA8_MAP,DATA7_MAP,DATA6_MAP,DATA5_MAP,DATA4_MAP,DATA3_MAP,DATA2_MAP,DATA1_MAP,DATA0_MAP};

//internal signals
wire [DQS_GATE_WIDTH-1:0] dqs_gate_indd;
reg  [ 11:0] dqs_valid_sample_window ; //[3:0]:bank0_bytelane_D/C/B/A; [7:4]:bank1_bytelane_D/C/B/A; [11:8]:bank2_bytelane_D/C/B/A

wire [ 11:0] ctl_phy_clk;
wire [ 11:0] ctl_clk_ac;
wire [ 11:0] ctl_clk_dqs;
wire [ 11:0] ctl_clk_wdq;
wire [ 11:0] ddr_clk_ac;
wire [ 11:0] ddr_clk_dqs;
wire [ 11:0] ddr_clk_wdq;
wire [ 11:0] rdqs;
wire [ 11:0] rdqs_n_gated;
wire [ 11:0] wr_path_rstn_low;
wire [ 11:0] wr_path_rstn_upp;
wire [ 11:0] rd_path_rstn_low;
wire [ 11:0] rd_path_rstn_upp;
wire [ 11:0] ts_dq;
wire [ 11:0] ts_dqs;
wire [ 11:0] ts_dqsn;
wire [239:0] dq_ts_md;
wire [ 11:0] dq_se_ts_md;
wire [ 23:0] dqs_ts_md;
wire [299:0] remap_ts_md = {//bank2
                             dq_se_ts_md[11:8]
                            ,dq_ts_md[239:232],dqs_ts_md[23:22],dqs_ts_md[23:22],dq_ts_md[231:220]
                            ,dq_ts_md[219:212],dqs_ts_md[21:20],dqs_ts_md[21:20],dq_ts_md[211:200]
                            ,dq_ts_md[199:192],dqs_ts_md[19:18],dqs_ts_md[19:18],dq_ts_md[191:180]
                            ,dq_ts_md[179:172],dqs_ts_md[17:16],dqs_ts_md[17:16],dq_ts_md[171:160]
                            //bank1
                            ,dq_se_ts_md[7:4]
                            ,dq_ts_md[159:152],dqs_ts_md[15:14],dqs_ts_md[15:14],dq_ts_md[151:140]
                            ,dq_ts_md[139:132],dqs_ts_md[13:12],dqs_ts_md[13:12],dq_ts_md[131:120]
                            ,dq_ts_md[119:112],dqs_ts_md[11:10],dqs_ts_md[11:10],dq_ts_md[111:100]
                            ,dq_ts_md[99:92],dqs_ts_md[9:8],dqs_ts_md[9:8],dq_ts_md[91:80]
                            //bank0
                            ,dq_se_ts_md[3:0]
                            ,dq_ts_md[79:72],dqs_ts_md[7:6],dqs_ts_md[7:6],dq_ts_md[71:60]
                            ,dq_ts_md[59:52],dqs_ts_md[5:4],dqs_ts_md[5:4],dq_ts_md[51:40]
                            ,dq_ts_md[39:32],dqs_ts_md[3:2],dqs_ts_md[3:2],dq_ts_md[31:20]
                            ,dq_ts_md[19:12],dqs_ts_md[1:0],dqs_ts_md[1:0],dq_ts_md[11:0]};
wire [ 959:0] doq;
wire [  95:0] dosp;
wire [  95:0] dosn;
wire [  11:0] in_dqsp_bdl_byp;
wire [  11:0] in_dqsn_bdl_byp;
wire [ 119:0] in_bdl_byp;
wire [  71:0] in_dqsp_bdl_dly;
wire [  71:0] in_dqsn_bdl_dly;
wire [ 719:0] in_bdl_dly;
wire [  11:0] out_dqsp_bdl_byp;
wire [  11:0] out_dqsn_bdl_byp;
wire [ 119:0] out_bdl_byp;
wire [  71:0] out_dqsp_bdl_dly;
wire [  71:0] out_dqsn_bdl_dly;
wire [ 719:0] out_bdl_dly;
wire [1199:0] diq;
wire [  11:0] pdr;
wire [  11:0] pdr_dqs;
wire [  11:0] pdr_dqsn;
wire [  47:0] doq_se;
wire [   5:0] in_se_bdl_byp;
wire [  35:0] in_se_bdl_dly;
wire [   5:0] out_se_bdl_byp;
wire [  35:0] out_se_bdl_dly;
reg  [1199:0] remap_diq;
wire [ 239:0] dq_pdr_md;
wire [  11:0] dq_se_pdr_md;
wire [  23:0] dqs_pdr_md;
wire [ 299:0] remap_pdr_md = {//bank2
                             dq_se_pdr_md[11:8]
                            ,dq_pdr_md[239:232],dqs_pdr_md[23:22],dqs_pdr_md[23:22],dq_pdr_md[231:220]
                            ,dq_pdr_md[219:212],dqs_pdr_md[21:20],dqs_pdr_md[21:20],dq_pdr_md[211:200]
                            ,dq_pdr_md[199:192],dqs_pdr_md[19:18],dqs_pdr_md[19:18],dq_pdr_md[191:180]
                            ,dq_pdr_md[179:172],dqs_pdr_md[17:16],dqs_pdr_md[17:16],dq_pdr_md[171:160]
                            //bank1
                            ,dq_se_pdr_md[7:4]
                            ,dq_pdr_md[159:152],dqs_pdr_md[15:14],dqs_pdr_md[15:14],dq_pdr_md[151:140]
                            ,dq_pdr_md[139:132],dqs_pdr_md[13:12],dqs_pdr_md[13:12],dq_pdr_md[131:120]
                            ,dq_pdr_md[119:112],dqs_pdr_md[11:10],dqs_pdr_md[11:10],dq_pdr_md[111:100]
                            ,dq_pdr_md[99:92],dqs_pdr_md[9:8],dqs_pdr_md[9:8],dq_pdr_md[91:80]
                            //bank0
                            ,dq_se_pdr_md[3:0]
                            ,dq_pdr_md[79:72],dqs_pdr_md[7:6],dqs_pdr_md[7:6],dq_pdr_md[71:60]
                            ,dq_pdr_md[59:52],dqs_pdr_md[5:4],dqs_pdr_md[5:4],dq_pdr_md[51:40]
                            ,dq_pdr_md[39:32],dqs_pdr_md[3:2],dqs_pdr_md[3:2],dq_pdr_md[31:20]
                            ,dq_pdr_md[19:12],dqs_pdr_md[1:0],dqs_pdr_md[1:0],dq_pdr_md[11:0]};
wire[ 11:0] te;
wire[ 11:0] te_dqs;
wire[ 11:0] te_dqsn;
wire[239:0] dq_te_md;
wire[ 11:0] dq_se_te_md;
wire[ 23:0] dqs_te_md;
wire[299:0] remap_te_md = {//bank2
                             dq_se_te_md[11:8]
                            ,dq_te_md[239:232],dqs_te_md[23:22],dqs_te_md[23:22],dq_te_md[231:220]
                            ,dq_te_md[219:212],dqs_te_md[21:20],dqs_te_md[21:20],dq_te_md[211:200]
                            ,dq_te_md[199:192],dqs_te_md[19:18],dqs_te_md[19:18],dq_te_md[191:180]
                            ,dq_te_md[179:172],dqs_te_md[17:16],dqs_te_md[17:16],dq_te_md[171:160]
                            //bank1
                            ,dq_se_te_md[7:4]
                            ,dq_te_md[159:152],dqs_te_md[15:14],dqs_te_md[15:14],dq_te_md[151:140]
                            ,dq_te_md[139:132],dqs_te_md[13:12],dqs_te_md[13:12],dq_te_md[131:120]
                            ,dq_te_md[119:112],dqs_te_md[11:10],dqs_te_md[11:10],dq_te_md[111:100]
                            ,dq_te_md[99:92],dqs_te_md[9:8],dqs_te_md[9:8],dq_te_md[91:80]
                            //bank0
                            ,dq_se_te_md[3:0]
                            ,dq_te_md[79:72],dqs_te_md[7:6],dqs_te_md[7:6],dq_te_md[71:60]
                            ,dq_te_md[59:52],dqs_te_md[5:4],dqs_te_md[5:4],dq_te_md[51:40]
                            ,dq_te_md[39:32],dqs_te_md[3:2],dqs_te_md[3:2],dq_te_md[31:20]
                            ,dq_te_md[19:12],dqs_te_md[1:0],dqs_te_md[1:0],dq_te_md[11:0]};

wire[1199:0] remap_doq = {  //bank2
                             doq_se[47:40],doq_se[39:32]
                            ,doq[959:928],dosn[95:88],dosp[95:88],doq[927:880]  //bytelane D
                            ,doq[879:848],dosn[87:80],dosp[87:80],doq[847:800]  //bytelane C
                            ,doq[799:768],dosn[79:72],dosp[79:72],doq[767:720]  //bytelane B
                            ,doq[719:688],dosn[71:64],dosp[71:64],doq[687:640]  //bytelane A
                            //bank1
                            ,doq_se[31:24],doq_se[23:16]
                            ,doq[639:608],dosn[63:56],dosp[63:56],doq[607:560]  //bytelane D
                            ,doq[559:528],dosn[55:48],dosp[55:48],doq[527:480]  //bytelane C
                            ,doq[479:448],dosn[47:40],dosp[47:40],doq[447:400]  //bytelane B
                            ,doq[399:368],dosn[39:32],dosp[39:32],doq[367:320]  //bytelane A
                            //bank0, pad_se, pad-b_6, pad-5, pad-4, pad-3_0
                            ,doq_se[15:8],doq_se[7:0]
                            ,doq[319:288],dosn[31:24],dosp[31:24],doq[287:240]  //bytelane D
                            ,doq[239:208],dosn[23:16],dosp[23:16],doq[207:160]  //bytelane C
                            ,doq[159:128],dosn[15:8] ,dosp[15:8] ,doq[127: 80]  //bytelane B
                            ,doq[79:48]  ,dosn[7:0]  ,dosp[7:0]  ,doq[ 47:  0]};//bytelane A

assign diq= {remap_diq[1199:1192],remap_diq[1183:800],remap_diq[1191:1184],remap_diq[799:792],remap_diq[783:400],remap_diq[791:784],remap_diq[399:392],remap_diq[383:0],remap_diq[391:384]};

wire[149:0] remap_in_bdl_byp = { in_se_bdl_byp[5],in_se_bdl_byp[4]
                                ,in_bdl_byp[119:116],in_dqsn_bdl_byp[11],in_dqsp_bdl_byp[11],in_bdl_byp[115:110]    //bytelane D
                                ,in_bdl_byp[109:106],in_dqsn_bdl_byp[10],in_dqsp_bdl_byp[10],in_bdl_byp[105:100]    //bytelane C
                                ,in_bdl_byp[99 :96] ,in_dqsn_bdl_byp[9] ,in_dqsp_bdl_byp[9] ,in_bdl_byp[95:90]      //bytelane B
                                ,in_bdl_byp[89 :86] ,in_dqsn_bdl_byp[8] ,in_dqsp_bdl_byp[8] ,in_bdl_byp[85:80]      //bytelane A
                            //bank1
                                ,in_se_bdl_byp[3],in_se_bdl_byp[2]
                                ,in_bdl_byp[79:76],in_dqsn_bdl_byp[6],in_dqsp_bdl_byp[6],in_bdl_byp[75:70]  //bytelane D
                                ,in_bdl_byp[69:66],in_dqsn_bdl_byp[6],in_dqsp_bdl_byp[6],in_bdl_byp[65:60]  //bytelane C
                                ,in_bdl_byp[59:56],in_dqsn_bdl_byp[5],in_dqsp_bdl_byp[5],in_bdl_byp[55:50]  //bytelane B
                                ,in_bdl_byp[49:46],in_dqsn_bdl_byp[4],in_dqsp_bdl_byp[4],in_bdl_byp[45:40]  //bytelane A
                            //bank0
                                ,in_se_bdl_byp[1],in_se_bdl_byp[0]
                                ,in_bdl_byp[39:36],in_dqsn_bdl_byp[3],in_dqsp_bdl_byp[3],in_bdl_byp[35:30]  //bytelane D
                                ,in_bdl_byp[29:26],in_dqsn_bdl_byp[2],in_dqsp_bdl_byp[2],in_bdl_byp[25:20]  //bytelane C
                                ,in_bdl_byp[19:16],in_dqsn_bdl_byp[1],in_dqsp_bdl_byp[1],in_bdl_byp[15:10]  //bytelane B
                                ,in_bdl_byp[9:6]  ,in_dqsn_bdl_byp[0],in_dqsp_bdl_byp[0],in_bdl_byp[5:0]};  //bytelane A

wire [1199:0] remap_in_bdl_dly = { 2'b00,in_se_bdl_dly[35:30],2'b00,in_se_bdl_dly[29:24],2'b00,in_bdl_dly[719:714],2'b00,in_bdl_dly[713:708],2'b00,in_bdl_dly[707:702],2'b00,in_bdl_dly[701:696],2'b00,in_dqsn_bdl_dly[71:66],2'b00,in_dqsp_bdl_dly[71:66],2'b00,in_bdl_dly[695:690],2'b00,in_bdl_dly[689:684],2'b00,in_bdl_dly[683:678],2'b00,in_bdl_dly[677:672],2'b00,in_bdl_dly[671:666],2'b00,in_bdl_dly[665:660]
                            //bytelane2
                                ,2'b00,in_bdl_dly[659:654],2'b00,in_bdl_dly[653:648],2'b00,in_bdl_dly[647:642],2'b00,in_bdl_dly[641:636],2'b00,in_dqsn_bdl_dly[65:60],2'b00,in_dqsp_bdl_dly[65:60],2'b00,in_bdl_dly[635:630],2'b00,in_bdl_dly[629:624],2'b00,in_bdl_dly[623:618],2'b00,in_bdl_dly[617:612],2'b00,in_bdl_dly[611:606],2'b00,in_bdl_dly[605:600]
                            //bytelane1
                                ,2'b00,in_bdl_dly[599:594],2'b00,in_bdl_dly[593:588],2'b00,in_bdl_dly[587:582],2'b00,in_bdl_dly[581:576],2'b00,in_dqsn_bdl_dly[59:54],2'b00,in_dqsp_bdl_dly[59:54],2'b00,in_bdl_dly[575:570],2'b00,in_bdl_dly[569:564],2'b00,in_bdl_dly[563:558],2'b00,in_bdl_dly[557:552],2'b00,in_bdl_dly[551:546],2'b00,in_bdl_dly[545:540]
                            //bytelane0
                                ,2'b00,in_bdl_dly[539:534],2'b00,in_bdl_dly[533:528],2'b00,in_bdl_dly[527:522],2'b00,in_bdl_dly[521:516],2'b00,in_dqsn_bdl_dly[53:48],2'b00,in_dqsp_bdl_dly[53:48],2'b00,in_bdl_dly[515:510],2'b00,in_bdl_dly[509:504],2'b00,in_bdl_dly[503:498],2'b00,in_bdl_dly[497:492],2'b00,in_bdl_dly[491:486],2'b00,in_bdl_dly[485:480]
                            //bank1
                            //bytelane3
                                ,2'b00,in_se_bdl_dly[23:18],2'b00,in_se_bdl_dly[17:12],2'b00,in_bdl_dly[479:474],2'b00,in_bdl_dly[473:468],2'b00,in_bdl_dly[467:462],2'b00,in_bdl_dly[461:456],2'b00,in_dqsn_bdl_dly[47:42],2'b00,in_dqsp_bdl_dly[47:42],2'b00,in_bdl_dly[455:450],2'b00,in_bdl_dly[449:444],2'b00,in_bdl_dly[443:438],2'b00,in_bdl_dly[437:432],2'b00,in_bdl_dly[431:426],2'b00,in_bdl_dly[425:420]
                            //bytelane2
                                ,2'b00,in_bdl_dly[419:414],2'b00,in_bdl_dly[413:408],2'b00,in_bdl_dly[407:402],2'b00,in_bdl_dly[401:396],2'b00,in_dqsn_bdl_dly[41:36],2'b00,in_dqsp_bdl_dly[41:36],2'b00,in_bdl_dly[395:390],2'b00,in_bdl_dly[389:384],2'b00,in_bdl_dly[383:378],2'b00,in_bdl_dly[377:372],2'b00,in_bdl_dly[371:366],2'b00,in_bdl_dly[365:360]
                            //bytelane1
                                ,2'b00,in_bdl_dly[359:354],2'b00,in_bdl_dly[353:348],2'b00,in_bdl_dly[347:342],2'b00,in_bdl_dly[341:336],2'b00,in_dqsn_bdl_dly[35:30],2'b00,in_dqsp_bdl_dly[35:30],2'b00,in_bdl_dly[335:330],2'b00,in_bdl_dly[329:324],2'b00,in_bdl_dly[323:318],2'b00,in_bdl_dly[317:312],2'b00,in_bdl_dly[311:306],2'b00,in_bdl_dly[305:300]
                            //bytelane0
                                ,2'b00,in_bdl_dly[299:294],2'b00,in_bdl_dly[293:288],2'b00,in_bdl_dly[287:282],2'b00,in_bdl_dly[281:276],2'b00,in_dqsn_bdl_dly[29:24],2'b00,in_dqsp_bdl_dly[29:24],2'b00,in_bdl_dly[275:270],2'b00,in_bdl_dly[269:264],2'b00,in_bdl_dly[263:258],2'b00,in_bdl_dly[257:252],2'b00,in_bdl_dly[251:246],2'b00,in_bdl_dly[245:240]
                            //bank0
                            //bytelane3
                                ,2'b00,in_se_bdl_dly[11:6],2'b00,in_se_bdl_dly[5:0],2'b00,in_bdl_dly[239:234],2'b00,in_bdl_dly[233:228],2'b00,in_bdl_dly[227:222],2'b00,in_bdl_dly[221:216],2'b00,in_dqsn_bdl_dly[23:18],2'b00,in_dqsp_bdl_dly[23:18],2'b00,in_bdl_dly[215:210],2'b00,in_bdl_dly[209:204],2'b00,in_bdl_dly[203:198],2'b00,in_bdl_dly[197:192],2'b00,in_bdl_dly[191:186],2'b00,in_bdl_dly[185:180]
                            //bytelane2
                                ,2'b00,in_bdl_dly[179:174],2'b00,in_bdl_dly[173:168],2'b00,in_bdl_dly[167:162],2'b00,in_bdl_dly[161:156],2'b00,in_dqsn_bdl_dly[17:12],2'b00,in_dqsp_bdl_dly[17:12],2'b00,in_bdl_dly[155:150],2'b00,in_bdl_dly[149:144],2'b00,in_bdl_dly[143:138],2'b00,in_bdl_dly[137:132],2'b00,in_bdl_dly[131:126],2'b00,in_bdl_dly[125:120]
                            //bytelane1
                                ,2'b00,in_bdl_dly[119:114],2'b00,in_bdl_dly[113:108],2'b00,in_bdl_dly[107:102],2'b00,in_bdl_dly[101:96],2'b00,in_dqsn_bdl_dly[11:6],2'b00,in_dqsp_bdl_dly[11:6],2'b00,in_bdl_dly[95:90],2'b00,in_bdl_dly[89:84],2'b00,in_bdl_dly[83:78],2'b00,in_bdl_dly[77:72],2'b00,in_bdl_dly[71:66],2'b00,in_bdl_dly[65:60]
                            //bytelane0
                                ,2'b00,in_bdl_dly[59:54]  ,2'b00,in_bdl_dly[53:48]  ,2'b00,in_bdl_dly[47:42]  ,2'b00,in_bdl_dly[41:36] ,2'b00,in_dqsn_bdl_dly[5:0] ,2'b00,in_dqsp_bdl_dly[5:0] ,2'b00,in_bdl_dly[35:30],2'b00,in_bdl_dly[29:24],2'b00,in_bdl_dly[23:18],2'b00,in_bdl_dly[17:12],2'b00,in_bdl_dly[11:6],2'b00,in_bdl_dly[5:0]};

wire[149:0] remap_out_bdl_byp = {out_se_bdl_byp[5],out_se_bdl_byp[4]
                                ,out_bdl_byp[119:116],out_dqsn_bdl_byp[11],out_dqsp_bdl_byp[11],out_bdl_byp[115:110]
                                ,out_bdl_byp[109:106],out_dqsn_bdl_byp[10],out_dqsp_bdl_byp[10],out_bdl_byp[105:100]
                                ,out_bdl_byp[99:96],out_dqsn_bdl_byp[9],out_dqsp_bdl_byp[9],out_bdl_byp[95:90]
                                ,out_bdl_byp[89:86],out_dqsn_bdl_byp[8],out_dqsp_bdl_byp[8],out_bdl_byp[85:80]
                            //bank1
                                ,out_se_bdl_byp[3],out_se_bdl_byp[2]
                                ,out_bdl_byp[79:76],out_dqsn_bdl_byp[6],out_dqsp_bdl_byp[6],out_bdl_byp[75:70]
                                ,out_bdl_byp[69:66],out_dqsn_bdl_byp[6],out_dqsp_bdl_byp[6],out_bdl_byp[65:60]
                                ,out_bdl_byp[59:56],out_dqsn_bdl_byp[5],out_dqsp_bdl_byp[5],out_bdl_byp[55:50]
                                ,out_bdl_byp[49:46],out_dqsn_bdl_byp[4],out_dqsp_bdl_byp[4],out_bdl_byp[45:40]
                            //bank0
                                ,out_se_bdl_byp[1],out_se_bdl_byp[0]
                                ,out_bdl_byp[39:36],out_dqsn_bdl_byp[3],out_dqsp_bdl_byp[3],out_bdl_byp[35:30]
                                ,out_bdl_byp[29:26],out_dqsn_bdl_byp[2],out_dqsp_bdl_byp[2],out_bdl_byp[25:20]
                                ,out_bdl_byp[19:16],out_dqsn_bdl_byp[1],out_dqsp_bdl_byp[1],out_bdl_byp[15:10]
                                ,out_bdl_byp[9:6]  ,out_dqsn_bdl_byp[0],out_dqsp_bdl_byp[0],out_bdl_byp[5:0]};

wire[1199:0] remap_out_bdl_dly = { 2'b00,out_se_bdl_dly[35:30],2'b00,out_se_bdl_dly[29:24],2'b00,out_bdl_dly[719:714],2'b00,out_bdl_dly[713:708],2'b00,out_bdl_dly[707:702],2'b00,out_bdl_dly[701:696],2'b00,out_dqsn_bdl_dly[71:66],2'b00,out_dqsp_bdl_dly[71:66],2'b00,out_bdl_dly[695:690],2'b00,out_bdl_dly[689:684],2'b00,out_bdl_dly[683:678],2'b00,out_bdl_dly[677:672],2'b00,out_bdl_dly[671:666],2'b00,out_bdl_dly[665:660]
                            //bytelane2
                                ,2'b00,out_bdl_dly[659:654],2'b00,out_bdl_dly[653:648],2'b00,out_bdl_dly[647:642],2'b00,out_bdl_dly[641:636],2'b00,out_dqsn_bdl_dly[65:60],2'b00,out_dqsp_bdl_dly[65:60],2'b00,out_bdl_dly[635:630],2'b00,out_bdl_dly[629:624],2'b00,out_bdl_dly[623:618],2'b00,out_bdl_dly[617:612],2'b00,out_bdl_dly[611:606],2'b00,out_bdl_dly[605:600]
                            //bytelane1
                                ,2'b00,out_bdl_dly[599:594],2'b00,out_bdl_dly[593:588],2'b00,out_bdl_dly[587:582],2'b00,out_bdl_dly[581:576],2'b00,out_dqsn_bdl_dly[59:54],2'b00,out_dqsp_bdl_dly[59:54],2'b00,out_bdl_dly[575:570],2'b00,out_bdl_dly[569:564],2'b00,out_bdl_dly[563:558],2'b00,out_bdl_dly[557:552],2'b00,out_bdl_dly[551:546],2'b00,out_bdl_dly[545:540]
                            //bytelane0
                                ,2'b00,out_bdl_dly[539:534],2'b00,out_bdl_dly[533:528],2'b00,out_bdl_dly[527:522],2'b00,out_bdl_dly[521:516],2'b00,out_dqsn_bdl_dly[53:48],2'b00,out_dqsp_bdl_dly[53:48],2'b00,out_bdl_dly[515:510],2'b00,out_bdl_dly[509:504],2'b00,out_bdl_dly[503:498],2'b00,out_bdl_dly[497:492],2'b00,out_bdl_dly[491:486],2'b00,out_bdl_dly[485:480]
                            //bank1
                            //bytelane3
                                ,2'b00,out_se_bdl_dly[23:18],2'b00,out_se_bdl_dly[17:12],2'b00,out_bdl_dly[479:474],2'b00,out_bdl_dly[473:468],2'b00,out_bdl_dly[467:462],2'b00,out_bdl_dly[461:456],2'b00,out_dqsn_bdl_dly[47:42],2'b00,out_dqsp_bdl_dly[47:42],2'b00,out_bdl_dly[455:450],2'b00,out_bdl_dly[449:444],2'b00,out_bdl_dly[443:438],2'b00,out_bdl_dly[437:432],2'b00,out_bdl_dly[431:426],2'b00,out_bdl_dly[425:420]
                            //bytelane2
                                ,2'b00,out_bdl_dly[419:414],2'b00,out_bdl_dly[413:408],2'b00,out_bdl_dly[407:402],2'b00,out_bdl_dly[401:396],2'b00,out_dqsn_bdl_dly[41:36],2'b00,out_dqsp_bdl_dly[41:36],2'b00,out_bdl_dly[395:390],2'b00,out_bdl_dly[389:384],2'b00,out_bdl_dly[383:378],2'b00,out_bdl_dly[377:372],2'b00,out_bdl_dly[371:366],2'b00,out_bdl_dly[365:360]
                            //bytelane1
                                ,2'b00,out_bdl_dly[359:354],2'b00,out_bdl_dly[353:348],2'b00,out_bdl_dly[347:342],2'b00,out_bdl_dly[341:336],2'b00,out_dqsn_bdl_dly[35:30],2'b00,out_dqsp_bdl_dly[35:30],2'b00,out_bdl_dly[335:330],2'b00,out_bdl_dly[329:324],2'b00,out_bdl_dly[323:318],2'b00,out_bdl_dly[317:312],2'b00,out_bdl_dly[311:306],2'b00,out_bdl_dly[305:300]
                            //bytelane0
                                ,2'b00,out_bdl_dly[299:294],2'b00,out_bdl_dly[293:288],2'b00,out_bdl_dly[287:282],2'b00,out_bdl_dly[281:276],2'b00,out_dqsn_bdl_dly[29:24],2'b00,out_dqsp_bdl_dly[29:24],2'b00,out_bdl_dly[275:270],2'b00,out_bdl_dly[269:264],2'b00,out_bdl_dly[263:258],2'b00,out_bdl_dly[257:252],2'b00,out_bdl_dly[251:246],2'b00,out_bdl_dly[245:240]
                            //bank0
                            //bytelane3
                                ,2'b00,out_se_bdl_dly[11:6],2'b00,out_se_bdl_dly[5:0],2'b00,out_bdl_dly[239:234],2'b00,out_bdl_dly[233:228],2'b00,out_bdl_dly[227:222],2'b00,out_bdl_dly[221:216],2'b00,out_dqsn_bdl_dly[23:18],2'b00,out_dqsp_bdl_dly[23:18],2'b00,out_bdl_dly[215:210],2'b00,out_bdl_dly[209:204],2'b00,out_bdl_dly[203:198],2'b00,out_bdl_dly[197:192],2'b00,out_bdl_dly[191:186],2'b00,out_bdl_dly[185:180]
                            //bytelane2
                                ,2'b00,out_bdl_dly[179:174],2'b00,out_bdl_dly[173:168],2'b00,out_bdl_dly[167:162],2'b00,out_bdl_dly[161:156],2'b00,out_dqsn_bdl_dly[17:12],2'b00,out_dqsp_bdl_dly[17:12],2'b00,out_bdl_dly[155:150],2'b00,out_bdl_dly[149:144],2'b00,out_bdl_dly[143:138],2'b00,out_bdl_dly[137:132],2'b00,out_bdl_dly[131:126],2'b00,out_bdl_dly[125:120]
                            //bytelane1
                                ,2'b00,out_bdl_dly[119:114],2'b00,out_bdl_dly[113:108],2'b00,out_bdl_dly[107:102],2'b00,out_bdl_dly[101:96],2'b00,out_dqsn_bdl_dly[11:6],2'b00,out_dqsp_bdl_dly[11:6],2'b00,out_bdl_dly[95:90],2'b00,out_bdl_dly[89:84],2'b00,out_bdl_dly[83:78],2'b00,out_bdl_dly[77:72],2'b00,out_bdl_dly[71:66],2'b00,out_bdl_dly[65:60]
                            //bytelane0
                                ,2'b00,out_bdl_dly[59:54],2'b00,out_bdl_dly[53:48],2'b00,out_bdl_dly[47:42],2'b00,out_bdl_dly[41:36],2'b00,out_dqsn_bdl_dly[5:0],2'b00,out_dqsp_bdl_dly[5:0],2'b00,out_bdl_dly[35:30],2'b00,out_bdl_dly[29:24],2'b00,out_bdl_dly[23:18],2'b00,out_bdl_dly[17:12],2'b00,out_bdl_dly[11:6],2'b00,out_bdl_dly[5:0]};



// internal signals
wire    [      3:0]     ctrlclk_en_gt0 = mc0_phy_clk_wren_gt[3:0];
wire    [      3:0]     ctrlclk_en_gt1 = mc0_phy_clk_wren_gt[7:4];
wire    [      3:0]     ctrlclk_en_gt2 = mc0_phy_clk_wren_gt[11:8];
wire    [      3:0]     ctl_rdclk_gt0  = mc0_phy_clk_rden_gt[3:0];
wire    [      3:0]     ctl_rdclk_gt1  = mc0_phy_clk_rden_gt[7:4];
wire    [      3:0]     ctl_rdclk_gt2  = mc0_phy_clk_rden_gt[11:8];

wire    [     95:0]     remap_phy_rd_dm;
wire    [12*64-1:0]     remap_phy_rdata;
wire    [     47:0]     remap_phy_rdata_se;
wire    [     95:0]     remap_phy_rd_dqsn;
wire    [     95:0]     remap_phy_rd_dqsp;

assign phy_rd_dm    = remap_phy_rd_dm;
assign phy_rdata    = remap_phy_rdata;
assign phy_rdata_se = remap_phy_rdata_se;
assign phy_rd_dqsn  = remap_phy_rd_dqsn;
assign phy_rd_dqsp  = remap_phy_rd_dqsp;

wire    [     95:0]     remap_phy_wr_dm;
wire    [12*64-1:0]     remap_phy_wdata;
wire    [     47:0]     remap_phy_wrdata_se;
wire    [     95:0]     remap_phy_wr_dqsn;
wire    [     95:0]     remap_phy_wr_dqsp;

assign remap_phy_wr_dm     = phy_wr_dm;
assign remap_phy_wdata     = phy_wdata;
assign remap_phy_wrdata_se = phy_wrdata_se;
assign remap_phy_wr_dqsn   =  phy_wr_dqsn;
assign remap_phy_wr_dqsp   =  phy_wr_dqsp;

reg     [11:0]    rdqs_in;
reg     [11:0]    rdqs_n_in;



`ifdef USE_DQS_GATE
wire [DQS_GATE_WIDTH*8-1:0]             out_dqs_gate;
wire [DQS_GATE_WIDTH  -1:0]             out_dqs_gate_bdl_byp;
wire [DQS_GATE_WIDTH*8-1:0]             out_dqs_gate_bdl_dly;
`endif

wire [ADDR_WIDTH*8    -1:0]             out_addr;
wire [ADDR_WIDTH      -1:0]             out_addr_bdl_byp;
wire [ADDR_WIDTH*8    -1:0]             out_addr_bdl_dly;
wire [BANK_WIDTH*8    -1:0]             out_ba;
wire [BANK_WIDTH      -1:0]             out_ba_bdl_byp;
wire [BANK_WIDTH*8    -1:0]             out_ba_bdl_dly;

wire [CK_WIDTH*8      -1:0]             out_ck_n;
wire [CK_WIDTH*8      -1:0]             out_ck_p;
wire [CK_WIDTH*2      -1:0]             out_ck_bdl_byp;
wire [CK_WIDTH*2*8    -1:0]             out_ck_bdl_dly;

wire [CKE_WIDTH*8     -1:0]             out_cke;
wire [CKE_WIDTH       -1:0]             out_cke_bdl_byp;
wire [CKE_WIDTH*8     -1:0]             out_cke_bdl_dly;
wire [CS_WIDTH*8      -1:0]             out_cs_n;
wire [CS_WIDTH        -1:0]             out_cs_bdl_byp;
wire [CS_WIDTH*8      -1:0]             out_cs_bdl_dly;
wire [DM_WIDTH*8      -1:0]             out_dm;
wire [DM_WIDTH        -1:0]             out_dm_bdl_byp;
wire [DM_WIDTH*8      -1:0]             out_dm_bdl_dly;
wire [ODT_WIDTH*8     -1:0]             out_odt;
wire [ODT_WIDTH       -1:0]             out_odt_bdl_byp;
wire [ODT_WIDTH*8     -1:0]             out_odt_bdl_dly;
wire [DM_WIDTH*8      -1:0]             in_dm;
wire [         8      -1:0]             out_reset_n;
wire                                    out_reset_bdl_byp;
wire [         8      -1:0]             out_reset_bdl_dly;

`ifdef DRAM_DDR4
wire [BG_WIDTH*8      -1:0]             out_bg;
wire [BG_WIDTH        -1:0]             out_bg_bdl_byp;
wire [BG_WIDTH*8      -1:0]             out_bg_bdl_dly;
wire [         8      -1:0]             out_alert_n;
wire                                    in_alert_n;
wire                                    out_alert_bdl_byp;
wire [8-1:0]                            out_alert_bdl_dly;
wire                                    in_alert_bdl_byp;
wire [8-1:0]                            in_alert_bdl_dly;
wire [8-1:0]                            out_parity;
wire                                    out_parity_bdl_byp;
wire [8-1:0]                            out_parity_bdl_dly;
wire [8-1:0]                            out_act_n;
wire                                    out_actn_bdl_byp;
wire [8-1:0]                            out_actn_bdl_dly;
`elsif DRAM_DDR3
wire [8-1:0]                            out_cas_n;
wire                                    out_cas_bdl_byp;
wire [8-1:0]                            out_cas_bdl_dly;
wire [8-1:0]                            out_ras_n;
wire                                    out_ras_bdl_byp;
wire [8-1:0]                            out_ras_bdl_dly;
wire [8-1:0]                            out_we_n;
wire                                    out_we_bdl_byp;
wire [8-1:0]                            out_we_bdl_dly;
`endif

wire [DQ_WIDTH *8-1:0]                  out_dq;
wire [DQS_WIDTH*8-1:0]                  out_dqs_p;
wire [DQS_WIDTH*8-1:0]                  out_dqs_n;
wire [DQ_WIDTH *8-1:0]                  in_dq;

wire [DQ_WIDTH   -1:0]                  indd_dq;
wire [DQ_WIDTH   -1:0]                  out_dq_bdl_byp;
wire [DQ_WIDTH *8-1:0]                  out_dq_bdl_dly;
wire [DQS_WIDTH  -1:0]                  out_dqs_p_bdl_byp;
wire [DQS_WIDTH*8-1:0]                  out_dqs_p_bdl_dly;
wire [DQS_WIDTH  -1:0]                  out_dqs_n_bdl_byp;
wire [DQS_WIDTH*8-1:0]                  out_dqs_n_bdl_dly;
wire [DQ_WIDTH   -1:0]                  in_dq_bdl_byp;
wire [DQ_WIDTH *8-1:0]                  in_dq_bdl_dly;
wire [DQS_WIDTH  -1:0]                  in_dqs_p_bdl_byp;
wire [DQS_WIDTH*8-1:0]                  in_dqs_p_bdl_dly;
wire [DQS_WIDTH  -1:0]                  in_dqs_n_bdl_byp;
wire [DQS_WIDTH*8-1:0]                  in_dqs_n_bdl_dly;
wire [DQS_WIDTH  -1:0]                  inck_n;
wire [DQS_WIDTH  -1:0]                  inck_p;


integer aa;
always @(*)
begin
    wrlvl_qout = 72'd0;
    rdqs_in    = 12'd0;
    rdqs_n_in  = 12'd0;
    dqs_valid_sample_window = 12'd0;

    for(aa=0; aa<DQ_WIDTH; aa = aa + 1) begin
        wrlvl_qout[aa] = indd_dq[aa];
    end
//-----------------------------dqs_gate_external-----------------------------------------
`ifdef USE_DQS_GATE
    for(aa = 0; aa < DQS_GATE_WIDTH; aa = aa + 1) begin
        dqs_valid_sample_window[4*DQS_GATE_MAP[(12*aa+8) +: 3] + DQS_GATE_MAP[(12*aa+4) +: 2]] = dqs_gate_indd[aa];
    end
`endif

//-----------------------------in/out_dqs_p/n-----------------------------------------
    for(aa = 0; aa < DQS_WIDTH; aa = aa + 1)
    begin
        rdqs_in  [4*DQS_BYTE_MAP[(12*(2*aa  )+8) +: 3] + DQS_BYTE_MAP[(12*(2*aa  )+4) +: 2]] = inck_p[aa];
        rdqs_n_in[4*DQS_BYTE_MAP[(12*(2*aa+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*aa+1)+4) +: 2]] = inck_n[aa];
    end
end

genvar n;
generate
//-----------------------------dqs_gate_external-----------------------------------------
`ifdef USE_DQS_GATE
    for(n = 0; n < DQS_GATE_WIDTH; n = n + 1) begin:gen_dqs_gate_external
        assign out_dqs_gate        [8*n+:8] = remap_doq        [8*(50*DQS_GATE_MAP[(12*n+8) +: 3] + 12*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]) +: 8];
        assign out_dqs_gate_bdl_byp[n     ] = remap_out_bdl_byp[   50*DQS_GATE_MAP[(12*n+8) +: 3] + 12*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]];
        assign out_dqs_gate_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*DQS_GATE_MAP[(12*n+8) +: 3] + 12*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]) +: 8];
    end
`endif
    //-----------------------------out_addr--------------------------------------
    for(n = 0; n < ADDR_WIDTH; n = n + 1) begin:gen_out_addr
        if(ADDR_MAP[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_addr        [8*n+:8] = remap_doq        [8*(50*ADDR_MAP[(12*n+8) +: 3] + 12*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]) +: 8];
            assign out_addr_bdl_byp[     n] = remap_out_bdl_byp[   50*ADDR_MAP[(12*n+8) +: 3] + 12*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]];
            assign out_addr_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*ADDR_MAP[(12*n+8) +: 3] + 12*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]) +: 8];
        end else if((ADDR_MAP[12*n +: 4] == 4'hc) && (ADDR_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_addr_se0
            assign out_addr        [8*n+:8] = remap_doq        [(50*ADDR_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_addr_bdl_byp[     n] = remap_out_bdl_byp[ 50*ADDR_MAP[(12*n+8) +: 3] + 48];
            assign out_addr_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*ADDR_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end else begin: gen_addr_se1
            assign out_addr        [8*n+:8] = remap_doq        [(50*ADDR_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_addr_bdl_byp[     n] = remap_out_bdl_byp[ 50*ADDR_MAP[(12*n+8) +: 3] + 49];
            assign out_addr_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*ADDR_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end
    //-----------------------------out_ba-----------------------------------------
    for(n = 0; n < BANK_WIDTH; n = n + 1) begin:gen_out_ba
        if(BANK_MAP[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_ba        [8*n+:8] = remap_doq        [8*(50*BANK_MAP[(12*n+8) +: 3] + 12*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]) +: 8];
            assign out_ba_bdl_byp[     n] = remap_out_bdl_byp[   50*BANK_MAP[(12*n+8) +: 3] + 12*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]];
            assign out_ba_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*BANK_MAP[(12*n+8) +: 3] + 12*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]) +: 8];
        end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_ba_se0
            assign out_ba        [8*n+:8] = remap_doq        [(50*BANK_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_ba_bdl_byp[     n] = remap_out_bdl_byp[ 50*BANK_MAP[(12*n+8) +: 3] + 48];
            assign out_ba_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*BANK_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end else begin: gen_ba_se1
            assign out_ba        [8*n+:8] = remap_doq        [(50*BANK_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_ba_bdl_byp[     n] = remap_out_bdl_byp[ 50*BANK_MAP[(12*n+8) +: 3] + 49];
            assign out_ba_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*BANK_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end

    //-----------------------------out_odt-----------------------------------------
    for(n = 0; n < ODT_WIDTH; n = n + 1) begin:gen_out_odt
        if(ODT_MAP[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_odt        [8*n+:8] = remap_doq        [8*(50*ODT_MAP[(12*n+8) +: 3] + 12*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]) +: 8];
            assign out_odt_bdl_byp[     n] = remap_out_bdl_byp[   50*ODT_MAP[(12*n+8) +: 3] + 12*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]];
            assign out_odt_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*ODT_MAP[(12*n+8) +: 3] + 12*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]) +: 8];
        end else if((ODT_MAP[12*n +: 4] == 4'hc) && (ODT_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_odt_se0
            assign out_odt        [8*n+:8] = remap_doq        [(50*ODT_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_odt_bdl_byp[     n] = remap_out_bdl_byp[ 50*ODT_MAP[(12*n+8) +: 3] + 48];
            assign out_odt_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*ODT_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end else begin: gen_odt_se1
            assign out_odt        [8*n+:8] = remap_doq        [(50*ODT_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_odt_bdl_byp[     n] = remap_out_bdl_byp[ 50*ODT_MAP[(12*n+8) +: 3] + 49];
            assign out_odt_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*ODT_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end
//-----------------------------out_cke-----------------------------------------
    for(n = 0; n < CKE_WIDTH; n = n + 1) begin:gen_out_cke
        if(CKE_MAP[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_cke        [8*n+:8] = remap_doq        [8*(50*CKE_MAP[(12*n+8) +: 3] + 12*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]) +: 8];
            assign out_cke_bdl_byp[     n] = remap_out_bdl_byp[   50*CKE_MAP[(12*n+8) +: 3] + 12*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]];
            assign out_cke_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*CKE_MAP[(12*n+8) +: 3] + 12*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]) +: 8];
        end else if((CKE_MAP[12*n +: 4] == 4'hc) && (CKE_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_cke_se0
            assign out_cke        [8*n+:8] = remap_doq        [(50*CKE_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_cke_bdl_byp[     n] = remap_out_bdl_byp[ 50*CKE_MAP[(12*n+8) +: 3] + 48];
            assign out_cke_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*CKE_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end else begin: gen_cke_se1
            assign out_cke        [8*n+:8] = remap_doq        [(50*CKE_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_cke_bdl_byp[     n] = remap_out_bdl_byp[ 50*CKE_MAP[(12*n+8) +: 3] + 49];
            assign out_cke_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*CKE_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end
    //-----------------------------out_ck-----------------------------------------
    for(n = 0; n < CK_WIDTH; n = n + 1) begin:gen_out_ck
            assign out_ck_p      [8*n      +:8] = remap_doq        [8*(50*CK_MAP[(12*(2*n  )+8) +: 3] + 12*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]) +: 8];
            assign out_ck_bdl_byp[2*n         ] = remap_out_bdl_byp[   50*CK_MAP[(12*(2*n  )+8) +: 3] + 12*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]];
            assign out_ck_bdl_dly[8*2*n    +:8] = remap_out_bdl_dly[8*(50*CK_MAP[(12*(2*n  )+8) +: 3] + 12*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]) +: 8];
            assign out_ck_n      [8*n      +:8] = remap_doq        [8*(50*CK_MAP[(12*(2*n+1)+8) +: 3] + 12*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]) +: 8];
            assign out_ck_bdl_byp[2*n+1       ] = remap_out_bdl_byp[   50*CK_MAP[(12*(2*n+1)+8) +: 3] + 12*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]];
            assign out_ck_bdl_dly[8*(2*n+1)+:8] = remap_out_bdl_dly[8*(50*CK_MAP[(12*(2*n+1)+8) +: 3] + 12*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]) +: 8];
    end
    //-----------------------------out_cs-----------------------------------------
    for(n = 0; n < CS_WIDTH; n = n + 1) begin:gen_out_cs
        if(CS_MAP[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_cs_n      [8*n+:8] = remap_doq        [8*(50*CS_MAP[(12*n+8) +: 3] + 12*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]) +: 8];
            assign out_cs_bdl_byp[n     ] = remap_out_bdl_byp[   50*CS_MAP[(12*n+8) +: 3] + 12*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]];
            assign out_cs_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*CS_MAP[(12*n+8) +: 3] + 12*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]) +: 8];
        end else if((CS_MAP[12*n +: 4] == 4'hc) && (CS_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_se0
            assign out_cs_n      [8*n+:8] = remap_doq        [(50*CS_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_cs_bdl_byp[n     ] = remap_out_bdl_byp[ 50*CS_MAP[(12*n+8) +: 3] + 48];
            assign out_cs_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*CS_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end else begin: gen_cs_se1
            assign out_cs_n      [8*n+:8] = remap_doq        [(50*CS_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_cs_bdl_byp[n     ] = remap_out_bdl_byp[ 50*CS_MAP[(12*n+8) +: 3] + 49];
            assign out_cs_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*CS_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end

    //-----------------------------in/out_dqs_p/n-----------------------------------------
    for(n = 0; n < DQS_WIDTH; n = n + 1) begin:gen_inout_dqs
        //generate dqs_p
        assign out_dqs_p        [8*n+:8] = remap_doq        [8*(50*DQS_BYTE_MAP[(12*(2*n)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n)+4) +: 2] + DQS_BYTE_MAP[12*(2*n) +: 4]) +: 8];
        assign out_dqs_p_bdl_byp[n     ] = remap_out_bdl_byp[   50*DQS_BYTE_MAP[(12*(2*n)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n)+4) +: 2] + DQS_BYTE_MAP[12*(2*n) +: 4]];
        assign out_dqs_p_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*DQS_BYTE_MAP[(12*(2*n)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n)+4) +: 2] + DQS_BYTE_MAP[12*(2*n) +: 4]) +: 8];
        assign in_dqs_p_bdl_byp [n     ] = remap_in_bdl_byp [   50*DQS_BYTE_MAP[(12*(2*n)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n)+4) +: 2] + DQS_BYTE_MAP[12*(2*n) +: 4]];
        assign in_dqs_p_bdl_dly [8*n+:8] = remap_in_bdl_dly [8*(50*DQS_BYTE_MAP[(12*(2*n)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n)+4) +: 2] + DQS_BYTE_MAP[12*(2*n) +: 4]) +: 8];
        //generate dqs_n
        assign out_dqs_n        [8*n+:8] = remap_doq        [8*(50*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8];
        assign out_dqs_n_bdl_byp[n     ] = remap_out_bdl_byp[   50*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]];
        assign out_dqs_n_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8];
        assign in_dqs_n_bdl_byp [n     ] = remap_in_bdl_byp [   50*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]];
        assign in_dqs_n_bdl_dly [8*n+:8] = remap_in_bdl_dly [8*(50*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8];
    end
    //-----------------------------in/out_dq-----------------------------------------
    for(n = 0; n < DQ_WIDTH; n = n + 1) begin:gen_inout_dq
        assign out_dq        [8*n+:8] = remap_doq        [8*(50*FULL_DATA_MAP[(12*n+8) +: 3] + 12*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 8];
        assign out_dq_bdl_byp[n     ] = remap_out_bdl_byp[   50*FULL_DATA_MAP[(12*n+8) +: 3] + 12*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]];
        assign out_dq_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*FULL_DATA_MAP[(12*n+8) +: 3] + 12*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 8];
        assign in_dq_bdl_byp [n     ] = remap_in_bdl_byp [   50*FULL_DATA_MAP[(12*n+8) +: 3] + 12*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]];
        assign in_dq_bdl_dly [8*n+:8] = remap_in_bdl_dly [8*(50*FULL_DATA_MAP[(12*n+8) +: 3] + 12*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 8];
    end

endgenerate

//-----------------------------out_reset-----------------------------------------
generate
    if(RESET_MAP[3:0] < 4'hc) begin:gen_reset
        assign out_reset_n      [8-1 : 0] = remap_doq        [8*(50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 8];
        assign out_reset_bdl_byp          = remap_out_bdl_byp[   50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]];
        assign out_reset_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 8];
    end else if((RESET_MAP[3:0] == 4'hc) && (RESET_MAP[7:4] == 4'h0)) begin: gen_reset_se0
        assign out_reset_n      [8-1 : 0] = remap_doq        [(50*RESET_MAP[11:8] + 48)*8 +: 8];
        assign out_reset_bdl_byp          = remap_out_bdl_byp[ 50*RESET_MAP[11:8] + 48];
        assign out_reset_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*RESET_MAP[11:8] + 48)*8 +: 8];
    end else begin: gen_reset_se1
        assign out_reset_n      [8-1 : 0] = remap_doq        [(50*RESET_MAP[11:8] + 49)*8 +: 8];
        assign out_reset_bdl_byp          = remap_out_bdl_byp[ 50*RESET_MAP[11:8] + 49];
        assign out_reset_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*RESET_MAP[11:8] + 49)*8 +: 8];
    end
endgenerate

`ifdef DRAM_DDR4
    //-----------------------------out_bg-----------------------------------------
    generate
    for(n = 0; n < BG_WIDTH; n = n + 1) begin:gen_out_bg
        if(BG_WIDTH[12*n +: 4] < 4'hc) begin:loop_xpose
            assign out_bg        [8*n+:8] = remap_doq        [8*(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 12*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]) +: 8];
            assign out_bg_bdl_byp[n     ] = remap_out_bdl_byp[   50*BANK_GROUP_MAP[(12*n+8) +: 3] + 12*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]];
            assign out_bg_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 12*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]) +: 8];
        end
        else if((BANK_GROUP_MAP[12*n +: 4] == 4'hc) && (BANK_GROUP_MAP[(12*n+4) +: 4] == 4'h0)) begin: gen_bg_se0
            assign out_bg        [8*n+:8] = remap_doq        [(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
            assign out_bg_bdl_byp[n     ] = remap_out_bdl_byp[ 50*BANK_GROUP_MAP[(12*n+8) +: 3] + 48];
            assign out_bg_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 48)*8 +: 8];
        end
        else begin: gen_bg_se1
            assign out_bg        [8*n+:8] = remap_doq        [(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
            assign out_bg_bdl_byp[n     ] = remap_out_bdl_byp[ 50*BANK_GROUP_MAP[(12*n+8) +: 3] + 49];
            assign out_bg_bdl_dly[8*n+:8] = remap_out_bdl_dly[(50*BANK_GROUP_MAP[(12*n+8) +: 3] + 49)*8 +: 8];
        end
    end
    endgenerate
    //-----------------------------out_parity-----------------------------------------
    generate
        if(PARITY_MAP[3:0] < 4'hc) begin:gen_parity
            assign out_parity        [8-1 : 0] = remap_doq        [8*(50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 8];
            assign out_parity_bdl_byp          = remap_out_bdl_byp[   50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]];
            assign out_parity_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 8];
        end else if((PARITY_MAP[3:0] == 4'hc) && (PARITY_MAP[7:4] == 4'h0)) begin: gen_parity_se0
            assign out_parity        [8-1 : 0] = remap_doq        [(50*PARITY_MAP[11:8] + 48)*8 +: 8];
            assign out_parity_bdl_byp          = remap_out_bdl_byp[ 50*PARITY_MAP[11:8] + 48];
            assign out_parity_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*PARITY_MAP[11:8] + 48)*8 +: 8];
        end else begin: gen_parity_se1
            assign out_parity        [8-1 : 0] = remap_doq        [(50*PARITY_MAP[11:8] + 49)*8 +: 8];
            assign out_parity_bdl_byp          = remap_out_bdl_byp[ 50*PARITY_MAP[11:8] + 49];
            assign out_parity_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*PARITY_MAP[11:8] + 49)*8 +: 8];
        end
    endgenerate
    //-----------------------------out_act_n-----------------------------------------
    generate
        if(ACT_MAP[3:0] < 4'hc) begin:gen_act
            assign out_act_n       [8-1 : 0] = remap_doq        [8*(50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 8];
            assign out_actn_bdl_byp          = remap_out_bdl_byp[   50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]];
            assign out_actn_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 8];
        end else if((ACT_MAP[3:0] == 4'hc) && (ACT_MAP[7:4] == 4'h0)) begin: gen_act_se0
            assign out_act_n       [8-1 : 0] = remap_doq        [(50*ACT_MAP[11:8] + 48)*8 +: 8];
            assign out_actn_bdl_byp          = remap_out_bdl_byp[ 50*ACT_MAP[11:8] + 48];
            assign out_actn_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*ACT_MAP[11:8] + 48)*8 +: 8];
        end else begin: gen_act_se1
            assign out_act_n       [8-1 : 0] = remap_doq        [(50*ACT_MAP[11:8] + 49)*8 +: 8];
            assign out_actn_bdl_byp          = remap_out_bdl_byp[ 50*ACT_MAP[11:8] + 49];
            assign out_actn_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*ACT_MAP[11:8] + 49)*8 +: 8];
        end
    endgenerate
    //-----------------------------in/out_alert_n-----------------------------------------
    generate
        if(ALERT_MAP[3:0] < 4'hc) begin:gen_alert
            assign out_alert_n      [7 : 0] = remap_doq        [8*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8];
            assign out_alert_bdl_byp        = remap_out_bdl_byp[   50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]];
            assign out_alert_bdl_dly[7 : 0] = remap_out_bdl_dly[8*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8];
            assign in_alert_bdl_byp         = remap_in_bdl_byp [   50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]];
            assign in_alert_bdl_dly [7 : 0] = remap_in_bdl_dly [8*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8];
        end else if((ALERT_MAP[3:0] == 4'hc) && (ALERT_MAP[7:4] == 4'h0)) begin: gen_alert_se0
            assign out_alert_n      [7 : 0] = remap_doq        [  (50*ALERT_MAP[11:8] + 48)*8 +: 8];
            assign out_alert_bdl_byp        = remap_out_bdl_byp[   50*ALERT_MAP[11:8] + 48];
            assign out_alert_bdl_dly[7 : 0] = remap_out_bdl_dly[  (50*ALERT_MAP[11:8] + 48)*8 +: 8];
            assign in_alert_bdl_byp         = remap_in_bdl_byp [   50*ALERT_MAP[11:8] + 48];
            assign in_alert_bdl_dly [7 : 0] = remap_in_bdl_dly [8*(50*ALERT_MAP[11:8] + 48) +: 8];
        end else begin: gen_alert_se1
            assign out_alert_n      [7 : 0] = remap_doq        [  (50*ALERT_MAP[11:8] + 49)*8 +: 8];
            assign out_alert_bdl_byp        = remap_out_bdl_byp[   50*ALERT_MAP[11:8] + 49];
            assign out_alert_bdl_dly[7 : 0] = remap_out_bdl_dly[  (50*ALERT_MAP[11:8] + 49)*8 +: 8];
            assign in_alert_bdl_byp         = remap_in_bdl_byp [   50*ALERT_MAP[11:8] + 49];
            assign in_alert_bdl_dly [7 : 0] = remap_in_bdl_dly [8*(50*ALERT_MAP[11:8] + 49) +: 8];
        end
    endgenerate
    //-----------------------------out_dm-----------------------------------------
    generate
    for(n = 0; n < DM_WIDTH; n = n + 1) begin:gen_out_dm
        assign out_dm        [8*n+:8] = remap_doq        [8*(50*DM_DBI_MAP[(12*n+8) +: 3] + 12*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]) +: 8];
        assign out_dm_bdl_byp[n     ] = remap_out_bdl_byp[   50*DM_DBI_MAP[(12*n+8) +: 3] + 12*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]];
        assign out_dm_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*DM_DBI_MAP[(12*n+8) +: 3] + 12*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]) +: 8];
    end
    endgenerate
`elsif DRAM_DDR3

    //-----------------------------out_ras-----------------------------------------
    generate
        if(RAS_MAP[3:0] < 4'hc) begin:gen_ras
            assign out_ras_n      [8-1 : 0] = remap_doq        [8*(50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 8];
            assign out_ras_bdl_byp          = remap_out_bdl_byp[   50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]];
            assign out_ras_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 8];
        end else if((RAS_MAP[3:0] == 4'hc) && (RAS_MAP[7:4] == 4'h0)) begin: gen_ras_se0
            assign out_ras_n      [8-1 : 0] = remap_doq        [(50*RAS_MAP[11:8] + 48)*8 +: 8];
            assign out_ras_bdl_byp          = remap_out_bdl_byp[ 50*RAS_MAP[11:8] + 48];
            assign out_ras_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*RAS_MAP[11:8] + 48)*8 +: 8];
        end else begin: gen_ras_se1
            assign out_ras_n      [8-1 : 0] = remap_doq        [(50*RAS_MAP[11:8] + 49)*8 +: 8];
            assign out_ras_bdl_byp          = remap_out_bdl_byp[ 50*RAS_MAP[11:8] + 49];
            assign out_ras_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*RAS_MAP[11:8] + 49)*8 +: 8];
        end
    endgenerate

    //-----------------------------out_cas-----------------------------------------
    generate
        if(CAS_MAP[3:0] < 4'hc) begin:gen_cas
            assign out_cas_n      [8-1 : 0] = remap_doq        [8*(50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 8];
            assign out_cas_bdl_byp          = remap_out_bdl_byp[   50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]];
            assign out_cas_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 8];
        end else if((CAS_MAP[3:0] == 4'hc) && (CAS_MAP[7:4] == 4'h0)) begin: gen_cas_se0
            assign out_cas_n      [8-1 : 0] = remap_doq        [(50*CAS_MAP[11:8] + 48)*8 +: 8];
            assign out_cas_bdl_byp          = remap_out_bdl_byp[ 50*CAS_MAP[11:8] + 48];
            assign out_cas_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*CAS_MAP[11:8] + 48)*8 +: 8];
        end else begin: gen_cas_se1
            assign out_cas_n      [8-1 : 0] = remap_doq        [(50*CAS_MAP[11:8] + 49)*8 +: 8];
            assign out_cas_bdl_byp          = remap_out_bdl_byp[ 50*CAS_MAP[11:8] + 49];
            assign out_cas_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*CAS_MAP[11:8] + 49)*8 +: 8];
        end
    endgenerate

    //-----------------------------out_we-----------------------------------------
    generate
        if(WE_MAP[3:0] < 4'hc) begin:gen_we
            assign out_we_n      [8-1 : 0] = remap_doq        [8*(50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]) +: 8];
            assign out_we_bdl_byp          = remap_out_bdl_byp[   50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]];
            assign out_we_bdl_dly[8-1 : 0] = remap_out_bdl_dly[8*(50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]) +: 8];
        end else if((WE_MAP[3:0] == 4'hc) && (WE_MAP[7:4] == 4'h0)) begin: gen_we_se0
            assign out_we_n      [8-1 : 0] = remap_doq        [(50*WE_MAP[11:8] + 48)*8 +: 8];
            assign out_we_bdl_byp          = remap_out_bdl_byp[ 50*WE_MAP[11:8] + 48];
            assign out_we_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*WE_MAP[11:8] + 48)*8 +: 8];
        end else begin: gen_we_se1
            assign out_we_n      [8-1 : 0] = remap_doq        [(50*WE_MAP[11:8] + 49)*8 +: 8];
            assign out_we_bdl_byp          = remap_out_bdl_byp[ 50*WE_MAP[11:8] + 49];
            assign out_we_bdl_dly[8-1 : 0] = remap_out_bdl_dly[(50*WE_MAP[11:8] + 49)*8 +: 8];
        end
    endgenerate
    //-----------------------------out_dm-----------------------------------------
    generate
    for(n = 0; n < DM_WIDTH; n = n + 1) begin:gen_out_dm
        assign out_dm        [8*n+:8] = remap_doq        [8*(50*DM_MAP[(12*n+8) +: 3] + 12*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]) +: 8];
        assign out_dm_bdl_byp[n     ] = remap_out_bdl_byp[   50*DM_MAP[(12*n+8) +: 3] + 12*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]];
        assign out_dm_bdl_dly[8*n+:8] = remap_out_bdl_dly[8*(50*DM_MAP[(12*n+8) +: 3] + 12*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]) +: 8];
    end
    endgenerate
`endif


always @(*)
begin
    remap_diq = 1200'd0;
`ifdef DRAM_DDR4
    //-----------------------------out_dm-----------------------------------------
    `ifdef USE_DM
        for(aa = 0; aa < DM_WIDTH; aa = aa + 1) begin
            remap_diq[8*(50*DM_DBI_MAP[(12*aa+8) +: 3] + 12*DM_DBI_MAP[(12*aa+4) +: 2] + DM_DBI_MAP[12*aa +: 4]) +: 8] = in_dm[aa*8 +: 8];
        end
    `endif

    //-----------------------------in_alert_n-----------------------------------------
    `ifdef USE_PAR_ALERT
        if(ALERT_MAP[3:0] < 4'hc) begin
            remap_diq[8*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8] = {8{in_alert_n}};
        end else if((ALERT_MAP[3:0] == 4'hc) && (ALERT_MAP[7:4] == 4'h0)) begin
            remap_diq[8*(50*ALERT_MAP[11:8] + 48) +: 8] = {8{in_alert_n}};
        end else begin
            remap_diq[8*(50*ALERT_MAP[11:8] + 49) +: 8] = {8{in_alert_n}};
        end
    `endif
`elsif DRAM_DDR3
        //-----------------------------out_dm-----------------------------------------
        `ifdef USE_DM
            for(aa = 0; aa < DM_WIDTH; aa = aa + 1) begin
                remap_diq[8*(50*DM_MAP[(12*aa+8) +: 3] + 12*DM_MAP[(12*aa+4) +: 2] + DM_MAP[12*aa +: 4]) +: 8] = in_dm[aa*8 +: 8];
            end
        `endif
`endif
//-----------------------------in/out_dq-----------------------------------------
    for(aa = 0; aa < DQ_WIDTH; aa = aa + 1) begin
        remap_diq[8*(50*FULL_DATA_MAP[(12*aa+8) +: 3] + 12*FULL_DATA_MAP[(12*aa+4) +: 2] + FULL_DATA_MAP[12*aa +: 4]) +: 8] = in_dq[aa*8 +: 8];
    end

end


genvar m;
generate
`ifdef USE_DQS_GATE
//------------------------dqs_gate_indd signals---------------------------------------------
    for (m = 0; m < DQS_GATE_WIDTH; m = m + 1) begin: gen_dqs_gate
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "PIB"                                                            ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dqs_gate            [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_dqs_gate_bdl_byp    [m]                                      ),
             .out_bdl_dly             (  out_dqs_gate_bdl_dly    [m*8 +: 8]                               ),
             //      .qs_n_div        (                                                                   ),
             //      .diq             (                                                                   ),
             .pad                     (  dqs_gate                [m]                                      ),
             .indd                    (  dqs_gate_indd           [m]                                      ),
             //      .indqs           (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  1'b0),// ts_dq          [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*DQS_GATE_MAP[(12*m+8) +: 3] + 12*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  pdr                     [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*DQS_GATE_MAP[(12*m+8) +: 3] + 12*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] ),
             .te                      (  te                      [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*DQS_GATE_MAP[(12*m+8) +: 3] + 12*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] )

            );
    end
`endif
    //------------------------address signals---------------------------------------------
    for (m = 0; m < ADDR_WIDTH; m = m + 1) begin: gen_ddr_addr
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_addr                [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_addr_bdl_byp        [m]                                      ),
             .out_bdl_dly             (  out_addr_bdl_dly        [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_addr                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*ADDR_MAP[(12*m+8) +: 3] + 12*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*ADDR_MAP[(12*m+8) +: 3] + 12*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*ADDR_MAP[(12*m+8) +: 3] + 12*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] )
            );
    end
    //------------------------ bank address -----------------------
    for (m = 0; m < BANK_WIDTH; m = m + 1) begin: gen_ddr_ba
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_ba                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_ba_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_ba_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ba                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*BANK_MAP[(12*m+8) +: 3] + 12*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*BANK_MAP[(12*m+8) +: 3] + 12*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*BANK_MAP[(12*m+8) +: 3] + 12*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] )

        );
    end

    //------------------------ odt mapping -----------------------
    for (m = 0; m < ODT_WIDTH; m = m + 1) begin: gen_ddr_odt
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_odt                 [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_odt_bdl_byp         [m]                                      ),
             .out_bdl_dly             (  out_odt_bdl_dly         [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_odt                 [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*ODT_MAP[(12*m+8) +: 3] + 12*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*ODT_MAP[(12*m+8) +: 3] + 12*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*ODT_MAP[(12*m+8) +: 3] + 12*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] )

            );
    end
    //------------------------ cke mapping -----------------------
    for (m = 0; m < CKE_WIDTH; m = m + 1) begin: gen_ddr_cke
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_cke                 [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_cke_bdl_byp         [m]                                      ),
             .out_bdl_dly             (  out_cke_bdl_dly         [8*m +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cke                 [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*CKE_MAP[(12*m+8) +: 3] + 12*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*CKE_MAP[(12*m+8) +: 3] + 12*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*CKE_MAP[(12*m+8) +: 3] + 12*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] )
        );
    end

    //------------------------ cs_n mapping -----------------------
    `ifdef USE_CS
    for (m = 0; m < CS_WIDTH; m = m + 1) begin:gen_ddr_cs_n
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_cs_n                [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_cs_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_cs_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cs_n                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*CS_MAP[(12*m+8) +: 3] + 12*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*CS_MAP[(12*m+8) +: 3] + 12*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*CS_MAP[(12*m+8) +: 3] + 12*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] )
            );
    end
    `endif

`ifdef DRAM_DDR4
    //------------------------ bank group address -----------------------
    for (m = 0; m < BG_WIDTH; m = m + 1) begin: gen_ddr_bg
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_bg                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_bg_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_bg_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_bg                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*BANK_GROUP_MAP[(12*m+8) +: 3] + 12*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*BANK_GROUP_MAP[(12*m+8) +: 3] + 12*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*BANK_GROUP_MAP[(12*m+8) +: 3] + 12*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] )

            );
    end

    `ifdef USE_PAR_ALERT
    //------------------------ parity mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_io_parity(
             .doq                     (  out_parity              [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_parity_bdl_byp                                               ),
             .out_bdl_dly             (  out_parity_bdl_dly      [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_parity                                                       ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rdqs                    (  rdqs                    [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dq                   (  ts_dq                   [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dqs                  (  ts_dqs                  [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dqsn                 (  ts_dqsn                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_md                   (  remap_ts_md             [2*(50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*PARITY_MAP[11:8] + PARITY_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .pdr_dqsn                (  pdr_dqsn                [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .pdr_md                  (  remap_pdr_md            [2*(50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*PARITY_MAP[11:8] + PARITY_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .te_dqsn                 (  te_dqsn                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .te_md                   (  remap_te_md             [2*(50*PARITY_MAP[11:8] + 12*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] )
            );
    //------------------------ alert_n mapping -----------------------
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "IN"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_io_alert_n(
             .doq                     (  out_alert_n                                                      ),
             .in_bdl_byp              (  in_alert_bdl_byp                                                 ),
             .in_bdl_dly              (  in_alert_bdl_dly                                                 ),
             .out_bdl_byp             (  out_alert_bdl_byp                                                ),
             .out_bdl_dly             (  out_alert_bdl_dly                                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_alert_n                                                       ),
             .pad                     (  ddr_alert_n                                                      ),
             .indd                    (  ),//in_alert_n ),//dqs_valid_sample_window[4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rdqs                    (  rdqs                    [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dq                   (  ts_dq                   [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dqs                  (  ts_dqs                  [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dqsn                 (  ts_dqsn                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_md                   (  remap_ts_md             [2*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .pdr_dqsn                (  pdr_dqsn                [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .pdr_md                  (  remap_pdr_md            [2*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .te_dqsn                 (  te_dqsn                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .te_md                   (  remap_te_md             [2*(50*ALERT_MAP[11:8] + 12*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] )
            );
    `endif
    //------------------------ act_n mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_io_act(
             .doq                     (  out_act_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_actn_bdl_byp                                                 ),
             .out_bdl_dly             (  out_actn_bdl_dly        [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_act_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dq                   (  ts_dq                   [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*ACT_MAP[11:8] + ACT_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .pdr_md                  (  remap_pdr_md            [2*(50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*ACT_MAP[11:8] + ACT_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .te_md                   (  remap_te_md             [2*(50*ACT_MAP[11:8] + 12*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] )
            );

    //------------------------ dm mapping -----------------------
    `ifdef USE_DM
    for (m = 0; m < DM_WIDTH; m = m + 1) begin:gen_ddr_dm
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dm                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_dm_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dm_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dm                   [8*m +:8]                                ),
             .pad                     (  ddr_dm                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : ts_dq[4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*DM_DBI_MAP[(12*m+8) +: 3] + 12*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*DM_DBI_MAP[(12*m+8) +: 3] + 12*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*DM_DBI_MAP[(12*m+8) +: 3] + 12*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] )
            );
    end
    `endif

`elsif DRAM_DDR3

    //------------------------ ras mapping -----------------------
    begin:gen_ddr_ras_n
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_ras_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_ras_bdl_byp                                                  ),
             .out_bdl_dly             (  out_ras_bdl_dly         [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ras_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dq                   (  1'b0),// ts_dq          [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*RAS_MAP[11:8] + RAS_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .pdr_md                  (  remap_pdr_md            [2*(50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*RAS_MAP[11:8] + RAS_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .te_md                   (  remap_te_md             [2*(50*RAS_MAP[11:8] + 12*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] )

            );
    end
    //------------------------ cas mapping -----------------------
    begin:gen_ddr_cas_n
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_cas_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_cas_bdl_byp                                                  ),
             .out_bdl_dly             (  out_cas_bdl_dly         [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cas_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dq                   (  1'b0),// ts_dq          [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*CAS_MAP[11:8] + CAS_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .pdr_md                  (  remap_pdr_md            [2*(50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*CAS_MAP[11:8] + CAS_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .te_md                   (  remap_te_md             [2*(50*CAS_MAP[11:8] + 12*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] )

            );
        end

    //------------------------ we mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_we_n                [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_we_bdl_byp                                                   ),
             .out_bdl_dly             (  out_we_bdl_dly          [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_we_n                                                         ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rdqs                    (  rdqs                    [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dq                   (  1'b0),// ts_dq          [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dqs                  (  ts_dqs                  [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dqsn                 (  ts_dqsn                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_md                   (  remap_ts_md             [2*(50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*WE_MAP[11:8] + WE_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .pdr_dqsn                (  pdr_dqsn                [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .pdr_md                  (  remap_pdr_md            [2*(50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*WE_MAP[11:8] + WE_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .te_dqsn                 (  te_dqsn                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .te_md                   (  remap_te_md             [2*(50*WE_MAP[11:8] + 12*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] )

            );



    //------------------------ dm mapping -----------------------
    `ifdef USE_DM
    for (m = 0; m < DM_WIDTH; m = m + 1) begin:gen_ddr_dm
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dm                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_dm_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dm_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dm                   [8*m +:8]                                ),
             .pad                     (  ddr_dm                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : ts_dq[4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*DM_MAP[(12*m+8) +: 3] + 12*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*DM_MAP[(12*m+8) +: 3] + 12*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*DM_MAP[(12*m+8) +: 3] + 12*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] )
            );
    end
    `endif

`endif

    //------------------------ dq mapping -----------------------
    for (m = 0; m < DQ_WIDTH; m = m + 1) begin: gen_ddr_dq
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dq                  [8*m +:8]                                ),
             .in_bdl_byp              (  in_dq_bdl_byp           [m]                                      ),
             .in_bdl_dly              (  in_dq_bdl_dly           [m*8 +: 8]                               ),
             .out_bdl_byp             (  out_dq_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dq_bdl_dly          [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dq                   [8*m +:8]                                ),
             .pad                     (  ddr_dq                  [m]                                      ),
             .indd                    (  indd_dq                 [m]                                      ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : ts_dq[4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*FULL_DATA_MAP[(12*m+8) +: 3] + 12*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*FULL_DATA_MAP[(12*m+8) +: 3] + 12*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*FULL_DATA_MAP[(12*m+8) +: 3] + 12*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] )

            );
    end
    //------------------------ dqs_p mapping -----------------------
    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_ddr_dqs_t
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WL"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_WL"                                                     ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQS"                                                            ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQS"                                                            ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQS"                                                            ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dqs_p               [8*m +:8]                                ),
             .in_bdl_byp              (  in_dqs_p_bdl_byp        [m]                                      ),
             .in_bdl_dly              (  in_dqs_p_bdl_dly        [m*8 +: 8]                               ),
             .out_bdl_byp             (  out_dqs_p_bdl_byp       [m]                                      ),
             .out_bdl_dly             (  out_dqs_p_bdl_dly       [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  ),//in_dqs_p            [8*m +:8]                                ),
             .pad                     (  ddr_dqs_t               [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (  inck_p                  [m]                                      ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqs                  (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : ts_dqs[4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 12*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] ),
             .pdr                     (  pdr                     [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqs                 (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr_dqs[4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 12*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] ),
             .te                      (  te                      [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te_dqs                  (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te_dqs[4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 12*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] )

            );
    end
    //------------------------ dqs_n mapping -----------------------
    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_ddr_dqs_c
            PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WL"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_WL"                                                     ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQSN"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQSN"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQSN"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dqs_n               [8*m +:8]                                ),
             .in_bdl_byp              (  in_dqs_n_bdl_byp        [m]                                      ),
             .in_bdl_dly              (  in_dqs_n_bdl_dly        [m*8 +: 8]                               ),
             .out_bdl_byp             (  out_dqs_n_bdl_byp       [m]                                      ),
             .out_bdl_dly             (  out_dqs_n_bdl_dly       [m*8 +: 8]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  ),//in_dqs_n            [8*m +:8]                                ),
             .pad                     (  ddr_dqs_c               [m]                                      ),

             .indd                    (                                                                   ),
             .indqs                   (  inck_n                  [m]                                      ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqsn                 (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : ts_dqsn[4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .pdr                     (  pdr                     [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqsn                (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr_dqsn[4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .te                      (  te                      [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqsn                 (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te_dqsn[4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 12*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] )

            );
    end

    //------------------------ ck_p mapping -----------------------
        for (m = 0; m < CK_WIDTH; m = m + 1) begin: gen_ddr_ck_t
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_ck_p                [8*m +: 8]                               ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_ck_bdl_byp          [2*m]                                    ),
             .out_bdl_dly             (  out_ck_bdl_dly          [8*2*m +: 8]                             ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ck_t                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*CK_MAP[(12*m*2+8) +: 3] + 12*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*CK_MAP[(12*m*2+8) +: 3] + 12*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*CK_MAP[(12*m*2+8) +: 3] + 12*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] )

            );
        end
    //------------------------ ck_n mapping -----------------------
        for (m = 0; m < CK_WIDTH; m = m + 1) begin: gen_ddr_ck_c
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_ck_n                [8*m +: 8]                               ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_ck_bdl_byp          [2*m+1]                                  ),
             .out_bdl_dly             (  out_ck_bdl_dly          [8*(2*m+1) +: 8]                         ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ck_c                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_upp        (                                                                   ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_upp        (                                                                   ),
             .ts_dq                   (  ts_dq                   [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(50*CK_MAP[(12*(2*m+1)+8) +: 3] + 12*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_md                  (  remap_pdr_md            [2*(50*CK_MAP[(12*(2*m+1)+8) +: 3] + 12*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_md                   (  remap_te_md             [2*(50*CK_MAP[(12*(2*m+1)+8) +: 3] + 12*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] )

            );
        end

    //------------------------ reset_n mapping -----------------------
    `ifdef USE_RESET
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_io_rst(
             .doq                     (  out_reset_n             [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  8'd0                                                             ),
             .out_bdl_byp             (  out_reset_bdl_byp                                                ),
             .out_bdl_dly             (  out_reset_bdl_dly       [8-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_reset_n                                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rdqs                    (  rdqs                    [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dq                   (  ts_dq                   [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dqs                  (  ts_dqs                  [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dqsn                 (  ts_dqsn                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_md                   (  remap_ts_md             [2*(50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] ),
             .pdr                     (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : pdr[4*RESET_MAP[11:8] + RESET_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .pdr_dqsn                (  pdr_dqsn                [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .pdr_md                  (  remap_pdr_md            [2*(50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] ),
             .te                      (  (LOOPBACK_EN == "ENABLE") ? 1'b0 : te[4*RESET_MAP[11:8] + RESET_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .te_dqsn                 (  te_dqsn                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .te_md                   (  remap_te_md             [2*(50*RESET_MAP[11:8] + 12*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] )

            );
    `endif
endgenerate


wire[ 9:0] A_dqsgr_apb_addr0 = apb_addr[9:0];
wire       A_dqsgr_apb_clk0   = apb_clk;
wire       A_dqsgr_apb_enable0 = apb_enable;
wire       A_dqsgr_apb_error0;
wire[31:0] A_dqsgr_apb_rdata0;
wire       A_dqsgr_apb_ready0;
wire       A_dqsgr_apb_rst_n0 = apb_rst_n ;
wire       A_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel;
wire[31:0] A_dqsgr_apb_wdata0 = apb_wdata ;
wire       A_dqsgr_apb_wr_rdn0 = apb_wr_rdn;
wire       A_offcal_psel0 = (apb_addr[15:11] == 15) ? apb_sel :1'b0;

wire[ 9:0] B_dqsgr_apb_addr0 = apb_addr[9:0];
wire       B_dqsgr_apb_clk0   = apb_clk ;
wire       B_dqsgr_apb_enable0 = apb_enable;
wire       B_dqsgr_apb_error0;
wire[31:0] B_dqsgr_apb_rdata0;
wire       B_dqsgr_apb_ready0;
wire       B_dqsgr_apb_rst_n0 = apb_rst_n;
wire       B_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel;
wire[31:0] B_dqsgr_apb_wdata0 = apb_wdata;
wire       B_dqsgr_apb_wr_rdn0 = apb_wr_rdn;
wire       B_offcal_psel0 = (apb_addr[15:11] == 14) ? apb_sel :1'b0;

wire[ 9:0] C_dqsgr_apb_addr0 = apb_addr[9:0];
wire       C_dqsgr_apb_clk0   = apb_clk ;
wire       C_dqsgr_apb_enable0 = apb_enable;
wire       C_dqsgr_apb_error0;
wire[31:0] C_dqsgr_apb_rdata0;
wire       C_dqsgr_apb_ready0;
wire       C_dqsgr_apb_rst_n0 = apb_rst_n;
wire       C_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel;
wire[31:0] C_dqsgr_apb_wdata0 = apb_wdata;
wire       C_dqsgr_apb_wr_rdn0 = apb_wr_rdn;
wire       C_offcal_psel0 = (apb_addr[15:11] == 13) ? apb_sel :1'b0;

wire[ 9:0] D_dqsgr_apb_addr0 = apb_addr[9:0];
wire       D_dqsgr_apb_clk0   = apb_clk;
wire       D_dqsgr_apb_enable0 = apb_enable;
wire       D_dqsgr_apb_error0;
wire[31:0] D_dqsgr_apb_rdata0;
wire       D_dqsgr_apb_ready0;
wire       D_dqsgr_apb_rst_n0 = apb_rst_n;
wire       D_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel;
wire[31:0] D_dqsgr_apb_wdata0 = apb_wdata;
wire       D_dqsgr_apb_wr_rdn0 = apb_wr_rdn;
wire       D_offcal_psel0 = (apb_addr[15:11] == 12) ? apb_sel :1'b0;

wire[10:0] pzq_apb_addr0 = apb_addr[10:0];
wire       pzq_apb_clk0 = apb_clk;
wire       pzq_apb_enable0 = apb_enable;
wire       pzq_apb_error0;
wire[31:0] pzq_apb_rdata0;
wire       pzq_apb_rdy0;
wire       pzq_apb_rst_n0 = apb_rst_n;
wire       pzq_apb_sel0 = (apb_addr[15:11] == 3) ? apb_sel :1'b0;
wire       pzq_apb_sync_path_sel0 = apb_sync_path_sel;
wire[31:0] pzq_apb_wdata0 = apb_wdata;
wire       pzq_apb_wr_rdn0 = apb_wr_rdn;

wire[ 9:0] A_dqsgr_apb_addr1 = apb_addr[9:0];
wire       A_dqsgr_apb_clk1   = apb_clk;
wire       A_dqsgr_apb_enable1 = apb_enable;
wire       A_dqsgr_apb_error1;
wire[31:0] A_dqsgr_apb_rdata1;
wire       A_dqsgr_apb_ready1;
wire       A_dqsgr_apb_rst_n1 = apb_rst_n;
wire       A_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel;
wire[31:0] A_dqsgr_apb_wdata1 = apb_wdata;
wire       A_dqsgr_apb_wr_rdn1 = apb_wr_rdn;
wire       A_offcal_psel1 = (apb_addr[15:11] == 11) ? apb_sel :1'b0;

wire[ 9:0] B_dqsgr_apb_addr1 = apb_addr[9:0];
wire       B_dqsgr_apb_clk1   = apb_clk;
wire       B_dqsgr_apb_enable1 = apb_enable;
wire       B_dqsgr_apb_error1;
wire[31:0] B_dqsgr_apb_rdata1;
wire       B_dqsgr_apb_ready1;
wire       B_dqsgr_apb_rst_n1 = apb_rst_n;
wire       B_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel;
wire[31:0] B_dqsgr_apb_wdata1 = apb_wdata;
wire       B_dqsgr_apb_wr_rdn1 = apb_wr_rdn;
wire       B_offcal_psel1 = (apb_addr[15:11] == 10) ? apb_sel :1'b0;

wire[ 9:0] C_dqsgr_apb_addr1 = apb_addr[9:0];
wire       C_dqsgr_apb_clk1   = apb_clk;
wire       C_dqsgr_apb_enable1 = apb_enable;
wire       C_dqsgr_apb_error1;
wire[31:0] C_dqsgr_apb_rdata1;
wire       C_dqsgr_apb_ready1;
wire       C_dqsgr_apb_rst_n1 = apb_rst_n;
wire       C_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel;
wire[31:0] C_dqsgr_apb_wdata1 = apb_wdata;
wire       C_dqsgr_apb_wr_rdn1 = apb_wr_rdn;
wire       C_offcal_psel1 = (apb_addr[15:11] == 9) ? apb_sel :1'b0;

wire[ 9:0] D_dqsgr_apb_addr1 = apb_addr[9:0];
wire       D_dqsgr_apb_clk1   = apb_clk;
wire       D_dqsgr_apb_enable1 = apb_enable;
wire       D_dqsgr_apb_error1;
wire[31:0] D_dqsgr_apb_rdata1;
wire       D_dqsgr_apb_ready1;
wire       D_dqsgr_apb_rst_n1 = apb_rst_n;
wire       D_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel;
wire[31:0] D_dqsgr_apb_wdata1 = apb_wdata;
wire       D_dqsgr_apb_wr_rdn1 = apb_wr_rdn;
wire       D_offcal_psel1 = (apb_addr[15:11] == 8) ? apb_sel :1'b0;

wire[10:0] pzq_apb_addr1 = apb_addr[10:0];
wire       pzq_apb_clk1 = apb_clk;
wire       pzq_apb_enable1 = apb_enable;
wire       pzq_apb_error1;
wire[31:0] pzq_apb_rdata1;
wire       pzq_apb_rdy1;
wire       pzq_apb_rst_n1 = apb_rst_n;
wire       pzq_apb_sel1 = (apb_addr[15:11] == 2) ? apb_sel :1'b0;
wire       pzq_apb_sync_path_sel1 = apb_sync_path_sel;
wire[31:0] pzq_apb_wdata1 = apb_wdata;
wire       pzq_apb_wr_rdn1 = apb_wr_rdn;

wire[ 9:0] A_dqsgr_apb_addr2 = apb_addr[9:0];
wire       A_dqsgr_apb_clk2   = apb_clk;
wire       A_dqsgr_apb_enable2 = apb_enable;
wire       A_dqsgr_apb_error2;
wire[31:0] A_dqsgr_apb_rdata2;
wire       A_dqsgr_apb_ready2;
wire       A_dqsgr_apb_rst_n2 = apb_rst_n;
wire       A_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel;
wire[31:0] A_dqsgr_apb_wdata2 = apb_wdata;
wire       A_dqsgr_apb_wr_rdn2 = apb_wr_rdn;
wire       A_offcal_psel2 = (apb_addr[15:11] == 7) ? apb_sel :1'b0;

wire[ 9:0] B_dqsgr_apb_addr2 = apb_addr[9:0];
wire       B_dqsgr_apb_clk2   = apb_clk;
wire       B_dqsgr_apb_enable2 = apb_enable;
wire       B_dqsgr_apb_error2;
wire[31:0] B_dqsgr_apb_rdata2;
wire       B_dqsgr_apb_ready2;
wire       B_dqsgr_apb_rst_n2 = apb_rst_n;
wire       B_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel;
wire[31:0] B_dqsgr_apb_wdata2 = apb_wdata;
wire       B_dqsgr_apb_wr_rdn2 = apb_wr_rdn;
wire       B_offcal_psel2 = (apb_addr[15:11] == 6) ? apb_sel :1'b0;

wire[ 9:0] C_dqsgr_apb_addr2 = apb_addr[9:0];
wire       C_dqsgr_apb_clk2   = apb_clk;
wire       C_dqsgr_apb_enable2 = apb_enable;
wire       C_dqsgr_apb_error2;
wire[31:0] C_dqsgr_apb_rdata2;
wire       C_dqsgr_apb_ready2;
wire       C_dqsgr_apb_rst_n2 = apb_rst_n;
wire       C_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel;
wire[31:0] C_dqsgr_apb_wdata2 = apb_wdata;
wire       C_dqsgr_apb_wr_rdn2 = apb_wr_rdn;
wire       C_offcal_psel2 = (apb_addr[15:11] == 5) ? apb_sel :1'b0;

wire[ 9:0] D_dqsgr_apb_addr2   = apb_addr[9:0];
wire       D_dqsgr_apb_clk2    = apb_clk;
wire       D_dqsgr_apb_enable2 = apb_enable;
wire       D_dqsgr_apb_error2;
wire[31:0] D_dqsgr_apb_rdata2;
wire       D_dqsgr_apb_ready2;
wire       D_dqsgr_apb_rst_n2  = apb_rst_n;
wire       D_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel;
wire[31:0] D_dqsgr_apb_wdata2  = apb_wdata;
wire       D_dqsgr_apb_wr_rdn2 = apb_wr_rdn;
wire       D_offcal_psel2      = (apb_addr[15:11] == 4) ? apb_sel :1'b0;

wire[10:0] pzq_apb_addr2   = apb_addr[10:0];
wire       pzq_apb_clk2    = apb_clk;
wire       pzq_apb_enable2 = apb_enable;
wire       pzq_apb_error2;
wire[31:0] pzq_apb_rdata2;
wire       pzq_apb_rdy2;
wire       pzq_apb_rst_n2  = apb_rst_n;
wire       pzq_apb_sel2    = (apb_addr[15:11] == 1) ? apb_sel :1'b0;
wire[31:0] pzq_apb_wdata2  = apb_wdata;
wire       pzq_apb_wr_rdn2 = apb_wr_rdn;
wire       pzq_apb_sync_path_sel2 = apb_sync_path_sel;


generate
if(BYTE_LANE_0 != 0) begin: ddr_phy_4lanes_0
PH1_PHY_DDR_BANK #
(
     .ATO                             (  5                                ),
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE0               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE0               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE0               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE0               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN0                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN0                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN0                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN0                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS0           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS0           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS0           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS0           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL0                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL0                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL0                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL0                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE0                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE0                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE0                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE0                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes ( // ddr_bank_33
//outputs
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error0                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy0                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata0                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[0]        ),
     .zqcal_debug_data                (  zqcal_debug_data0[13:0]          ),
     .zqcal_done                      (  zqcal_done      [0]              ),
     .zqcal_code_o                    (  zqcal_code_o    [55:0]           ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [31:24]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [3]              ),
     .D_phy_rdata                     (  remap_phy_rdata [4*64-1:3*64]    ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status0[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[31:24]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[31:24]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[31:24]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[15:8]         ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [31:24]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[3]       ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error0               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready0               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata0               ),
     .D_debug_data                    (  dqsgr_debug_data1[63:48]         ),
     .D_delay_dto                     (  delay_dto0      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[3]          ),
     .D_offcal_done                   (  offcal_done     [3]              ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [3]              ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [7:6]            ),
     .D_delay_cal_value               (  delay_cal_value0[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out0[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [7:0]            ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [0]              ),
     .A_phy_rdata                     (  remap_phy_rdata [1*64-1:0]       ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status0[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[7:0]            ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[7:0]           ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[7:0]           ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[7:0]          ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [7:0]            ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[0]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error0               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready0               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata0               ),
     .A_debug_data                    (  dqsgr_debug_data1[15:0]          ),
     .A_delay_dto                     (  delay_dto0      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[0]          ),
     .A_offcal_done                   (  offcal_done     [0]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [0]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [1:0]            ),
     .A_delay_cal_value               (  delay_cal_value0[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out0[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [15:8]           ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [1]              ),
     .B_phy_rdata                     (  remap_phy_rdata [2*64-1:1*64]    ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status0[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[15:8]           ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[15:8]          ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[15:8]          ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [15:8]           ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[1]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error0               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready0               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata0               ),
     .B_debug_data                    (  dqsgr_debug_data0[31:16]         ),
     .B_delay_dto                     (  delay_dto0      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[1]          ),
     .B_offcal_done                   (  offcal_done     [1]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [1]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [3:2]            ),
     .B_delay_cal_value               (  delay_cal_value0[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out0[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [23:16]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [2]              ),
     .C_phy_rdata                     (  remap_phy_rdata [3*64-1:2*64]    ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status0[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[23:16]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[23:16]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[23:16]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [23:16]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[2]       ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error0               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready0               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata0               ),
     .C_debug_data                    (  dqsgr_debug_data0[47:32]         ),
     .C_delay_dto                     (  delay_dto0      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[2]          ),
     .C_offcal_done                   (  offcal_done     [2]              ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [2]              ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [5:4]            ),
     .C_delay_cal_value               (  delay_cal_value0[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out0[20:14]         ),

   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [0]              ),
     .zqcal_start                     (  zqcal_start     [0]              ),
     .zqcal_code                      (  zqcal_code      [55:0]           ),
     .pzq_vref_value_sel              (  vref_value_sel  [3:0]            ),
     .vref_ctrl_value                 (  vref_ctrl_value [55:0]           ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn0                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata0                   ),
     .pzq_apb_sel                     (  pzq_apb_sel0                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n0                   ),
     .pzq_apb_enable                  (  pzq_apb_enable0                  ),
     .pzq_apb_clk                     (  pzq_apb_clk0                     ),
     .pzq_apb_addr                    (  pzq_apb_addr0                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[0]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [0]              ),
     .pzq_atpg_mode                   (  atpg_mode0      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel0           ),
     .D_wrlvl_mode                    (  wrlvl_en        [3]              ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[3]       ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [3]              ),
     .D_delay_sel                     (  delay_sel0      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn0       [3]              ),
     .D_delay_data                    (  delay_data0     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr0    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn0              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata0               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n0               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable0              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk0                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr0                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel0                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[7:6]         ),
     .D_loopback_mode                 (  loopback_mode   [3]              ),
     .D_loopback_clk_sel              (  loopback_clk_sel[7:6]            ),
     .D_wrlvl_qin                     (  wrlvl_qin       [31:24]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [3]              ),
     .D_delay_testmode_en             (  delay_testmode_en0[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en0   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div0  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode0      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel0       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[3]        ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [3]              ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[3]        ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[3]      ),
     .D_delay_ranksel                 (  delay_ranksel0  [3]              ),
     .D_delay_gate                    (  delay_gate0     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [3]              ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank0 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[31:24]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [31:24]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [31:24]          ),
     .D_phy_loopback_en               (  loopback_en     [31:24]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[31:24]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[31:24]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [31:24]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[15:8]        ),
     .D_phy_wdata                     (  remap_phy_wdata [4*64-1:3*64]    ),
     .D_delay_cal_mode                (  delay_cal_mode0 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in0[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en0[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[3]        ),
     .D_phy_rstn_low                  (  phy_rstn_low    [3]              ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[3]        ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[3]      ),
     .D_age_toggle_en                 (  age_toggle_en   [0]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [0]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[0]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [0]              ),
     .A_delay_sel                     (  delay_sel0      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn0       [0]              ),
     .A_delay_data                    (  delay_data0     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr0    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn0              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata0               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n0               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable0              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk0                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr0                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel0                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[1:0]         ),
     .A_loopback_mode                 (  loopback_mode   [0]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[1:0]            ),
     .A_wrlvl_qin                     (  wrlvl_qin       [7:0]            ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [0]              ),
     .A_delay_testmode_en             (  delay_testmode_en0[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en0   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div0  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode0      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel0       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[0]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [0]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[0]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[0]      ),
     .A_delay_ranksel                 (  delay_ranksel0  [0]              ),
     .A_delay_gate                    (  delay_gate0     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [0]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank0 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[7:0]            ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [7:0]            ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [7:0]            ),
     .A_phy_loopback_en               (  loopback_en     [7:0]            ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[7:0]           ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[7:0]           ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [7:0]            ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[7:0]         ),
     .A_phy_wdata                     (  remap_phy_wdata [1*64-1:0]       ),
     .A_delay_cal_mode                (  delay_cal_mode0 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in0[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en0[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[0]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [0]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[0]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[0]      ),
     .A_age_toggle_en                 (  age_toggle_en   [0]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [1]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[1]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [1]              ),
     .B_delay_sel                     (  delay_sel0      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn0       [1]              ),
     .B_delay_data                    (  delay_data0     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr0    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn0              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata0               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n0               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable0              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk0                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr0                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel0                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[3:2]         ),
     .B_loopback_mode                 (  loopback_mode   [1]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[3:2]            ),
     .B_wrlvl_qin                     (  wrlvl_qin       [15:8]           ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [1]              ),
     .B_delay_testmode_en             (  delay_testmode_en0[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en0   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div0  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode0      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel0       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[1]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [1]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[1]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[1]      ),
     .B_delay_ranksel                 (  delay_ranksel0  [1]              ),
     .B_delay_gate                    (  delay_gate0     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [1]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank0 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[15:8]           ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [15:8]           ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [15:8]           ),
     .B_phy_loopback_en               (  loopback_en     [15:8]           ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[15:8]          ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[15:8]          ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [15:8]           ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [2*64-1:1*64]    ),
     .B_delay_cal_mode                (  delay_cal_mode0 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in0[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en0[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[1]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [1]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[1]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[1]      ),
     .B_age_toggle_en                 (  age_toggle_en   [0]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [2]              ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[2]       ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [2]              ),
     .C_delay_sel                     (  delay_sel0      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn0       [2]              ),
     .C_delay_data                    (  delay_data0     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr0    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn0              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata0               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n0               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable0              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk0                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr0                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel0                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[5:4]         ),
     .C_loopback_mode                 (  loopback_mode   [2]              ),
     .C_loopback_clk_sel              (  loopback_clk_sel[5:4]            ),
     .C_wrlvl_qin                     (  wrlvl_qin       [23:16]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [2]              ),
     .C_delay_testmode_en             (  delay_testmode_en0[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en0   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div0  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode0      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel0       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[2]        ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [2]              ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[2]        ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[2]      ),
     .C_delay_ranksel                 (  delay_ranksel0  [2]              ),
     .C_delay_gate                    (  delay_gate0     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [2]              ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank0 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[23:16]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [23:16]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [23:16]          ),
     .C_phy_loopback_en               (  loopback_en     [23:16]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[23:16]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[23:16]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [23:16]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [3*64-1:2*64]    ),
     .C_delay_cal_mode                (  delay_cal_mode0 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in0[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en0[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[2]        ),
     .C_phy_rstn_low                  (  phy_rstn_low    [2]              ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[2]        ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[2]      ),
     .C_age_toggle_en                 (  age_toggle_en   [0]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [0]              ),
     .pzq_user_clk                    (  pzq_user_clk    [0]              ),
     .A_ioclk                         (  A_ioclk_0                        ),
     .B_ioclk                         (  B_ioclk_0                        ),
     .C_ioclk                         (  C_ioclk_0                        ),
     .D_ioclk                         (  D_ioclk_0                        ),
     .A_user_clk                      (  hctrl_clk0      [0]              ),
     .B_user_clk                      (  hctrl_clk0      [1]              ),
     .C_user_clk                      (  hctrl_clk0      [2]              ),
     .D_user_clk                      (  hctrl_clk0      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [7:0]            ),
     .clb2phy_vref2                   (  clb2phy_vref1   [7:0]            ),
     .clb2phy_vref3                   (  clb2phy_vref2   [7:0]            ),
     .clb2phy_vref4                   (  clb2phy_vref3   [7:0]            ),

     .A_ctl_phy_clk                   (  ctl_phy_clk     [0]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [0]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [0]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [0]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [0]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [0]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [0]              ),
     .A_rdqs                          (  rdqs            [0]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [0]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[0]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[0]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[0]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[0]              ),
     .A_ts_dq                         (  ts_dq           [0]              ),
     .A_ts_dqs                        (  ts_dqs          [0]              ),
     .A_ts_dqsn                       (  ts_dqsn         [0]              ),
     .A_doq                           (  doq             [79:0]           ),
     .A_dosp                          (  dosp            [7:0]            ),
     .A_dosn                          (  dosn            [7:0]            ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [0]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [0]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [9:0]            ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [5:0]            ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [5:0]            ),
     .A_in_bdl_dly                    (  in_bdl_dly      [59:0]           ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[0]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[0]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [9:0]            ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[5:0]            ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[5:0]            ),
     .A_out_bdl_dly                   (  out_bdl_dly     [59:0]           ),
     .A_diq                           (  diq             [103:0]          ),
     .A_pdr                           (  pdr             [0]              ),
     .A_pdr_dqs                       (  pdr_dqs         [0]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [0]              ),
     .A_doq_se                        (  doq_se          [7:0]            ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [0]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [5:0]            ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [0]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [5:0]            ),
     .A_rdqs_in                       (  rdqs_in         [0]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [0]              ),
//-----------------------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [1]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [1]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [1]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [1]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [1]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [1]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [1]              ),
     .B_rdqs                          (  rdqs            [1]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [1]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[1]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[1]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[1]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[1]              ),
     .B_ts_dq                         (  ts_dq           [1]              ),
     .B_ts_dqs                        (  ts_dqs          [1]              ),
     .B_ts_dqsn                       (  ts_dqsn         [1]              ),
     .B_doq                           (  doq             [159:80]         ),
     .B_dosp                          (  dosp            [15:8]           ),
     .B_dosn                          (  dosn            [15:8]           ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [1]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [1]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [19:10]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [11:6]           ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [11:6]           ),
     .B_in_bdl_dly                    (  in_bdl_dly      [119:60]         ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[1]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[1]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [19:10]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[11:6]           ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[11:6]           ),
     .B_out_bdl_dly                   (  out_bdl_dly     [119:60]         ),
     .B_diq                           (  diq             [199:104]        ),
     .B_pdr                           (  pdr             [1]              ),
     .B_pdr_dqs                       (  pdr_dqs         [1]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [1]              ),
     .B_rdqs_in                       (  rdqs_in         [1]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [1]              ),
 //------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [2]              ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [2]              ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [2]              ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [2]              ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [2]              ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [2]              ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [2]              ),
     .C_rdqs                          (  rdqs            [2]              ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [2]              ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[2]              ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[2]              ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[2]              ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[2]              ),
     .C_ts_dq                         (  ts_dq           [2]              ),
     .C_ts_dqs                        (  ts_dqs          [2]              ),
     .C_ts_dqsn                       (  ts_dqsn         [2]              ),
     .C_doq                           (  doq             [239:160]        ),
     .C_dosp                          (  dosp            [23:16]          ),
     .C_dosn                          (  dosn            [23:16]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [2]              ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [2]              ),
     .C_in_bdl_byp                    (  in_bdl_byp      [29:20]          ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [17:12]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [17:12]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [179:120]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[2]              ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[2]              ),
     .C_out_bdl_byp                   (  out_bdl_byp     [29:20]          ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[17:12]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[17:12]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [179:120]        ),
     .C_diq                           (  diq             [295:200]        ),
     .C_pdr                           (  pdr             [2]              ),
     .C_pdr_dqs                       (  pdr_dqs         [2]              ),
     .C_pdr_dqsn                      (  pdr_dqsn        [2]              ),
     .C_rdqs_in                       (  rdqs_in         [2]              ),
     .C_rdqs_n_in                     (  rdqs_n_in       [2]              ),
//----------------------------------------------------------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [3]              ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [3]              ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [3]              ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [3]              ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [3]              ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [3]              ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [3]              ),
     .D_rdqs                          (  rdqs            [3]              ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [3]              ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[3]              ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[3]              ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[3]              ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[3]              ),
     .D_ts_dq                         (  ts_dq           [3]              ),
     .D_ts_dqs                        (  ts_dqs          [3]              ),
     .D_ts_dqsn                       (  ts_dqsn         [3]              ),
     .D_doq                           (  doq             [319:240]        ),
     .D_dosp                          (  dosp            [31:24]          ),
     .D_dosn                          (  dosn            [31:24]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [3]              ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [3]              ),
     .D_in_bdl_byp                    (  in_bdl_byp      [39:30]          ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [23:18]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [23:18]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [239:180]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[3]              ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[3]              ),
     .D_out_bdl_byp                   (  out_bdl_byp     [39:30]          ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[23:18]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[23:18]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [239:180]        ),
     .D_diq                           (  diq             [399:296]        ),
     .D_pdr                           (  pdr             [3]              ),
     .D_pdr_dqs                       (  pdr_dqs         [3]              ),
     .D_pdr_dqsn                      (  pdr_dqsn        [3]              ),
     .D_doq_se                        (  doq_se          [15:8]           ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [1]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [11:6]           ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [1]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [11:6]           ),
     .D_rdqs_in                       (  rdqs_in         [3]              ),
     .D_rdqs_n_in                     (  rdqs_n_in       [3]              ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [19:0]           ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [1:0]            ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [1:0]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [39:20]          ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [3:2]            ),
     .C_dq_pdr_md                     (  dq_pdr_md       [59:40]          ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [5:4]            ),
     .D_dq_pdr_md                     (  dq_pdr_md       [79:60]          ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [7:6]            ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [3:2]            ),
     .A_dq_ts_md                      (  dq_ts_md        [19:0]           ),
     .A_dqs_ts_md                     (  dqs_ts_md       [1:0]            ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [1:0]            ),
     .B_dq_ts_md                      (  dq_ts_md        [39:20]          ),
     .B_dqs_ts_md                     (  dqs_ts_md       [3:2]            ),
     .C_dq_ts_md                      (  dq_ts_md        [59:40]          ),
     .C_dqs_ts_md                     (  dqs_ts_md       [5:4]            ),
     .D_dq_ts_md                      (  dq_ts_md        [79:60]          ),
     .D_dqs_ts_md                     (  dqs_ts_md       [7:6]            ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [3:2]            ),
     .A_te_dq                         (  te              [0]              ),
     .A_te_dqs                        (  te_dqs          [0]              ),
     .A_te_dqsn                       (  te_dqsn         [0]              ),
     .B_te_dq                         (  te              [1]              ),
     .B_te_dqs                        (  te_dqs          [1]              ),
     .B_te_dqsn                       (  te_dqsn         [1]              ),
     .C_te_dq                         (  te              [2]              ),
     .C_te_dqs                        (  te_dqs          [2]              ),
     .C_te_dqsn                       (  te_dqsn         [2]              ),
     .D_te_dq                         (  te              [3]              ),
     .D_te_dqs                        (  te_dqs          [3]              ),
     .D_te_dqsn                       (  te_dqsn         [3]              ),
     .A_dq_te_md                      (  dq_te_md        [19:0]           ),
     .A_dqs_te_md                     (  dqs_te_md       [1:0]            ),
     .A_dq_se_te_md                   (  dq_se_te_md     [1:0]            ),
     .B_dq_te_md                      (  dq_te_md        [39:20]          ),
     .B_dqs_te_md                     (  dqs_te_md       [3:2]            ),
     .C_dq_te_md                      (  dq_te_md        [59:40]          ),
     .C_dqs_te_md                     (  dqs_te_md       [5:4]            ),
     .D_dq_te_md                      (  dq_te_md        [79:60]          ),
     .D_dqs_te_md                     (  dqs_te_md       [7:6]            ),
     .D_dq_se_te_md                   (  dq_se_te_md     [3:2]            ),

     .A_lclk                          (  lclk_0                           ),
     .B_lclk                          (  lclk_0                           ),
     .C_lclk                          (  lclk_0                           ),
     .D_lclk                          (  lclk_0                           )

);
end

if(BYTE_LANE_1 != 0) begin: ddr_phy_4lanes_1
PH1_PHY_DDR_BANK #
(
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE1               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE1               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE1               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE1               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN1                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN1                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN1                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN1                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS1           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS1           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS1           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS1           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL1                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL1                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL1                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL1                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE1                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE1                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE1                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE1                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes (  // ddr_bank_32
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error1                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy1                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata1                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[1]        ),
     .zqcal_debug_data                (  zqcal_debug_data1[13:0]          ),
     .zqcal_done                      (  zqcal_done      [1]              ),
     .zqcal_code_o                    (  zqcal_code_o    [111:56]         ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [63:56]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [7]              ),
     .D_phy_rdata                     (  remap_phy_rdata [8*64-1:7*64]    ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status1[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[63:56]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[63:56]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[63:56]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[31:24]        ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [63:56]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[7]       ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error1               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready1               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata1               ),
     .D_debug_data                    (  dqsgr_debug_data2[63:48]         ),
     .D_delay_dto                     (  delay_dto1      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[7]          ),
     .D_offcal_done                   (  offcal_done     [7]              ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [7]              ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [15:14]          ),
     .D_delay_cal_value               (  delay_cal_value1[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out1[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [39:32]          ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [4]              ),
     .A_phy_rdata                     (  remap_phy_rdata [5*64-1:4*64]    ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status1[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[39:32]          ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[39:32]         ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[39:32]         ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[23:16]        ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [39:32]          ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[4]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error1               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready1               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata1               ),
     .A_debug_data                    (  dqsgr_debug_data2[15:0]          ),
     .A_delay_dto                     (  delay_dto1      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[4]          ),
     .A_offcal_done                   (  offcal_done     [4]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [4]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [9:8]            ),
     .A_delay_cal_value               (  delay_cal_value1[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out1[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [47:40]          ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [5]              ),
     .B_phy_rdata                     (  remap_phy_rdata [6*64-1:5*64]    ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status1[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[47:40]          ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[47:40]         ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[47:40]         ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [47:40]          ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[5]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error1               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready1               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata1               ),
     .B_debug_data                    (  dqsgr_debug_data1[31:16]         ),
     .B_delay_dto                     (  delay_dto1      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[5]          ),
     .B_offcal_done                   (  offcal_done     [5]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [5]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [11:10]          ),
     .B_delay_cal_value               (  delay_cal_value1[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out1[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [55:48]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [6]              ),
     .C_phy_rdata                     (  remap_phy_rdata [7*64-1:6*64]    ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status1[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[55:48]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[55:48]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[55:48]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [55:48]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[6]       ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error1               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready1               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata1               ),
     .C_debug_data                    (  dqsgr_debug_data1[47:32]         ),
     .C_delay_dto                     (  delay_dto1      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[6]          ),
     .C_offcal_done                   (  offcal_done     [6]              ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [6]              ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [13:12]          ),
     .C_delay_cal_value               (  delay_cal_value1[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out1[20:14]         ),
   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [1]              ),
     .zqcal_start                     (  zqcal_start     [1]              ),
     .zqcal_code                      (  zqcal_code      [111:56]         ),
     .pzq_vref_value_sel              (  vref_value_sel  [7:4]            ),
     .vref_ctrl_value                 (  vref_ctrl_value [111:56]         ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn1                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata1                   ),
     .pzq_apb_sel                     (  pzq_apb_sel1                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n1                   ),
     .pzq_apb_enable                  (  pzq_apb_enable1                  ),
     .pzq_apb_clk                     (  pzq_apb_clk1                     ),
     .pzq_apb_addr                    (  pzq_apb_addr1                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[0]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [1]              ),
     .pzq_atpg_mode                   (  atpg_mode1      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel1           ),
     .D_wrlvl_mode                    (  wrlvl_en        [7]              ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[7]       ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [3]              ),
     .D_delay_sel                     (  delay_sel1      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn1       [3]              ),
     .D_delay_data                    (  delay_data1     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr1    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn1              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata1               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n1               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable1              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk1                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr1                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel1                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[15:14]       ),
     .D_loopback_mode                 (  loopback_mode   [7]              ),
     .D_loopback_clk_sel              (  loopback_clk_sel[15:14]          ),
     .D_wrlvl_qin                     (  wrlvl_qin       [63:56]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [7]              ),
     .D_delay_testmode_en             (  delay_testmode_en1[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en1   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div1  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode1      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel1       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[7]        ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [7]              ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[7]        ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[7]      ),
     .D_delay_ranksel                 (  delay_ranksel1  [3]              ),
     .D_delay_gate                    (  delay_gate1     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [7]              ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank1 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[63:56]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [63:56]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [63:56]          ),
     .D_phy_loopback_en               (  loopback_en     [63:56]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[63:56]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[63:56]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [63:56]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[31:24]       ),
     .D_phy_wdata                     (  remap_phy_wdata [8*64-1:7*64]    ),
     .D_delay_cal_mode                (  delay_cal_mode1 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in1[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en1[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[7]        ),
     .D_phy_rstn_low                  (  phy_rstn_low    [7]              ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[7]        ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[7]      ),
     .D_age_toggle_en                 (  age_toggle_en   [1]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [4]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[4]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [0]              ),
     .A_delay_sel                     (  delay_sel1      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn1       [0]              ),
     .A_delay_data                    (  delay_data1     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr1    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn1              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata1               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n1               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable1              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk1                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr1                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel1                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[9:8]         ),
     .A_loopback_mode                 (  loopback_mode   [4]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[9:8]            ),
     .A_wrlvl_qin                     (  wrlvl_qin       [39:32]          ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [4]              ),
     .A_delay_testmode_en             (  delay_testmode_en1[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en1   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div1  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode1      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel1       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[4]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [4]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[4]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[4]      ),
     .A_delay_ranksel                 (  delay_ranksel1  [0]              ),
     .A_delay_gate                    (  delay_gate1     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [4]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank1 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[39:32]          ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [39:32]          ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [39:32]          ),
     .A_phy_loopback_en               (  loopback_en     [39:32]          ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[39:32]         ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[39:32]         ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [39:32]          ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[23:16]       ),
     .A_phy_wdata                     (  remap_phy_wdata [5*64-1:4*64]    ),
     .A_delay_cal_mode                (  delay_cal_mode1 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in1[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en1[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[4]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [4]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[4]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[4]      ),
     .A_age_toggle_en                 (  age_toggle_en   [1]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [5]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[5]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [1]              ),
     .B_delay_sel                     (  delay_sel1      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn1       [1]              ),
     .B_delay_data                    (  delay_data1     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr1    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn1              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata1               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n1               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable1              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk1                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr1                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel1                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[11:10]       ),
     .B_loopback_mode                 (  loopback_mode   [5]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[11:10]          ),
     .B_wrlvl_qin                     (  wrlvl_qin       [47:40]          ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [5]              ),
     .B_delay_testmode_en             (  delay_testmode_en1[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en1   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div1  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode1      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel1       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[5]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [5]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[5]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[5]      ),
     .B_delay_ranksel                 (  delay_ranksel1  [2]              ),
     .B_delay_gate                    (  delay_gate1     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [5]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank1 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[47:40]          ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [47:40]          ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [47:40]          ),
     .B_phy_loopback_en               (  loopback_en     [47:40]          ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[47:40]         ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[47:40]         ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [47:40]          ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [6*64-1:5*64]    ),
     .B_delay_cal_mode                (  delay_cal_mode1 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in1[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en1[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[5]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [5]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[5]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[5]      ),
     .B_age_toggle_en                 (  age_toggle_en   [1]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [6]              ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[6]       ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [2]              ),
     .C_delay_sel                     (  delay_sel1      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn1       [2]              ),
     .C_delay_data                    (  delay_data1     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr1    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn1              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata1               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n1               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable1              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk1                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr1                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel1                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[13:12]       ),
     .C_loopback_mode                 (  loopback_mode   [6]              ),
     .C_loopback_clk_sel              (  loopback_clk_sel[13:12]          ),
     .C_wrlvl_qin                     (  wrlvl_qin       [55:48]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [6]              ),
     .C_delay_testmode_en             (  delay_testmode_en1[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en1   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div1  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode1      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel1       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[6]        ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [6]              ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[6]        ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[6]      ),
     .C_delay_ranksel                 (  delay_ranksel1  [2]              ),
     .C_delay_gate                    (  delay_gate1     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [6]              ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank1 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[55:48]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [55:48]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [55:48]          ),
     .C_phy_loopback_en               (  loopback_en     [55:48]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[55:48]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[55:48]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [55:48]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [7*64-1:6*64]    ),
     .C_delay_cal_mode                (  delay_cal_mode1 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in1[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en1[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[6]        ),
     .C_phy_rstn_low                  (  phy_rstn_low    [6]              ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[6]        ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[6]      ),
     .C_age_toggle_en                 (  age_toggle_en   [1]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [1]              ),
     .pzq_user_clk                    (  pzq_user_clk    [1]              ),
     .A_ioclk                         (  A_ioclk_1                        ),
     .B_ioclk                         (  B_ioclk_1                        ),
     .C_ioclk                         (  C_ioclk_1                        ),
     .D_ioclk                         (  D_ioclk_1                        ),
     .A_user_clk                      (  hctrl_clk1      [0]              ),
     .B_user_clk                      (  hctrl_clk1      [1]              ),
     .C_user_clk                      (  hctrl_clk1      [2]              ),
     .D_user_clk                      (  hctrl_clk1      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [15:8]           ),
     .clb2phy_vref2                   (  clb2phy_vref1   [15:8]           ),
     .clb2phy_vref3                   (  clb2phy_vref2   [15:8]           ),
     .clb2phy_vref4                   (  clb2phy_vref3   [15:8]           ),
     .A_ctl_phy_clk                   (  ctl_phy_clk     [4]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [4]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [4]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [4]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [4]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [4]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [4]              ),
     .A_rdqs                          (  rdqs            [4]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [4]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[4]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[4]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[4]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[4]              ),
     .A_ts_dq                         (  ts_dq           [4]              ),
     .A_ts_dqs                        (  ts_dqs          [4]              ),
     .A_ts_dqsn                       (  ts_dqsn         [4]              ),
     .A_doq                           (  doq             [399:320]        ),
     .A_dosp                          (  dosp            [39:32]          ),
     .A_dosn                          (  dosn            [39:32]          ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [4]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [4]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [49:40]          ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [29:24]          ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [29:24]          ),
     .A_in_bdl_dly                    (  in_bdl_dly      [299:240]        ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[4]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[4]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [49:40]          ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[29:24]          ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[29:24]          ),
     .A_out_bdl_dly                   (  out_bdl_dly     [299:240]        ),
     .A_diq                           (  diq             [503:400]        ),
     .A_pdr                           (  pdr             [4]              ),
     .A_pdr_dqs                       (  pdr_dqs         [4]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [4]              ),
     .A_doq_se                        (  doq_se          [23:16]          ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [2]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [17:12]          ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [2]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [17:12]          ),
     .A_rdqs_in                       (  rdqs_in         [4]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [4]              ),
   //--------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [5]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [5]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [5]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [5]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [5]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [5]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [5]              ),
     .B_rdqs                          (  rdqs            [5]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [5]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[5]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[5]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[5]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[5]              ),
     .B_ts_dq                         (  ts_dq           [5]              ),
     .B_ts_dqs                        (  ts_dqs          [5]              ),
     .B_ts_dqsn                       (  ts_dqsn         [5]              ),
     .B_doq                           (  doq             [479:400]        ),
     .B_dosp                          (  dosp            [47:40]          ),
     .B_dosn                          (  dosn            [47:40]          ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [5]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [5]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [59:50]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [35:30]          ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [35:30]          ),
     .B_in_bdl_dly                    (  in_bdl_dly      [359:300]        ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[5]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[5]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [59:50]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[35:30]          ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[35:30]          ),
     .B_out_bdl_dly                   (  out_bdl_dly     [359:300]        ),
     .B_diq                           (  diq             [599:504]        ),
     .B_pdr                           (  pdr             [5]              ),
     .B_pdr_dqs                       (  pdr_dqs         [5]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [5]              ),
     .B_rdqs_in                       (  rdqs_in         [5]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [5]              ),
   //---------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [6]              ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [6]              ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [6]              ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [6]              ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [6]              ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [6]              ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [6]              ),
     .C_rdqs                          (  rdqs            [6]              ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [6]              ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[6]              ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[6]              ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[6]              ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[6]              ),
     .C_ts_dq                         (  ts_dq           [6]              ),
     .C_ts_dqs                        (  ts_dqs          [6]              ),
     .C_ts_dqsn                       (  ts_dqsn         [6]              ),
     .C_doq                           (  doq             [559:480]        ),
     .C_dosp                          (  dosp            [55:48]          ),
     .C_dosn                          (  dosn            [55:48]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [6]              ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [6]              ),
     .C_in_bdl_byp                    (  in_bdl_byp      [69:60]          ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [41:36]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [41:36]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [419:360]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[6]              ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[6]              ),
     .C_out_bdl_byp                   (  out_bdl_byp     [69:60]          ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[41:36]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[41:36]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [419:360]        ),
     .C_diq                           (  diq             [695:600]        ),
     .C_pdr                           (  pdr             [6]              ),
     .C_pdr_dqs                       (  pdr_dqs         [6]              ),
     .C_pdr_dqsn                      (  pdr_dqsn        [6]              ),
     .C_rdqs_in                       (  rdqs_in         [6]              ),
     .C_rdqs_n_in                     (  rdqs_n_in       [6]              ),
   //--------------------------4lanes_1---------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [7]              ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [7]              ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [7]              ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [7]              ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [7]              ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [7]              ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [7]              ),
     .D_rdqs                          (  rdqs            [7]              ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [7]              ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[7]              ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[7]              ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[7]              ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[7]              ),
     .D_ts_dq                         (  ts_dq           [7]              ),
     .D_ts_dqs                        (  ts_dqs          [7]              ),
     .D_ts_dqsn                       (  ts_dqsn         [7]              ),
     .D_doq                           (  doq             [639:560]        ),
     .D_dosp                          (  dosp            [63:56]          ),
     .D_dosn                          (  dosn            [63:56]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [7]              ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [7]              ),
     .D_in_bdl_byp                    (  in_bdl_byp      [79:70]          ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [47:42]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [47:42]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [479:420]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[7]              ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[7]              ),
     .D_out_bdl_byp                   (  out_bdl_byp     [79:70]          ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[47:42]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[47:42]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [479:420]        ),
     .D_diq                           (  diq             [799:696]        ),
     .D_pdr                           (  pdr             [7]              ),
     .D_pdr_dqs                       (  pdr_dqs         [7]              ),
     .D_pdr_dqsn                      (  pdr_dqsn        [7]              ),
     .D_doq_se                        (  doq_se          [31:24]          ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [3]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [23:18]          ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [3]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [23:18]          ),
     .D_rdqs_in                       (  rdqs_in         [7]              ),
     .D_rdqs_n_in                     (  rdqs_n_in       [7]              ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [99:80]          ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [9:8]            ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [5:4]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [119:100]        ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [11:10]          ),
     .C_dq_pdr_md                     (  dq_pdr_md       [139:120]        ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [13:12]          ),
     .D_dq_pdr_md                     (  dq_pdr_md       [159:140]        ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [15:14]          ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [7:6]            ),
     .A_dq_ts_md                      (  dq_ts_md        [99:80]          ),
     .A_dqs_ts_md                     (  dqs_ts_md       [9:8]            ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [5:4]            ),
     .B_dq_ts_md                      (  dq_ts_md        [119:100]        ),
     .B_dqs_ts_md                     (  dqs_ts_md       [11:10]          ),
     .C_dq_ts_md                      (  dq_ts_md        [139:120]        ),
     .C_dqs_ts_md                     (  dqs_ts_md       [13:12]          ),
     .D_dq_ts_md                      (  dq_ts_md        [159:140]        ),
     .D_dqs_ts_md                     (  dqs_ts_md       [15:14]          ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [7:6]            ),
     .A_te_dq                         (  te              [4]              ),
     .A_te_dqs                        (  te_dqs          [4]              ),
     .A_te_dqsn                       (  te_dqsn         [4]              ),
     .B_te_dq                         (  te              [5]              ),
     .B_te_dqs                        (  te_dqs          [5]              ),
     .B_te_dqsn                       (  te_dqsn         [5]              ),
     .C_te_dq                         (  te              [6]              ),
     .C_te_dqs                        (  te_dqs          [6]              ),
     .C_te_dqsn                       (  te_dqsn         [6]              ),
     .D_te_dq                         (  te              [7]              ),
     .D_te_dqs                        (  te_dqs          [7]              ),
     .D_te_dqsn                       (  te_dqsn         [7]              ),
     .A_dq_te_md                      (  dq_te_md        [99:80]          ),
     .A_dqs_te_md                     (  dqs_te_md       [9:8]            ),
     .A_dq_se_te_md                   (  dq_se_te_md     [5:4]            ),
     .B_dq_te_md                      (  dq_te_md        [119:100]        ),
     .B_dqs_te_md                     (  dqs_te_md       [11:10]          ),
     .C_dq_te_md                      (  dq_te_md        [139:120]        ),
     .C_dqs_te_md                     (  dqs_te_md       [13:12]          ),
     .D_dq_te_md                      (  dq_te_md        [159:140]        ),
     .D_dqs_te_md                     (  dqs_te_md       [15:14]          ),
     .D_dq_se_te_md                   (  dq_se_te_md     [7:6]            ),
     .A_lclk                          (  lclk_1                           ),
     .B_lclk                          (  lclk_1                           ),
     .C_lclk                          (  lclk_1                           ),
     .D_lclk                          (  lclk_1                           )

);
end

if(BYTE_LANE_2 != 0) begin: ddr_phy_4lanes_2
PH1_PHY_DDR_BANK #(
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE2               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE2               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE2               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE2               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN2                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN2                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN2                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN2                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS2           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS2           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS2           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS2           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL2                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL2                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL2                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL2                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE2                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE2                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE2                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE2                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes (  // ddr_bank_31
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error2                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy2                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata2                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[2]        ),
     .zqcal_debug_data                (  zqcal_debug_data2[13:0]          ),
     .zqcal_done                      (  zqcal_done      [2]              ),
     .zqcal_code_o                    (  zqcal_code_o    [167:112]        ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [95:88]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [11]             ),
     .D_phy_rdata                     (  remap_phy_rdata [12*64-1:11*64]  ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status2[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[95:88]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[95:88]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[95:88]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[47:40]        ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [95:88]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[11]      ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error2               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready2               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata2               ),
     .D_debug_data                    (  dqsgr_debug_data0[63:48]         ),
     .D_delay_dto                     (  delay_dto2      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[11]         ),
     .D_offcal_done                   (  offcal_done     [11]             ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [11]             ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [23:22]          ),
     .D_delay_cal_value               (  delay_cal_value2[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out2[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [71:64]          ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [8]              ),
     .A_phy_rdata                     (  remap_phy_rdata [9*64-1:8*64]    ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status2[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[71:64]          ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[71:64]         ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[71:64]         ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[39:32]        ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [71:64]          ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[8]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error2               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready2               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata2               ),
     .A_debug_data                    (  dqsgr_debug_data0[15:0]          ),
     .A_delay_dto                     (  delay_dto2      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[8]          ),
     .A_offcal_done                   (  offcal_done     [8]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [8]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [17:16]          ),
     .A_delay_cal_value               (  delay_cal_value2[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out2[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [79:72]          ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [9]              ),
     .B_phy_rdata                     (  remap_phy_rdata [10*64-1:9*64]   ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status2[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[79:72]          ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[79:72]         ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[79:72]         ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [79:72]          ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[9]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error2               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready2               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata2               ),
     .B_debug_data                    (  dqsgr_debug_data2[31:16]         ),
     .B_delay_dto                     (  delay_dto2      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[9]          ),
     .B_offcal_done                   (  offcal_done     [9]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [9]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [19:18]          ),
     .B_delay_cal_value               (  delay_cal_value2[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out2[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [87:80]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [10]             ),
     .C_phy_rdata                     (  remap_phy_rdata [11*64-1:10*64]  ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status2[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[87:80]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[87:80]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[87:80]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [87:80]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[10]      ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error2               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready2               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata2               ),
     .C_debug_data                    (  dqsgr_debug_data2[47:32]         ),
     .C_delay_dto                     (  delay_dto2      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[10]         ),
     .C_offcal_done                   (  offcal_done     [10]             ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [10]             ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [21:20]          ),
     .C_delay_cal_value               (  delay_cal_value2[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out2[20:14]         ),

   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [2]              ),
     .zqcal_start                     (  zqcal_start     [2]              ),
     .zqcal_code                      (  zqcal_code      [167:112]        ),
     .pzq_vref_value_sel              (  vref_value_sel  [11:8]           ),
     .vref_ctrl_value                 (  vref_ctrl_value [167:112]        ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn2                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata2                   ),
     .pzq_apb_sel                     (  pzq_apb_sel2                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n2                   ),
     .pzq_apb_enable                  (  pzq_apb_enable2                  ),
     .pzq_apb_clk                     (  pzq_apb_clk2                     ),
     .pzq_apb_addr                    (  pzq_apb_addr2                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[2]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [2]              ),
     .pzq_atpg_mode                   (  atpg_mode2      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel2           ),
     .D_wrlvl_mode                    (  wrlvl_en        [11]             ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[11]      ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [3]              ),
     .D_delay_sel                     (  delay_sel2      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn2       [3]              ),
     .D_delay_data                    (  delay_data2     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr2    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn2              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata2               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n2               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable2              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk2                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr2                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel2                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[23:22]       ),
     .D_loopback_mode                 (  loopback_mode   [11]             ),
     .D_loopback_clk_sel              (  loopback_clk_sel[23:22]          ),
     .D_wrlvl_qin                     (  wrlvl_qin       [95:88]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [11]             ),
     .D_delay_testmode_en             (  delay_testmode_en2[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en2   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div2  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode2      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel2       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[11]       ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [11]             ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[11]       ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[11]     ),
     .D_delay_ranksel                 (  delay_ranksel2  [3]              ),
     .D_delay_gate                    (  delay_gate2     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [11]             ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank2 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[95:88]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [95:88]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [95:88]          ),
     .D_phy_loopback_en               (  loopback_en     [95:88]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[95:88]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[95:88]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [95:88]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[47:40]       ),
     .D_phy_wdata                     (  remap_phy_wdata [12*64-1:11*64]  ),
     .D_delay_cal_mode                (  delay_cal_mode2 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in2[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en2[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[11]       ),
     .D_phy_rstn_low                  (  phy_rstn_low    [11]             ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[11]       ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[11]     ),
     .D_age_toggle_en                 (  age_toggle_en   [2]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [8]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[8]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [0]              ),
     .A_delay_sel                     (  delay_sel2      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn2       [0]              ),
     .A_delay_data                    (  delay_data2     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr2    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn2              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata2               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n2               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable2              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk2                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr2                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel2                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[17:16]       ),
     .A_loopback_mode                 (  loopback_mode   [8]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[17:16]          ),
     .A_wrlvl_qin                     (  wrlvl_qin       [71:64]          ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [8]              ),
     .A_delay_testmode_en             (  delay_testmode_en2[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en2   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div2  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode2      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel2       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[8]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [8]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[8]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[8]      ),
     .A_delay_ranksel                 (  delay_ranksel2  [0]              ),
     .A_delay_gate                    (  delay_gate2     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [8]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank2 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[71:64]          ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [71:64]          ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [71:64]          ),
     .A_phy_loopback_en               (  loopback_en     [71:64]          ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[71:64]         ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[71:64]         ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [71:64]          ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[39:32]       ),
     .A_phy_wdata                     (  remap_phy_wdata [9*64-1:8*64]    ),
     .A_delay_cal_mode                (  delay_cal_mode2 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in2[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en2[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[8]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [8]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[8]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[8]      ),
     .A_age_toggle_en                 (  age_toggle_en   [2]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [9]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[9]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [1]              ),
     .B_delay_sel                     (  delay_sel2      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn2       [1]              ),
     .B_delay_data                    (  delay_data2     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr2    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn2              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata2               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n2               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable2              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk2                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr2                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel2                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[19:18]       ),
     .B_loopback_mode                 (  loopback_mode   [9]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[19:18]          ),
     .B_wrlvl_qin                     (  wrlvl_qin       [79:72]          ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [9]              ),
     .B_delay_testmode_en             (  delay_testmode_en2[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en2   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div2  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode2      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel2       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[9]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [9]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[9]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[9]      ),
     .B_delay_ranksel                 (  delay_ranksel2  [1]              ),
     .B_delay_gate                    (  delay_gate2     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [9]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank2 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[79:72]          ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [79:72]          ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [79:72]          ),
     .B_phy_loopback_en               (  loopback_en     [79:72]          ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[79:72]         ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[79:72]         ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [79:72]          ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [10*64-1:9*64]   ),
     .B_delay_cal_mode                (  delay_cal_mode2 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in2[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en2[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[9]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [9]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[9]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[9]      ),
     .B_age_toggle_en                 (  age_toggle_en   [2]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [10]             ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[10]      ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [2]              ),
     .C_delay_sel                     (  delay_sel2      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn2       [2]              ),
     .C_delay_data                    (  delay_data2     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr2    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn2              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata2               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n2               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable2              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk2                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr2                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel2                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[21:20]       ),
     .C_loopback_mode                 (  loopback_mode   [10]             ),
     .C_loopback_clk_sel              (  loopback_clk_sel[21:20]          ),
     .C_wrlvl_qin                     (  wrlvl_qin       [87:80]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [10]             ),
     .C_delay_testmode_en             (  delay_testmode_en2[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en2   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div2  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode2      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel2       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[10]       ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [10]             ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[10]       ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[10]     ),
     .C_delay_ranksel                 (  delay_ranksel2  [2]              ),
     .C_delay_gate                    (  delay_gate2     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [10]             ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank2 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[87:80]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [87:80]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [87:80]          ),
     .C_phy_loopback_en               (  loopback_en     [87:80]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[87:80]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[87:80]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [87:80]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [11*64-1:10*64]  ),
     .C_delay_cal_mode                (  delay_cal_mode2 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in2[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en2[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[10]       ),
     .C_phy_rstn_low                  (  phy_rstn_low    [10]             ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[10]       ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[10]     ),
     .C_age_toggle_en                 (  age_toggle_en   [2]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [2]              ),
     .pzq_user_clk                    (  pzq_user_clk    [2]              ),
     .A_ioclk                         (  A_ioclk_2                        ),
     .B_ioclk                         (  B_ioclk_2                        ),
     .C_ioclk                         (  C_ioclk_2                        ),
     .D_ioclk                         (  D_ioclk_2                        ),
     .A_user_clk                      (  hctrl_clk2      [0]              ),
     .B_user_clk                      (  hctrl_clk2      [1]              ),
     .C_user_clk                      (  hctrl_clk2      [2]              ),
     .D_user_clk                      (  hctrl_clk2      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [23:16]          ),
     .clb2phy_vref2                   (  clb2phy_vref1   [23:16]          ),
     .clb2phy_vref3                   (  clb2phy_vref2   [23:16]          ),
     .clb2phy_vref4                   (  clb2phy_vref3   [23:16]          ),
   //-------------------------4lane_2-----------------------------------
     .A_ctl_phy_clk                   (  ctl_phy_clk     [8]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [8]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [8]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [8]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [8]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [8]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [8]              ),
     .A_rdqs                          (  rdqs            [8]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [8]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[8]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[8]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[8]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[8]              ),
     .A_ts_dq                         (  ts_dq           [8]              ),
     .A_ts_dqs                        (  ts_dqs          [8]              ),
     .A_ts_dqsn                       (  ts_dqsn         [8]              ),
     .A_doq                           (  doq             [719:640]        ),
     .A_dosp                          (  dosp            [71:64]          ),
     .A_dosn                          (  dosn            [71:64]          ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [8]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [8]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [89:80]          ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [53:48]          ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [53:48]          ),
     .A_in_bdl_dly                    (  in_bdl_dly      [539:480]        ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[8]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[8]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [89:80]          ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[53:48]          ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[53:48]          ),
     .A_out_bdl_dly                   (  out_bdl_dly     [539:480]        ),
     .A_diq                           (  diq             [903:800]        ),
     .A_pdr                           (  pdr             [8]              ),
     .A_pdr_dqs                       (  pdr_dqs         [8]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [8]              ),
     .A_doq_se                        (  doq_se          [39:32]          ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [4]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [29:24]          ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [4]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [29:24]          ),
     .A_rdqs_in                       (  rdqs_in         [8]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [8]              ),
   //----------------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [9]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [9]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [9]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [9]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [9]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [9]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [9]              ),
     .B_rdqs                          (  rdqs            [9]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [9]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[9]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[9]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[9]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[9]              ),
     .B_ts_dq                         (  ts_dq           [9]              ),
     .B_ts_dqs                        (  ts_dqs          [9]              ),
     .B_ts_dqsn                       (  ts_dqsn         [9]              ),
     .B_doq                           (  doq             [799:720]        ),
     .B_dosp                          (  dosp            [79:72]          ),
     .B_dosn                          (  dosn            [79:72]          ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [9]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [9]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [99:90]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [59:54]          ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [59:54]          ),
     .B_in_bdl_dly                    (  in_bdl_dly      [599:540]        ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[9]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[9]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [99:90]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[59:54]          ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[59:54]          ),
     .B_out_bdl_dly                   (  out_bdl_dly     [599:540]        ),
     .B_diq                           (  diq             [999:904]        ),
     .B_pdr                           (  pdr             [9]              ),
     .B_pdr_dqs                       (  pdr_dqs         [9]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [9]              ),
     .B_rdqs_in                       (  rdqs_in         [9]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [9]              ),
   //-------------------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [10]             ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [10]             ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [10]             ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [10]             ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [10]             ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [10]             ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [10]             ),
     .C_rdqs                          (  rdqs            [10]             ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [10]             ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[10]             ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[10]             ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[10]             ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[10]             ),
     .C_ts_dq                         (  ts_dq           [10]             ),
     .C_ts_dqs                        (  ts_dqs          [10]             ),
     .C_ts_dqsn                       (  ts_dqsn         [10]             ),
     .C_doq                           (  doq             [879:800]        ),
     .C_dosp                          (  dosp            [87:80]          ),
     .C_dosn                          (  dosn            [87:80]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [10]             ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [10]             ),
     .C_in_bdl_byp                    (  in_bdl_byp      [109:100]        ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [65:60]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [65:60]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [659:600]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[10]             ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[10]             ),
     .C_out_bdl_byp                   (  out_bdl_byp     [109:100]        ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[65:60]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[65:60]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [659:600]        ),
     .C_diq                           (  diq             [1095:1000]      ),
     .C_pdr                           (  pdr             [10]             ),
     .C_pdr_dqs                       (  pdr_dqs         [10]             ),
     .C_pdr_dqsn                      (  pdr_dqsn        [10]             ),
     .C_rdqs_in                       (  rdqs_in         [10]             ),
     .C_rdqs_n_in                     (  rdqs_n_in       [10]             ),
   //-----------------------------------------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [11]             ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [11]             ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [11]             ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [11]             ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [11]             ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [11]             ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [11]             ),
     .D_rdqs                          (  rdqs            [11]             ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [11]             ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[11]             ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[11]             ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[11]             ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[11]             ),
     .D_ts_dq                         (  ts_dq           [11]             ),
     .D_ts_dqs                        (  ts_dqs          [11]             ),
     .D_ts_dqsn                       (  ts_dqsn         [11]             ),
     .D_doq                           (  doq             [959:880]        ),
     .D_dosp                          (  dosp            [95:88]          ),
     .D_dosn                          (  dosn            [95:88]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [11]             ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [11]             ),
     .D_in_bdl_byp                    (  in_bdl_byp      [119:110]        ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [71:66]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [71:66]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [719:660]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[11]             ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[11]             ),
     .D_out_bdl_byp                   (  out_bdl_byp     [119:110]        ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[71:66]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[71:66]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [719:660]        ),
     .D_diq                           (  diq             [1199:1096]      ),
     .D_pdr                           (  pdr             [11]             ),
     .D_pdr_dqs                       (  pdr_dqs         [11]             ),
     .D_pdr_dqsn                      (  pdr_dqsn        [11]             ),
     .D_doq_se                        (  doq_se          [47:40]          ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [5]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [35:30]          ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [5]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [35:30]          ),
     .D_rdqs_in                       (  rdqs_in         [11]             ),
     .D_rdqs_n_in                     (  rdqs_n_in       [11]             ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [179:160]        ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [17:16]          ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [9:8]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [199:180]        ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [19:18]          ),
     .C_dq_pdr_md                     (  dq_pdr_md       [219:200]        ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [21:20]          ),
     .D_dq_pdr_md                     (  dq_pdr_md       [239:220]        ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [23:22]          ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [11:10]          ),
     .A_dq_ts_md                      (  dq_ts_md        [179:160]        ),
     .A_dqs_ts_md                     (  dqs_ts_md       [17:16]          ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [9:8]            ),
     .B_dq_ts_md                      (  dq_ts_md        [199:180]        ),
     .B_dqs_ts_md                     (  dqs_ts_md       [19:18]          ),
     .C_dq_ts_md                      (  dq_ts_md        [219:200]        ),
     .C_dqs_ts_md                     (  dqs_ts_md       [21:20]          ),
     .D_dq_ts_md                      (  dq_ts_md        [239:220]        ),
     .D_dqs_ts_md                     (  dqs_ts_md       [23:22]          ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [11:10]          ),
     .A_te_dq                         (  te              [8]              ),
     .A_te_dqs                        (  te_dqs          [8]              ),
     .A_te_dqsn                       (  te_dqsn         [8]              ),
     .B_te_dq                         (  te              [9]              ),
     .B_te_dqs                        (  te_dqs          [9]              ),
     .B_te_dqsn                       (  te_dqsn         [9]              ),
     .C_te_dq                         (  te              [10]             ),
     .C_te_dqs                        (  te_dqs          [10]             ),
     .C_te_dqsn                       (  te_dqsn         [10]             ),
     .D_te_dq                         (  te              [11]             ),
     .D_te_dqs                        (  te_dqs          [11]             ),
     .D_te_dqsn                       (  te_dqsn         [11]             ),
     .A_dq_te_md                      (  dq_te_md        [179:160]        ),
     .A_dqs_te_md                     (  dqs_te_md       [17:16]          ),
     .A_dq_se_te_md                   (  dq_se_te_md     [9:8]            ),
     .B_dq_te_md                      (  dq_te_md        [199:180]        ),
     .B_dqs_te_md                     (  dqs_te_md       [19:18]          ),
     .C_dq_te_md                      (  dq_te_md        [219:200]        ),
     .C_dqs_te_md                     (  dqs_te_md       [21:20]          ),
     .D_dq_te_md                      (  dq_te_md        [239:220]        ),
     .D_dqs_te_md                     (  dqs_te_md       [23:22]          ),
     .D_dq_se_te_md                   (  dq_se_te_md     [11:10]          ),
     .A_lclk                          (  lclk_2                           ),
     .B_lclk                          (  lclk_2                           ),
     .C_lclk                          (  lclk_2                           ),
     .D_lclk                          (  lclk_2                           )


);
end
endgenerate



assign apb_error =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_error0     :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_error1     :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_error2     : 1'b0;

assign apb_rdata =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_rdata0     :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_rdata1     :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_rdata2     : 32'd0;

assign apb_ready =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_rdy0       :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_rdy1       :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_rdy2       : 1'b1;


endmodule


`timescale 1ps/1ps

module ph1_logic_dfi_bus_adjust #(
    parameter ADDR_WIDTH            = 17,   // DRAM address bus width
    parameter ROW_WIDTH             = 17,   // DRAM address bus width
    parameter COL_WIDTH             = 12,   // column address width
    parameter BANK_WIDTH            = 2,
`ifdef DRAM_DDR4
    parameter BG_WIDTH              = 1,
`endif
    parameter ODT_WIDTH             = 1,
    parameter CK_WIDTH              = 1,    // # of CK/CK# outputs to memory
    parameter CKE_WIDTH             = 1,    // # of cke outputs
    parameter CS_WIDTH              = 1,    // # of unique CS outputs
    parameter DQ_WIDTH              = 8,
    parameter DQS_WIDTH             = 1,    // # of DQS (strobe)
    parameter DM_WIDTH              = 1

)(
    input      [                    3:0]    dfi_reset_n_temp,
    input      [        CKE_WIDTH*4-1:0]    dfi_cke_temp,
    input      [        ODT_WIDTH*4-1:0]    dfi_odt_temp,
    input      [        CS_WIDTH *4-1:0]    dfi_cs_n_temp,
    input      [                    3:0]    dfi_ras_n_temp,
    input      [                    3:0]    dfi_cas_n_temp,
    input      [                    3:0]    dfi_we_n_temp,
`ifdef DRAM_DDR4
    input      [         BG_WIDTH*4-1:0]    dfi_bg_temp,
    input      [                    3:0]    dfi_act_n_temp,     
    input      [                    3:0]    dfi_parity_in_temp,
    output reg [                    3:0]    dfi_alert_n_temp,
`endif

    input      [       BANK_WIDTH*4-1:0]    dfi_bank_temp,
    input      [       ADDR_WIDTH*4-1:0]    dfi_address_temp,
    input      [        DQS_WIDTH*4-1:0]    dfi_wrdata_en_temp,
    input      [         DQ_WIDTH*8-1:0]    dfi_wrdata_temp,
    input      [         DM_WIDTH*8-1:0]    dfi_wrdata_mask_temp,
    input      [        DQS_WIDTH*4-1:0]    dfi_rddata_en_temp, 
    output reg [        DQS_WIDTH*4-1:0]    dfi_rddata_valid_temp,
    output reg [         DQ_WIDTH*8-1:0]    dfi_rddata_temp,
    output reg [         DM_WIDTH*8-1:0]    dfi_rddata_dbi_n_temp,
    
    output reg [  3:0]    dfi_reset_n,
    output reg [  7:0]    dfi_cke,
    output reg [  7:0]    dfi_odt,
    output reg [  7:0]    dfi_cs_n,
    output reg [  3:0]    dfi_act_n,
    output reg [  3:0]    dfi_ras_n,
    output reg [  3:0]    dfi_cas_n,
    output reg [  3:0]    dfi_we_n,
    output reg [  7:0]    dfi_bg,
    output reg [ 11:0]    dfi_bank,
    output reg [ 71:0]    dfi_address,
    output reg [ 35:0]    dfi_wrdata_en,
    output reg [575:0]    dfi_wrdata,
    output reg [ 71:0]    dfi_wrdata_mask,
    output reg [  3:0]    dfi_parity_in,
    output reg [ 35:0]    dfi_rddata_en,

    input      [ 35:0]    dfi_rddata_valid,
    input      [575:0]    dfi_rddata,
    input      [ 71:0]    dfi_rddata_dbi_n,
    input      [  3:0]    dfi_alert_n

);


integer a,b;
always @(*)
begin:collect_block

    dfi_reset_n             = dfi_reset_n_temp;
    dfi_cke                 = 8'hff; 
    dfi_odt                 = 8'd0; 
    dfi_cs_n                = 8'hff; 
`ifdef DRAM_DDR4
    dfi_act_n               = dfi_act_n_temp;
`else
    dfi_act_n               =4'hf;
`endif
    dfi_ras_n               = dfi_ras_n_temp;
    dfi_cas_n               = dfi_cas_n_temp;
    dfi_we_n                = dfi_we_n_temp;
    dfi_bg                  = 8  'd0;
    dfi_bank                = 12 'd0;
    dfi_address             = 72 'd0;
    dfi_wrdata_en           = 36 'd0;
    dfi_wrdata              = 576'd0;
    dfi_wrdata_mask         = 72 'hff_ffff_ffff_ffff_ffff;
    dfi_rddata_en           = 36 'd0;
    dfi_rddata_valid_temp   = 36 'd0;
    dfi_rddata_temp         = 576'd0;
    dfi_rddata_dbi_n_temp   = 72 'hff_ffff_ffff_ffff_ffff;
    dfi_parity_in           = 4  'd0;
`ifdef DRAM_DDR4
    dfi_alert_n_temp        = 4  'hf; 
`endif


    for(a=0; a<4; a=a+1) // a: phase;  b: width 
    begin
        
        for(b=0; b<CKE_WIDTH ; b=b+1) dfi_cke        [ a*2  + b] = dfi_cke_temp       [ a*CKE_WIDTH  + b];
        for(b=0; b<ODT_WIDTH ; b=b+1) dfi_odt        [ a*2  + b] = dfi_odt_temp       [ a*ODT_WIDTH  + b];
        for(b=0; b<CS_WIDTH  ; b=b+1) dfi_cs_n       [ a*2  + b] = dfi_cs_n_temp      [ a*CS_WIDTH   + b];
        for(b=0; b<ADDR_WIDTH; b=b+1) dfi_address    [ a*18 + b] = dfi_address_temp   [ a*ADDR_WIDTH + b];
        for(b=0; b<BANK_WIDTH; b=b+1) dfi_bank       [ a*3  + b] = dfi_bank_temp      [ a*BANK_WIDTH + b];
        
        `ifdef DRAM_DDR4
            for(b=0;       b<BG_WIDTH; b=b+1) dfi_bg          [ a*2  + b] = dfi_bg_temp        [ a*BG_WIDTH + b];
            for(b=0;              b<1; b=b+1) dfi_parity_in   [ a*1  + b] = dfi_parity_in_temp [ a*1 + b];
            for(b=0;              b<1; b=b+1) dfi_alert_n_temp[ a*1  + b] = dfi_alert_n        [ a*1 + b];
        `endif
    
        `ifdef USE_PING_PONG_PHY
            for(b=0; b<DQS_WIDTH; b=b+1)
            begin
                 if( b < (DQS_WIDTH/2) )
                 begin
                    dfi_wrdata_en         [        a*9  + b] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_en         [        a*9  + b] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_valid_temp [a*DQS_WIDTH  + b] = dfi_rddata_valid   [  a*9 + b];
                end
                else
                begin
                    dfi_wrdata_en         [a*9  + (4+b-(DQS_WIDTH/2))] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_en         [a*9  + (4+b-(DQS_WIDTH/2))] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_valid_temp [          a*DQS_WIDTH  + b] = dfi_rddata_valid   [ a*9 + (4+b-(DQS_WIDTH/2))];
                end
            end
        `else
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_wrdata_en        [        a*9  + b] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_rddata_en        [        a*9  + b] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_rddata_valid_temp[a*DQS_WIDTH  + b] = dfi_rddata_valid   [ a*9         + b];
        `endif
    end

    for(a=0; a<8; a=a+1) //2*4phase
    begin
        `ifdef USE_PING_PONG_PHY
             for(b=0; b<DQ_WIDTH; b=b+1)  
             begin
                 if(b < (DQ_WIDTH/2))
                 begin
                     dfi_wrdata     [      a*72 +b] = dfi_wrdata_temp[a*DQ_WIDTH + b];
                     dfi_rddata_temp[a*DQ_WIDTH +b] = dfi_rddata     [      a*72 + b];
                 end
                 else
                 begin
                     dfi_wrdata     [a*72 +(4*8+b-(DQ_WIDTH/2))] = dfi_wrdata_temp [a*DQ_WIDTH + b];
                     dfi_rddata_temp[             a*DQ_WIDTH +b] = dfi_rddata      [a*72 + (4*8+b-(DQ_WIDTH/2))];
                 end
             end 
                  
             for(b=0; b<DM_WIDTH; b=b+1)
             begin
                 if(b < (DM_WIDTH/2))
                 begin
                     dfi_wrdata_mask       [a*9  +(4+b-(DM_WIDTH/2))] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
                     dfi_rddata_dbi_n_temp [a*DM_WIDTH +b]            = dfi_rddata_dbi_n       [a*9  + (4+b-(DM_WIDTH/2))];
                 end
                 else
                 begin
                     dfi_wrdata_mask       [      a*9  +b] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
                     dfi_rddata_dbi_n_temp [a*DM_WIDTH +b] = dfi_rddata_dbi_n       [      a*9  + b];
                 end
             end
        `else      
            
            for(b=0; b<DQ_WIDTH; b=b+1)   dfi_wrdata            [      a*72 +b] = dfi_wrdata_temp        [a*DQ_WIDTH + b];
            for(b=0; b<DM_WIDTH; b=b+1)   dfi_wrdata_mask       [      a*9  +b] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
            for(b=0; b<DQ_WIDTH; b=b+1)   dfi_rddata_temp       [a*DQ_WIDTH +b] = dfi_rddata             [      a*72 + b];
            for(b=0; b<DM_WIDTH; b=b+1)   dfi_rddata_dbi_n_temp [a*DM_WIDTH +b] = dfi_rddata_dbi_n       [      a*9  + b];
 
        `endif
    end

end

endmodule

`timescale 1ps / 1ps
`ifdef DFI_FIFO


module ph1_logic_generic_async_fifo #(
    parameter    DATA_WIDTH    = 8,
    parameter    ADDR_WIDTH    = 16,
    parameter    SHOW_AHEAD_EN = 0,
    parameter    U_DLY         = 100
)(
    // input
    rrst, wrst, clkw, clkr, we, re, di,
    // output
    dout, full_flag, empty_flag
);

input                       rrst       ;
input                       wrst       ;
input                       we         ;
input      [DATA_WIDTH-1:0] di         ; //synthesis keep
input                       re         ;
input                       clkr       ;
input                       clkw       ;
output reg                  full_flag  ; //synthesis keep
output     [DATA_WIDTH-1:0] dout       ; //synthesis keep
output reg                  empty_flag ; //synthesis keep

wire  [ADDR_WIDTH  :0]      rdusedw;//synthesis keep
wire  [ADDR_WIDTH  :0]      wrusedw;//synthesis keep

reg   [ADDR_WIDTH-1:0]      rd_addr; // extend RAM address for sync
reg   [ADDR_WIDTH-1:0]      wr_addr;

/* sync registers */
reg   [ADDR_WIDTH  :0]      sync_w2r_r1,sync_w2r_r2;
reg   [ADDR_WIDTH  :0]      sync_r2w_r1,sync_r2w_r2;

wire  [ADDR_WIDTH  :0]      sync_rd_addr;
wire  [ADDR_WIDTH  :0]      sync_wr_addr;
reg   [ADDR_WIDTH  :0]      gray_rd_addr;
reg   [ADDR_WIDTH  :0]      gray_wr_addr;
wire  [ADDR_WIDTH  :0]      shift_rd_addr;
wire  [ADDR_WIDTH  :0]      shift_wr_addr;

wire                        fifo_empty;//synthesis keep
wire                        fifo_full ;//synthesis keep

wire  [ADDR_WIDTH  :0]      rd_addr_next;
wire  [ADDR_WIDTH  :0]      gray_rd_addr_next;
wire  [ADDR_WIDTH  :0]      wr_addr_next;
wire  [ADDR_WIDTH  :0]      gray_wr_addr_next;

assign shift_rd_addr =  rd_addr_next;
assign shift_wr_addr =  wr_addr_next;

assign rd_addr_next = (re ? (rd_addr + 1'b1) : rd_addr);
assign wr_addr_next = (we ? (wr_addr + 1'b1) : wr_addr);

/* binary to gray */
assign gray_rd_addr_next = (shift_rd_addr >> 1) ^ shift_rd_addr;

/* binary to gray */
assign gray_wr_addr_next = (shift_wr_addr >> 1) ^ shift_wr_addr;

assign fifo_empty = (gray_rd_addr[ADDR_WIDTH:0] == sync_w2r_r2[ADDR_WIDTH:0]) ? 1'b1 : 1'b0 ;

assign fifo_full = (gray_wr_addr[ADDR_WIDTH:0] == {~sync_r2w_r2[ADDR_WIDTH:ADDR_WIDTH-1], sync_r2w_r2[ADDR_WIDTH-2:0]}) ? 1'b1 : 1'b0 ;

PH1_LOGIC_DRAM #(
    .DATA_WIDTH_W (DATA_WIDTH   ),
    .DATA_WIDTH_R (DATA_WIDTH   ),
    .ADDR_WIDTH_W (ADDR_WIDTH   ),
    .ADDR_WIDTH_R (ADDR_WIDTH   ),
    .DATA_DEPTH_W (2**ADDR_WIDTH),
    .DATA_DEPTH_R (2**ADDR_WIDTH),
    .INIT_FILE    ("NONE"       ),
    .READREG      ("NOREG"      ),
    .RESETMODE    ("SYNC"       )
) inst (
    .di    ( di   ),
    .waddr ( wr_addr[ADDR_WIDTH-1:0] ),
    .raddr ( rd_addr[ADDR_WIDTH-1:0]+ (SHOW_AHEAD_EN & re) ),
    .we    ( we   ),
    .rce   ((SHOW_AHEAD_EN == 1'b1) ? 1'b1 : re ),
    .wclk  ( clkw ),
    .rclk  ( clkr ),
    .rrst  ( 1'b0 ),
    .rdoq  (      ),
    .rdo   ( dout )
);


always @ (*)
begin
    empty_flag <= fifo_empty;
end

always @ (*)
begin
    full_flag <= fifo_full;
end

/* rd addr generation */
always @ (posedge clkr or posedge rrst)
begin
    if ( rrst ) begin
        rd_addr <= 'b0;
        gray_rd_addr <= 'b0;
    end else begin
        rd_addr <= #U_DLY rd_addr_next;
        gray_rd_addr <= #U_DLY gray_rd_addr_next;
    end
end

/* wr addr generation */
always @ (posedge clkw or posedge wrst)
begin
    if ( wrst ) begin
        wr_addr <= 'b0;
        gray_wr_addr <= 'b0;
    end else begin
        wr_addr <= #U_DLY wr_addr_next;
        gray_wr_addr <= #U_DLY gray_wr_addr_next;
    end
end


/* sync rd_addr to wr_clk */
always @ (posedge clkw or posedge wrst)
begin
    if ( wrst ) begin
        sync_r2w_r1 <= 'd0;
        sync_r2w_r2 <= 'd0;
    end else begin
        sync_r2w_r1 <= #U_DLY gray_rd_addr;
        sync_r2w_r2 <= #U_DLY sync_r2w_r1;
    end
end

/* sync wr_addr to rd_clk */
always@(posedge clkr or posedge rrst)
begin
    if( rrst ) begin
        sync_w2r_r1 <= 'd0;
        sync_w2r_r2 <= 'd0;
    end else begin
        sync_w2r_r1 <= #U_DLY gray_wr_addr ;
        sync_w2r_r2 <= #U_DLY sync_w2r_r1;
    end
end


endmodule

`endif


`timescale 1ps/1ps 
module ph1_logic_apb_mux_1_3 #(
  parameter  PADDR_SIZE = 16,
  parameter  PDATA_SIZE = 32,
  parameter  SLAVES     = 3
) (

    // APB master
    input                      mst_psel,
    input  [PADDR_SIZE -1 : 0] mst_paddr,
    output [PDATA_SIZE -1 : 0] mst_prdata,
    output                     mst_pready,
    output                     mst_pslverr,

    // APB slaves
    output [             SLAVES - 1 : 0] slv_psel   ,
    input  [PDATA_SIZE * SLAVES - 1 : 0] slv_prdata ,
    input  [             SLAVES - 1 : 0] slv_pready ,
    input  [             SLAVES - 1 : 0] slv_pslverr
);
//////////////////////////////////////////////////////////////////
//
// Variables
//
wire [PDATA_SIZE * SLAVES - 1:0] prdata;
wire [             SLAVES - 1:0] pready;
wire [             SLAVES - 1:0] pslverr;
wire [PDATA_SIZE * SLAVES - 1:0] prdata_switched;

wire [PADDR_SIZE * SLAVES - 1:0] slv_mask;

assign slv_mask[PADDR_SIZE * 0 +: PADDR_SIZE] = 16'hf800;
assign slv_mask[PADDR_SIZE * 1 +: PADDR_SIZE] = 16'h7800;
assign slv_mask[PADDR_SIZE * 2 +: PADDR_SIZE] = 16'h8000;

genvar s,b;

//////////////////////////////////////////////////////////////////
//
// Module Body
//

assign slv_psel[0] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 0 +: PADDR_SIZE]) == 16'h0000 );
assign slv_psel[1] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 1 +: PADDR_SIZE]) != 16'h0000 );
assign slv_psel[2] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 2 +: PADDR_SIZE]) == 16'h8000 );

generate
    for (s=0;s<SLAVES;s=s+1)
    begin: aa
        /* Mux slave responses */
        assign prdata [PDATA_SIZE * s +: PDATA_SIZE] = slv_prdata[PDATA_SIZE * s +: PDATA_SIZE] & {PDATA_SIZE{slv_psel[s]}};
        assign pready [s] = slv_pready [s] & slv_psel[s];
        assign pslverr[s] = slv_pslverr[s] & slv_psel[s];
    end
endgenerate

generate
  for (s=0; s<SLAVES; s=s+1)
  begin: bb
      for (b=0; b<PDATA_SIZE; b=b+1)
      begin: cc
          assign prdata_switched[SLAVES * b + s] = prdata[PDATA_SIZE * s + b];
      end
  end

  for (b=0;b<PDATA_SIZE;b=b+1)
  begin: dd
      assign mst_prdata[b] = |prdata_switched[SLAVES * b +: SLAVES];
  end
endgenerate

assign mst_pready  = |pready;
assign mst_pslverr = |pslverr;

endmodule
`default_nettype none  // turn off implicit data types
`ifdef USE_EFFICIENCY_EQUALIZER
`timescale 1ps/1ps

module ph1_logic_ddrphy_gate_gen_glue #(
   parameter   pDX8_NUM                     = 9
             , pNO_OF_LRANKS                = 2
             , pNO_OF_RANKS                 = 2

             , pNO_OF_DX_DQS                = 1  // number of DQS signals per DX macro
             , pNUM_LANES                   = pDX8_NUM * pNO_OF_DX_DQS   // Number of independent lanes
             , pNUM_BEATS                   = 8  // 4 beats per word
             , pDGSL_WIDTH                  = 5

             // PUB DFI widths
             , pPUB_DFI_NO_OF_CMDS          = 4   // Num commands per (ctl) cycle

             // PUB Lane DFI widths
             , pPLN_DFI_NO_OF_CMDS          = 4   // Num commands per (ctl) cycle
             , pPLN_DFI_DATA_EN_WIDTH       = (pPLN_DFI_NO_OF_CMDS/2 * 1)

             // DFI Port Configuration
             , pM81_MEMCTL_NO_OF_CMDS       = 4
             , pCTL_DFI_CMD_WIDTH           = 2
             , pM81_MEMCTL_CS_N_WIDTH       = (pM81_MEMCTL_NO_OF_CMDS * pNO_OF_RANKS)
             , pM81_MEMCTL_ACT_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_RAS_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_CAS_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_WE_N_WIDTH       = (pM81_MEMCTL_NO_OF_CMDS * 1)

             , pM81_MEMCTL_RDDATA_EN_WIDTH  = (pM81_MEMCTL_NO_OF_CMDS * pNUM_LANES)
             , pCTL_DFI_NO_OF_CMDS          = 2
             , pCTL_DFI_DATA_EN_WIDTH       = (pCTL_DFI_NO_OF_CMDS * pNUM_LANES)

             , pDGSL_WIDTH_INT              = pDGSL_WIDTH - 2
 )(
    input  wire                                            ctl_clk
  , input  wire                                            ctl_rst_n
  , input  wire  [pM81_MEMCTL_CS_N_WIDTH      -1 : 0]      dfi_cs_n
  , input  wire  [pM81_MEMCTL_ACT_N_WIDTH     -1 : 0]      dfi_act_n
  , input  wire  [pM81_MEMCTL_RAS_N_WIDTH     -1 : 0]      dfi_ras_n
  , input  wire  [pM81_MEMCTL_CAS_N_WIDTH     -1 : 0]      dfi_cas_n
  , input  wire  [pM81_MEMCTL_WE_N_WIDTH      -1 : 0]      dfi_we_n
  , input  wire  [pM81_MEMCTL_RDDATA_EN_WIDTH -1 : 0]      dfi_rddata_en

  , input  wire  [pNUM_LANES * 8              -1 : 0]      gate_ctl_qs_en
  , output wire  [pNUM_LANES * 8              -1 : 0]      phy_ctl_qs_en

  , input  wire                        apb_clk
  , input  wire                        apb_rst_n
  , output wire                        apb_ready
  , input  wire                        apb_enable
  , input  wire                        apb_sel
  , input  wire                        apb_wr_rdn
  , input  wire [15:0]                 apb_addr
  , output wire [31:0]                 apb_rdata
  , input  wire [31:0]                 apb_wdata
  , output wire                        apb_error

);
/***********************************************************************************/
localparam pDDR_SHFT_WIDTH           = 2; // width of DDR shift
localparam pTCK_RSL_RWIDTH           = (pNO_OF_LRANKS * pDGSL_WIDTH_INT);
localparam pDDR_SHFT_RWIDTH          = (pNO_OF_LRANKS * pDDR_SHFT_WIDTH);
localparam pTCK_RSL_LRWIDTH          = (pNUM_LANES * pNO_OF_LRANKS * pDGSL_WIDTH_INT);
localparam pDDR_SHFT_LRWIDTH         = (pNUM_LANES * pNO_OF_LRANKS * pDDR_SHFT_WIDTH);
localparam pDDR4_MODE  = 3'b100;

integer                                 lrank_id;
integer                                 lane_idx;
integer                                 cmd_idx;

/************************************************************************************/
// signals from MCU
reg                                                    cfg_glue_en                   ;
reg  [2:0]                                             cfg_ddr_mode                  ;
reg  [3 :0]                                            cfg_bl_rddata_en_pipe_sel_pre ;
reg  [5 :0]                                            cfg_bl_tphy_rddata_en         ;
reg                                                    cfg_mc_perrank_dfi_en         ;
reg                                                    cfg_mc_shrac_dual_chn_mode    ;
reg  [pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS -1 : 0] cfg_mc_gdqs_rsl               ;

reg                                                    mcu_glue_en                   ;
reg  [2:0]                                             mcu_ddr_mode                  ;
reg  [3 :0]                                            mcu_bl_rddata_en_pipe_sel_pre ;
reg  [5 :0]                                            mcu_bl_tphy_rddata_en         ;
reg                                                    mcu_mc_perrank_dfi_en         ;
reg                                                    mcu_mc_shrac_dual_chn_mode    ;
reg  [pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS -1 : 0] mcu_mc_gdqs_rsl               ;

wire  apb_wr_flag ;
/************************************************************************************/

// DFI interface
reg  [pPLN_DFI_DATA_EN_WIDTH       - 1 : 0] dfi_rddata_en_l   [pNUM_LANES - 1 : 0];
reg  [pPLN_DFI_DATA_EN_WIDTH       - 1 : 0] dfi_rddata_en_h   [pNUM_LANES - 1 : 0];

reg  [pTCK_RSL_LRWIDTH             - 1 : 0] gdqs_rsl_per_lane;
reg  [pDDR_SHFT_LRWIDTH            - 1 : 0] gdqs_ddr_shift_per_lane;


wire [pNUM_LANES * pNUM_BEATS - 1 : 0] m81_ctl_qs_en;
reg  [pNUM_LANES * pNUM_BEATS - 1 : 0] ctl_qs_en_glue;

reg  [pCTL_DFI_DATA_EN_WIDTH  - 1 : 0] m81_dfi_rddata_en_l, m81_dfi_rddata_en_h;

reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_ras_n;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_cas_n;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_we_n;

reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_ras_n_r;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_cas_n_r;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_we_n_r;
reg  [8           - 1 : 0] dfi_cs_n_r;

wire ddr4_mode   = (cfg_ddr_mode == pDDR4_MODE);

/*************************************************************************************************/
assign apb_wr_flag = apb_wr_rdn ? ( apb_sel & apb_enable ) : 1'b0 ;
assign apb_ready   =  1'b1 ;
assign apb_error   =  1'b0 ;
assign apb_rdata   = 32'h0 ;

always @ ( posedge apb_clk )
begin
    if (apb_rst_n == 1'b0) begin
        mcu_glue_en                   <= 1'b0 ;
        mcu_ddr_mode                  <= pDDR4_MODE ;
        mcu_bl_rddata_en_pipe_sel_pre <= 4'h0 ;
        mcu_bl_tphy_rddata_en         <= 6'h0 ;
        mcu_mc_perrank_dfi_en         <= 1'b0 ;
        mcu_mc_shrac_dual_chn_mode    <= 1'b0 ;
        mcu_mc_gdqs_rsl               <= {(pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS){1'b0}} ;
    end else if ( apb_wr_flag == 1'b1 ) begin
        case (apb_addr[7:0])
            8'h00 : mcu_glue_en                   <= apb_wdata[0];
            8'h01 : mcu_ddr_mode                  <= apb_wdata[2:0];
            8'h02 : mcu_bl_rddata_en_pipe_sel_pre <= apb_wdata[3:0];
            8'h03 : mcu_bl_tphy_rddata_en         <= apb_wdata[5:0];
            8'h04 : mcu_mc_perrank_dfi_en         <= apb_wdata[0];
            8'h05 : mcu_mc_shrac_dual_chn_mode    <= apb_wdata[0];
            8'h10 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 0 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 0 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h11 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 1 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 1 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h12 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 2 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 2 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h13 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 3 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 3 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h14 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 4 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 4 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h15 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 5 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 5 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h16 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 6 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 6 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h17 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 7 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 7 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h18 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 8 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 8 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            default : begin
                mcu_glue_en                   <= mcu_glue_en                   ;
                mcu_ddr_mode                  <= mcu_ddr_mode                  ;
                mcu_bl_rddata_en_pipe_sel_pre <= mcu_bl_rddata_en_pipe_sel_pre ;
                mcu_bl_tphy_rddata_en         <= mcu_bl_tphy_rddata_en         ;
                mcu_mc_perrank_dfi_en         <= mcu_mc_perrank_dfi_en         ;
                mcu_mc_shrac_dual_chn_mode    <= mcu_mc_shrac_dual_chn_mode    ;
                mcu_mc_gdqs_rsl               <= mcu_mc_gdqs_rsl               ;
            end
        endcase 
    end
end


always @(posedge ctl_clk or negedge ctl_rst_n) begin
    cfg_glue_en                   <= mcu_glue_en                   ;
    cfg_ddr_mode                  <= mcu_ddr_mode                  ;
    cfg_bl_rddata_en_pipe_sel_pre <= mcu_bl_rddata_en_pipe_sel_pre ;
    cfg_bl_tphy_rddata_en         <= mcu_bl_tphy_rddata_en         ;
    cfg_mc_perrank_dfi_en         <= mcu_mc_perrank_dfi_en         ;
    cfg_mc_shrac_dual_chn_mode    <= mcu_mc_shrac_dual_chn_mode    ;
    cfg_mc_gdqs_rsl               <= mcu_mc_gdqs_rsl               ;
end
/*************************************************************************************************/
always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      ctl_qs_en_glue    <= {(pNUM_LANES * pNUM_BEATS){1'b1}};
    end else begin
      ctl_qs_en_glue    <= m81_ctl_qs_en ;
    end
end

assign phy_ctl_qs_en = cfg_glue_en ? (ctl_qs_en_glue & gate_ctl_qs_en) : gate_ctl_qs_en;


always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
       for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
         for (lrank_id = 0; lrank_id < pNO_OF_LRANKS; lrank_id = lrank_id + 1) begin
           gdqs_rsl_per_lane      [(pNO_OF_LRANKS * pDGSL_WIDTH_INT * lane_idx) + (lrank_id * pDGSL_WIDTH_INT) +: pDGSL_WIDTH_INT] <= {pDGSL_WIDTH_INT{1'b0}};
           gdqs_ddr_shift_per_lane[(pNO_OF_LRANKS * pDDR_SHFT_WIDTH * lane_idx) + (lrank_id * pDDR_SHFT_WIDTH) +: pDDR_SHFT_WIDTH] <= {pDDR_SHFT_WIDTH{1'b0}};
         end
       end
    end else begin
       for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
         for (lrank_id = 0; lrank_id < pNO_OF_LRANKS; lrank_id = lrank_id + 1) begin
           gdqs_rsl_per_lane      [(pNO_OF_LRANKS * pDGSL_WIDTH_INT * lane_idx) + (lrank_id * pDGSL_WIDTH_INT) +: pDGSL_WIDTH_INT] <= cfg_mc_gdqs_rsl [(pNUM_LANES * pDGSL_WIDTH     * lrank_id) + ((lane_idx * pDGSL_WIDTH)+2 ) +: pDGSL_WIDTH_INT];
           gdqs_ddr_shift_per_lane[(pNO_OF_LRANKS * pDDR_SHFT_WIDTH * lane_idx) + (lrank_id * pDDR_SHFT_WIDTH) +: pDDR_SHFT_WIDTH] <= cfg_mc_gdqs_rsl [(pNUM_LANES * pDGSL_WIDTH     * lrank_id) +  (lane_idx * pDGSL_WIDTH    ) +: pDDR_SHFT_WIDTH];
         end
       end
     end
end  // end always

  always @(posedge ctl_clk, negedge ctl_rst_n)
    if (ctl_rst_n == 1'b0) begin
      m81_dfi_rddata_en_l <= {pCTL_DFI_DATA_EN_WIDTH{1'b0}};
      m81_dfi_rddata_en_h <= {pCTL_DFI_DATA_EN_WIDTH{1'b0}};
    end else begin
      m81_dfi_rddata_en_l <= dfi_rddata_en[0 +: pCTL_DFI_DATA_EN_WIDTH];
      m81_dfi_rddata_en_h <= dfi_rddata_en[pCTL_DFI_DATA_EN_WIDTH +: pCTL_DFI_DATA_EN_WIDTH];
    end

  always @* begin : proc_dfi_read_data
    for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
      for (cmd_idx = 0; cmd_idx < pPUB_DFI_NO_OF_CMDS/2; cmd_idx = cmd_idx + 1) begin
        dfi_rddata_en_l[lane_idx][cmd_idx] = m81_dfi_rddata_en_l[(cmd_idx * pNUM_LANES) + lane_idx];
        dfi_rddata_en_h[lane_idx][cmd_idx] = m81_dfi_rddata_en_h[(cmd_idx * pNUM_LANES) + lane_idx];
      end
    end
  end


 always @* begin: gen_m81_cmd_ddr4
    integer b_idx;

    for (b_idx = 0; b_idx < pCTL_DFI_CMD_WIDTH*2; b_idx = b_idx + 1) begin
      m81_ddr3_ctl_dfi_ras_n[b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b0 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_ras_n[b_idx];
      m81_ddr3_ctl_dfi_cas_n[b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b1 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_cas_n[b_idx];
      m81_ddr3_ctl_dfi_we_n [b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b1 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_we_n [b_idx];
    end
  end

   always @(posedge ctl_clk, negedge ctl_rst_n)
    if (ctl_rst_n == 1'b0) begin
      m81_ddr3_ctl_dfi_ras_n_r <= 4'hf;
      m81_ddr3_ctl_dfi_cas_n_r <= 4'hf;
      m81_ddr3_ctl_dfi_we_n_r  <= 4'hf;
      dfi_cs_n_r               <= 8'hff;
    end else begin
      m81_ddr3_ctl_dfi_ras_n_r <= m81_ddr3_ctl_dfi_ras_n;
      m81_ddr3_ctl_dfi_cas_n_r <= m81_ddr3_ctl_dfi_cas_n;
      m81_ddr3_ctl_dfi_we_n_r  <= m81_ddr3_ctl_dfi_we_n;
      dfi_cs_n_r               <= dfi_cs_n;
    end

generate
    genvar gen_dfi_rd_idx;

    for (gen_dfi_rd_idx = 0; gen_dfi_rd_idx < pNUM_LANES; gen_dfi_rd_idx = gen_dfi_rd_idx + 1) begin : dx
      ph1_logic_rd_byte_glue u_rd_byte_glue  (
        .ctl_clk                   ( ctl_clk                       ),
        .ctl_rst_n                 ( ctl_rst_n                     ),

        .mc_dfi_cs_n               ( dfi_cs_n_r[7:0]               ),
        .mc_dfi_ras_n              ( m81_ddr3_ctl_dfi_ras_n_r[3:0] ),
        .mc_dfi_cas_n              ( m81_ddr3_ctl_dfi_cas_n_r[3:0] ),
        .mc_dfi_we_n               ( m81_ddr3_ctl_dfi_we_n_r [3:0] ),
        .mc_bl_ctl_gdqs_ddr_shift  ( gdqs_ddr_shift_per_lane [(gen_dfi_rd_idx * pDDR_SHFT_RWIDTH)    +: pDDR_SHFT_RWIDTH   ] ),
        .mc_bl_ctl_gdqs_rsl        ( gdqs_rsl_per_lane       [(gen_dfi_rd_idx * pTCK_RSL_RWIDTH)     +: pTCK_RSL_RWIDTH    ] ),

        .bl_rddata_en_pipe_sel_pre ( cfg_bl_rddata_en_pipe_sel_pre ),
        .bl_tphy_rddata_en         ( cfg_bl_tphy_rddata_en         ),
        .mc_perrank_dfi_en         ( cfg_mc_perrank_dfi_en         ),
        .mc_shrac_dual_chn_mode    ( cfg_mc_shrac_dual_chn_mode    ),

        .mc_dfi_rddata_en_l        ( dfi_rddata_en_l[ gen_dfi_rd_idx ] ),
        .mc_dfi_rddata_en_h        ( dfi_rddata_en_h[ gen_dfi_rd_idx ] ),

        .phy_bl_ctl_qs_en          ( m81_ctl_qs_en[(gen_dfi_rd_idx * 8) +: 8 ] )
      );

    end
endgenerate


endmodule

`endif

`default_nettype wire  // restore implicit data types


`default_nettype none  // turn off implicit data types
`ifdef USE_EFFICIENCY_EQUALIZER
`timescale 1ps / 1ps
module ph1_logic_rd_byte_glue #(
   //--------------------------------------------------------------------------//
   // Parameters
   //--------------------------------------------------------------------------//
     parameter pNO_OF_RANKS             = 2
   , parameter pNO_OF_PRANKS            = 2
   , parameter pNUM_LANES               = 1           // Number of independent lanes
   , parameter pNUM_CHANNELS            = 2
   , parameter pCHN_IDX                 = 0
   , parameter pNO_OF_3DS_STACKS        = 0

   , parameter pPIPE_MCTL2DFI           = 0  // number of pipeline stages on DFI inputs
   , parameter pPIPE_DFI2PHY            = 0  // number of pipelines stages between DFI and PHY
   , parameter pCHN_NO_OF_RANKS         = 1

     // PUB DFI widths
   , parameter pPUB_DFI_NO_OF_CMDS      = 4                         // Num commands per (ctl) cycle
   , parameter pPUB_DFI_CMD_WIDTH       = (pPUB_DFI_NO_OF_CMDS * 1)
   , parameter pPUB_DFI_RANK_WIDTH      = (pPUB_DFI_NO_OF_CMDS * pNO_OF_PRANKS)
   , parameter pPUB_DFI_DATA_EN_WIDTH   = (pPUB_DFI_NO_OF_CMDS/2 * pNUM_LANES)

    // PUB controller DFI widths
   , parameter pDFI_RANK_WIDTH          = 2

   , parameter pPHY_NUM_CMDS            = 4

   // DDR mode
   , parameter pDDR_SHFT_WIDTH          = 2 // width of DDR shift
   , parameter pDGSL_WIDTH              = 5
   , parameter pDGSL_WIDTH_INT          = pDGSL_WIDTH - 2
   , parameter pDDR_SHFT_RWIDTH         = (pNO_OF_RANKS * pDDR_SHFT_WIDTH)
   , parameter pTCK_RSL_RWIDTH          = (pNO_OF_RANKS * pDGSL_WIDTH_INT)
             
   //// DFI Port Configuration
   , parameter pCHN_DFI_CHIP_SEL_WIDTH  = (pPHY_NUM_CMDS * pCHN_NO_OF_RANKS)
) (
    //--------------------------------------------------------------------------//
    // Port declarations
    //--------------------------------------------------------------------------//
    // System
      input  wire                                   ctl_clk
    , input  wire                                   ctl_rst_n

    , input  wire  [4        - 1 : 0]               bl_rddata_en_pipe_sel_pre
    , input  wire  [6        - 1 : 0]               bl_tphy_rddata_en
    , input  wire                                   mc_perrank_dfi_en
    , input  wire                                   mc_shrac_dual_chn_mode

    // PUB DFI interface
    , input  wire [pPUB_DFI_RANK_WIDTH    - 1 : 0]  mc_dfi_cs_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_ras_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_cas_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_we_n
    , input  wire [pPUB_DFI_DATA_EN_WIDTH - 1 : 0]  mc_dfi_rddata_en_l
    , input  wire [pPUB_DFI_DATA_EN_WIDTH - 1 : 0]  mc_dfi_rddata_en_h

    // interface from PUB read LCDL delays
    , input  wire  [pDDR_SHFT_RWIDTH      - 1 : 0]  mc_bl_ctl_gdqs_ddr_shift
    , input  wire  [pTCK_RSL_RWIDTH       - 1 : 0]  mc_bl_ctl_gdqs_rsl

    , output reg   [8                     - 1 : 0]  phy_bl_ctl_qs_en
);


  //--------------------------------------------------------------------------//
  // Internal Parameters
  //--------------------------------------------------------------------------//
  localparam pRD_LAT_STAGE_DEPTH       = 4'd9;
  localparam pMAX_TPHY_RDDATA_EN        = 26 + 6; // 6 for extra command pipelines
  localparam pTPHY_RDDATA_EN_WIDTH      = 6;

  // maximum number of pipelines for rddata_en pre-pipeline to account for command piplines
  localparam pMAX_RD_LOW_RWL_PIPE       = 3;

  // logical chip select size
  localparam pDFI_CHIP_SEL_LWIDTH      = (pPHY_NUM_CMDS * pNO_OF_RANKS );
  localparam pRSL_PLUS_ZERO            = 3'd0,
             pRSL_PLUS_ONE             = 3'd1,
             pRSL_PLUS_TWO             = 3'd2,
             pRSL_PLUS_THREE           = 3'd3,
             pRSL_PLUS_FOUR            = 3'd4,
             pRSL_PLUS_FIVE            = 3'd5,
             pRSL_PLUS_SIX             = 3'd6,
             pMAX_RSL                  = pRSL_PLUS_SIX + 1;
  

  // FSM
  localparam IDLE   = 2'b00,
             PRE    = 2'b01,
             DATA   = 2'b10,
             POST   = 2'b11;

//--------------------------------------------------------------------------//
// Register and Wire Declarations
//--------------------------------------------------------------------------//
  integer                                px_idx;

  wire                                   ac_bist_mode = 1'b0;
  wire                                   ddl_train;
  wire                                   dl_osc_mode = 1'b0;
  wire                                   lb_mode = 1'b0;

  // final DFI signals (after optional pipelines)
  reg [pPUB_DFI_RANK_WIDTH    - 1 : 0] dfi_cs_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_ras_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_cas_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_we_n;
  
  // system latency compensation signals
  // -----------------------------------
  integer                                 rank_idx;
  integer                                 lrank_id;
  integer                                 chn_rank_idx;
  integer                                 chn_allrank_idx;

  reg  [pCHN_DFI_CHIP_SEL_WIDTH - 1 : 0]  chn_dfi_cs_n;
  reg  [pCHN_DFI_CHIP_SEL_WIDTH - 1 : 0]  dfi_chip_sel_chn;
  reg  [pDFI_CHIP_SEL_LWIDTH    - 1 : 0]  dfi_cs_n_logical;
  reg  [pDFI_CHIP_SEL_LWIDTH    - 1 : 0]  dfi_chip_sel;

  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_1;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_2;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_pre;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd;
  wire [pPHY_NUM_CMDS           - 1 : 0]  in_phy_cmd_rd;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  bl_phy_cmd_rd;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rank_rd_2          [pCHN_NO_OF_RANKS - 1 : 0];
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rank_rd_1          [pNO_OF_RANKS     - 1 : 0];
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_rd_reg;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_single_chn_mode;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_dual_chn_mode;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_pre;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  in_phy_cmd_rank;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_phy_cmd_rank;

  reg  [2                       - 1 : 0]  in_dfi_rddata_en_l;
  reg  [2                       - 1 : 0]  in_dfi_rddata_en_h;

  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl_reg;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl_sel;

  reg  [pTPHY_RDDATA_EN_WIDTH   - 1 : 0]  bl_tphy_rddata_en_adj;
  reg  [pTPHY_RDDATA_EN_WIDTH   - 1 : 0]  bl_tphy_rddata_en_ff;
  reg  [4                       - 1 : 0]  bl_rddata_en_pipe_sel;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  bl_rsl_pipe                [pMAX_TPHY_RDDATA_EN + 1 - 1 : 0];
  reg  [pMAX_TPHY_RDDATA_EN     - 1 : 0]  bl_cmd_rd_pipe             ;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_pipe           [pMAX_TPHY_RDDATA_EN     - 1 : 0];
  wire                                    bl_cmd_rd_in;
  wire [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_in;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_pipe          [pMAX_RD_LOW_RWL_PIPE    : 0];
  reg  [2                       - 1 : 0]  bl_rddata_en_h_pipe          [pMAX_RD_LOW_RWL_PIPE    : 0];
  wire [2                       - 1 : 0]  bl_rddata_en_h_in;
  wire [2                       - 1 : 0]  bl_rddata_en_l_in;
  wire [4                       - 1 : 0]  bl_rddata_en_in;
  wire [2                       - 1 : 0]  bl_rddata_en_l;
  wire [2                       - 1 : 0]  bl_rddata_en_h;
  reg  [4                       - 1 : 0]  bl_rddata_en;
  reg  [4                       - 1 : 0]  bl_rddata_en_ff;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_array_px[10- 1 : 0];
  reg  [2                       - 1 : 0]  bl_rddata_en_h_array_px[10- 1 : 0];
  reg                                     bl_cmd_rd_px[pRD_LAT_STAGE_DEPTH : 0];
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_px[pRD_LAT_STAGE_DEPTH : 0];

  reg                                     bl_cmd_rd_dt;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_dt;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_dt;
  reg  [2                       - 1 : 0]  bl_rddata_en_h_dt;

  reg  [4                       - 1 : 0]  bl_rddata_en_delayed;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  bl_cmd_rsl_delayed;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_delayed;

  // DFI-to-PHY read FSM
  reg  [2                 - 1 : 0]  curr_state;
  reg  [2                 - 1 : 0]  next_state;
  reg  [8                 - 1 : 0]  gate_en;
  reg  [6                 - 1 : 0]  gate_en_r6;
  wire [8                 - 1 : 0]  ctl_qs_en_new;

  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift;
  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift_qs_en;
  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift_qs_en_pre1;

  wire [pDFI_RANK_WIDTH  - 1 : 0]   bl_dfi_rdrank;
  wire  [8                - 1 : 0]  bl_ctl_qs_en;
  reg   [2 : 0]                     post_shift_qs_en_3;

  reg  [pDGSL_WIDTH_INT    - 1 : 0]  gdqs_rsl_per_rank       [0 : pNO_OF_RANKS - 1];
  reg  [pDDR_SHFT_WIDTH     -1 : 0]  gdqs_ddr_shift_per_rank [0 : pNO_OF_RANKS - 1];

  // outputs to PHY macros
  // ---------------------
  wire [8                    - 1 : 0]  ctl_qs_en;

  reg  [8                    - 1 : 0]  ctl_qs_en_px       [(pPIPE_DFI2PHY + 1) - 1 : 0];
 
  //***************************************************************************
  // Input Pipelines
  //***************************************************************************
  // Pipelines most of the incoming pseudo-static signals for timing purposes;
  // only signals that are deemed pseudo-static are unconditionally pipelined;

  assign ddl_train = 1'b0;

  always @(posedge ctl_clk or negedge ctl_rst_n) begin: proc_rank_dly
    integer lrank_id;
    if (ctl_rst_n == 1'b0) begin
      for (lrank_id = 0; lrank_id < pNO_OF_RANKS; lrank_id = lrank_id + 1) begin
        gdqs_rsl_per_rank      [lrank_id] <= {pDGSL_WIDTH_INT{1'b0}};
        gdqs_ddr_shift_per_rank[lrank_id] <= {pDDR_SHFT_WIDTH{1'b0}};
      end
    end else begin
      for (lrank_id = 0; lrank_id < pNO_OF_RANKS; lrank_id = lrank_id + 1) begin
        gdqs_rsl_per_rank      [lrank_id] <= mc_bl_ctl_gdqs_rsl       [(pDGSL_WIDTH_INT * lrank_id) +: pDGSL_WIDTH_INT];
        gdqs_ddr_shift_per_rank[lrank_id] <= mc_bl_ctl_gdqs_ddr_shift [(pDDR_SHFT_WIDTH * lrank_id) +: pDDR_SHFT_WIDTH];
      end
    end
  end

 
  always @* begin
    dfi_cs_n       = mc_dfi_cs_n;
    dfi_ras_n      = mc_dfi_ras_n;
    dfi_cas_n      = mc_dfi_cas_n;
    dfi_we_n       = mc_dfi_we_n;
    in_dfi_rddata_en_l = mc_dfi_rddata_en_l;
    in_dfi_rddata_en_h = mc_dfi_rddata_en_h;
    dfi_cs_n_logical = mc_dfi_cs_n;
  end


  generate
    // Single-channel configuration
    if (pNUM_CHANNELS == 1) begin : genblk_chn_dfi_cs_n
      always @(*) begin
        chn_dfi_cs_n = dfi_cs_n_logical;
      end
    end
    // Dual-channel configuration
    else begin : genblk_chn_dfi_cs_n
      always @(*) begin
        for (chn_rank_idx = 0; chn_rank_idx < pCHN_NO_OF_RANKS; chn_rank_idx = chn_rank_idx + 1) begin
          chn_allrank_idx = (pNUM_CHANNELS == 1) ? chn_rank_idx :                  // All ranks for single channel configuration
                                                   (chn_rank_idx * 2) + pCHN_IDX;  // Even ranks for chn0, odd for chn 1

          chn_dfi_cs_n[chn_rank_idx                   ] = dfi_cs_n_logical[chn_allrank_idx               ];
          chn_dfi_cs_n[chn_rank_idx + pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS];
          chn_dfi_cs_n[chn_rank_idx + 2*pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS*2];
          chn_dfi_cs_n[chn_rank_idx + 3*pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS*3];
        end
      end
    end
  endgenerate
  
  always @(*) begin   
    for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (~ac_bist_mode) begin
        phy_cmd_rank_rd_2 [rank_idx][0] = (( {chn_dfi_cs_n[(0*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(0*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0100) && (lb_mode == 1'b1)));
      
        phy_cmd_rank_rd_2 [rank_idx][1] = (( {chn_dfi_cs_n[(1*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(1*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_2 [rank_idx][2] = (( {chn_dfi_cs_n[(2*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(2*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_2 [rank_idx][3] = (( {chn_dfi_cs_n[(3*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(3*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0100) && (lb_mode == 1'b1)));
      end
      // in AC BIST mode, we're not driving properly formatted commands so make no effort to decode AC signals
      else begin
        phy_cmd_rank_rd_2 [rank_idx][0] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][1] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][2] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][3] = 2'b00;
      end
    end
  end
  
  always@(*) begin   
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (~ac_bist_mode) begin
        phy_cmd_rank_rd_1 [rank_idx][0] = (( {dfi_cs_n_logical[(0*pNO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(0*pNO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0100) && (lb_mode == 1'b1)));
      
        phy_cmd_rank_rd_1 [rank_idx][1] = (( {dfi_cs_n_logical[(1*pNO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(1*pNO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_1 [rank_idx][2] = (( {dfi_cs_n_logical[(2*pNO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(2*pNO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_1 [rank_idx][3] = (( {dfi_cs_n_logical[(3*pNO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(3*pNO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0100) && (lb_mode == 1'b1)));
      end
      // in AC BIST mode, we're not driving properly formatted commands so make no effort to decode AC signals
      else begin
        phy_cmd_rank_rd_1 [rank_idx][0] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][1] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][2] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][3] = 2'b00;
      end
    end
  end

  // Track a read to any rank - phy_cmd_rd[odd/even]
  always@(*) begin
    phy_cmd_rd_2 = 4'h0;
    for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd_2[0] == 1'b0) begin
          phy_cmd_rd_2[0] = (phy_cmd_rank_rd_2[rank_idx][0] == 1'b1);
      end
      if (phy_cmd_rd_2[1] == 1'b0) begin
          phy_cmd_rd_2[1] = (phy_cmd_rank_rd_2[rank_idx][1] == 1'b1);
      end
      if (phy_cmd_rd_2[2] == 1'b0) begin
          phy_cmd_rd_2[2] = (phy_cmd_rank_rd_2[rank_idx][2] == 1'b1);
      end
      if (phy_cmd_rd_2[3] == 1'b0) begin
          phy_cmd_rd_2[3] = (phy_cmd_rank_rd_2[rank_idx][3] == 1'b1);
      end
    end
  end

  // Track a read to any rank - phy_cmd_rd[odd/even]
  always@(*) begin
    phy_cmd_rd_1 = 4'h0 ;
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd_1[0] == 1'b0) begin
          phy_cmd_rd_1[0] = (phy_cmd_rank_rd_1[rank_idx][0] == 1'b1);
      end
      if (phy_cmd_rd_1[1] == 1'b0) begin
          phy_cmd_rd_1[1] = (phy_cmd_rank_rd_1[rank_idx][1] == 1'b1);
      end
      if (phy_cmd_rd_1[2] == 1'b0) begin
          phy_cmd_rd_1[2] = (phy_cmd_rank_rd_1[rank_idx][2] == 1'b1);
      end
      if (phy_cmd_rd_1[3] == 1'b0) begin
          phy_cmd_rd_1[3] = (phy_cmd_rank_rd_1[rank_idx][3] == 1'b1);
      end
    end
  end
  
  always@(*) begin
    phy_cmd_rd_pre = (mc_shrac_dual_chn_mode == 1) ? phy_cmd_rd_2 : phy_cmd_rd_1;
    phy_cmd_rd = (mc_perrank_dfi_en == 1) ? {3'b0,(|phy_cmd_rd_pre)} : phy_cmd_rd_pre;

  end

  assign in_phy_cmd_rd = phy_cmd_rd;

 // Decode which rank is selected for the command in a single-channel configuration/mode
  always @* begin
    // Extract chip select (active rank)
    dfi_chip_sel     = ~dfi_cs_n_logical;
    dfi_chip_sel_chn = ~chn_dfi_cs_n    ;
    
    phy_cmd_rank_single_chn_mode = 2'd0;  // default placeholder value
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd[0]) begin
        if (dfi_chip_sel[rank_idx])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end
      else if (phy_cmd_rd[1]) begin  
        if (dfi_chip_sel[rank_idx+pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end
      else if (phy_cmd_rd[2]) begin  
        if (dfi_chip_sel[rank_idx+2*pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end 
      else begin
        if (dfi_chip_sel[rank_idx+3*pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end 
    end
  end

  // Decode which rank is selected for the command in a dual-channel configuration
  generate
    if (pNUM_CHANNELS == 2) begin : genblk_phy_cmd_rank

      always @* begin
        phy_cmd_rank_dual_chn_mode = 2'd0;  // default placeholder value
        for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
          if (phy_cmd_rd[0]) begin
            if (dfi_chip_sel_chn[rank_idx])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
          else if (phy_cmd_rd[1]) begin  
            if (dfi_chip_sel_chn[rank_idx+pCHN_NO_OF_RANKS])
             phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
          else if (phy_cmd_rd[2]) begin  
            if (dfi_chip_sel[rank_idx+2*pCHN_NO_OF_RANKS])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end 
          else begin
            if (dfi_chip_sel_chn[rank_idx+3*pCHN_NO_OF_RANKS])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
        end
      end
    end
    else begin : genblk_phy_cmd_rank

      always @* begin
        phy_cmd_rank_dual_chn_mode = 2'd0;
      end

    end
  endgenerate

  always @* begin
    phy_cmd_rank_pre = mc_shrac_dual_chn_mode ? phy_cmd_rank_dual_chn_mode : phy_cmd_rank_single_chn_mode;
    phy_cmd_rank = mc_perrank_dfi_en ? 1'b0 : phy_cmd_rank_pre;
  end
  
  // Keep a registered version of the decoded rank value for reads
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      phy_cmd_rank_rd_reg <= 2'd0;
    end else begin
      if (dl_osc_mode == 1'b1) begin
        phy_cmd_rank_rd_reg <= 2'd0;
      end else if (|phy_cmd_rd) begin
        phy_cmd_rank_rd_reg <= phy_cmd_rank;
      end
    end
  end

  // hold the rank info used by the read command until the other read comes
  always @* begin
    in_phy_cmd_rank = |phy_cmd_rd ? phy_cmd_rank : phy_cmd_rank_rd_reg;
  end


  wire   rd_rank_change ,rd_dly_diff ;


  always @* begin
    bl_phy_cmd_rd = in_phy_cmd_rd;
    bl_phy_cmd_rank = in_phy_cmd_rank;
  end
  
  
  // compute tphy_rddata_en and pipeline the commands
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      bl_tphy_rddata_en_ff  <= {pTPHY_RDDATA_EN_WIDTH{1'b0}};
      bl_rddata_en_pipe_sel <= {4{1'b0}};
    end else begin
      
      if (|bl_phy_cmd_rd) begin
        bl_tphy_rddata_en_ff <= bl_tphy_rddata_en_adj;
      end

      bl_rddata_en_pipe_sel <= bl_rddata_en_pipe_sel_pre;
    end
  end

  always @(*) begin : bl_trddata_en_proc
    if (|bl_phy_cmd_rd) begin
      if (bl_phy_cmd_rd[1] && bl_tphy_rddata_en[0]) begin
        bl_tphy_rddata_en_adj = bl_tphy_rddata_en + 1;
      end else begin
        bl_tphy_rddata_en_adj = bl_tphy_rddata_en;
      end
    end else begin
      bl_tphy_rddata_en_adj = bl_tphy_rddata_en_ff;
    end
  end


  // RSL pipeline
  // ------------
  // select the read gating rsl values for the rank to be read
  always @* begin : proc_rank_gdqs_rsl
    rank_rd_gdqs_rsl = gdqs_rsl_per_rank[bl_phy_cmd_rank];
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_gdqs_rsl_reg
    if (ctl_rst_n == 1'b0) begin
      rank_rd_gdqs_rsl_reg <= {pDGSL_WIDTH_INT{1'b0}};
    end 
    else begin
      if (|bl_phy_cmd_rd) begin
        rank_rd_gdqs_rsl_reg <= rank_rd_gdqs_rsl;
      end 
    end
  end

  always @* begin : proc_gdqs_rsl_sel_reg
    if (|bl_phy_cmd_rd) begin
      rank_rd_gdqs_rsl_sel = rank_rd_gdqs_rsl;
    end
    else begin
      rank_rd_gdqs_rsl_sel = rank_rd_gdqs_rsl_reg;
    end
  end

  // pipeline the RSL to compensate for negative write leveling and/or low WL/RL
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        bl_rsl_pipe[px_idx] <= {pDGSL_WIDTH_INT{1'b0}};
      end
    end
    else begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        if (ddl_train) begin
          bl_rsl_pipe[px_idx] <= {pDGSL_WIDTH_INT{1'b0}};
        end else begin
          if (px_idx >= bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1) begin
            bl_rsl_pipe[px_idx] <= rank_rd_gdqs_rsl_sel;
          end else begin
            bl_rsl_pipe[px_idx] <= bl_rsl_pipe[px_idx + 1];
          end
        end
      end
    end
  end
  
  always @(*) begin
    bl_rsl_pipe[pMAX_TPHY_RDDATA_EN] = {pDGSL_WIDTH_INT{1'b0}}; // first pipeline stage is not used
    
    bl_cmd_rsl_delayed  = bl_rsl_pipe[0];
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        bl_cmd_rd_pipe  [px_idx] <= 1'b0;
        bl_cmd_rank_pipe[px_idx] <= {pDFI_RANK_WIDTH{1'b0}};
      end
    end
    else begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        if ((|bl_phy_cmd_rd) && (px_idx == bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1)) begin
          bl_cmd_rd_pipe[px_idx] <= |bl_phy_cmd_rd;
        end else begin
          if (px_idx == (pMAX_TPHY_RDDATA_EN-1)) begin
            bl_cmd_rd_pipe[px_idx] <= 1'b0;
          end else begin
            bl_cmd_rd_pipe[px_idx] <= bl_cmd_rd_pipe[px_idx + 1];
          end
        end
        if (ddl_train) begin
          bl_cmd_rank_pipe[px_idx] <= bl_phy_cmd_rank;
        end else begin
          if (px_idx >= bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1) begin
            bl_cmd_rank_pipe[px_idx] <= bl_phy_cmd_rank;
          end else if (px_idx < (pMAX_TPHY_RDDATA_EN - 1)) begin
            bl_cmd_rank_pipe[px_idx] <= bl_cmd_rank_pipe[px_idx + 1];
          end
        end
      end
    end
  end

  assign bl_cmd_rd_in   = bl_cmd_rd_pipe  [0];
  assign bl_cmd_rank_in = bl_cmd_rank_pipe[0];

  // read enable pipeline:
  // select a delayed version of rddata_en to account for pipelines on command path due to negative write
  // leveling or low write/read latency
  always @(*) begin : bl_rddata_en_proc
    bl_rddata_en_l_pipe[0] = in_dfi_rddata_en_l;
    bl_rddata_en_h_pipe[0] = in_dfi_rddata_en_h;
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 1; px_idx <= pMAX_RD_LOW_RWL_PIPE; px_idx = px_idx + 1) begin
        bl_rddata_en_l_pipe[px_idx] <= {2{1'b0}};
        bl_rddata_en_h_pipe[px_idx] <= {2{1'b0}};
      end
    end
    else begin
      for (px_idx = 1; px_idx <= pMAX_RD_LOW_RWL_PIPE; px_idx = px_idx + 1) begin
        bl_rddata_en_l_pipe[px_idx] <= bl_rddata_en_l_pipe[px_idx - 1];
        bl_rddata_en_h_pipe[px_idx] <= bl_rddata_en_h_pipe[px_idx - 1];
      end
    end
  end
  
  assign bl_rddata_en_l_in = bl_rddata_en_l_pipe[bl_rddata_en_pipe_sel];
  assign bl_rddata_en_h_in = bl_rddata_en_h_pipe[bl_rddata_en_pipe_sel];
  assign bl_rddata_en_in = {bl_rddata_en_h_pipe[bl_rddata_en_pipe_sel],bl_rddata_en_l_pipe[bl_rddata_en_pipe_sel]};
  

  // an optional pipeline may be placed here instead of the very input of
  // the DFI inputs to help break the long timing paths
  // No pipeline stage
  always @* begin
    bl_rddata_en = bl_rddata_en_in;
  end

  // Wire out pipelined, or not, DFI input signals
  assign bl_rddata_en_l = bl_rddata_en[1:0];
  assign bl_rddata_en_h = bl_rddata_en[3:2];

  always @(*) begin
    bl_rddata_en_l_array_px  [0] = bl_rddata_en_l;
    bl_rddata_en_h_array_px  [0] = bl_rddata_en_h;
    bl_cmd_rd_px   [0]    = bl_cmd_rd_in;
    bl_cmd_rank_px [0]    = bl_cmd_rank_in;
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin : m81_bl_rddata_en_lh_array
    integer px_idx;

    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 1; px_idx <= 9; px_idx = px_idx + 1) begin
        bl_rddata_en_l_array_px  [px_idx] <=  2'd0;
        bl_rddata_en_h_array_px  [px_idx] <=  2'd0;
        bl_cmd_rd_px   [px_idx]    <= 2'b0;
        bl_cmd_rank_px [px_idx]    <= 1'b0;
      end
    end
    else begin
      for (px_idx = 1; px_idx <= 9; px_idx = px_idx + 1) begin
        bl_rddata_en_l_array_px  [px_idx] <= bl_rddata_en_l_array_px  [px_idx - 1];
        bl_rddata_en_h_array_px  [px_idx] <= bl_rddata_en_h_array_px  [px_idx - 1];
        bl_cmd_rd_px   [px_idx]    <= bl_cmd_rd_px   [px_idx - 1];
        bl_cmd_rank_px [px_idx]    <= bl_cmd_rank_px [px_idx - 1];
      end
    end
  end
  
  // register incoming dfi_rddata_en for detecting the start of rddata_en
  always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_bl_rddata_en_pipe
    if (ctl_rst_n == 1'b0) begin
      bl_rddata_en_ff <= {2{1'b0}};
    end
    else begin
      bl_rddata_en_ff <= bl_rddata_en;
    end
  end

always @(*) begin : proc_bl_cmd_rsl_delay
        case (bl_cmd_rsl_delayed) 
          // no data shift required
          pRSL_PLUS_ZERO: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[0];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
          // shift data by +1 SDR cycle
          pRSL_PLUS_ONE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[1];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
          // shift data by +2 SDR cycle
          pRSL_PLUS_TWO: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[1];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[1];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [1];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [1];
          end
          // shift data by +3 SDR cycle
          pRSL_PLUS_THREE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[2];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[1];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [1];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [1];
          end
          // shift data by +4 SDR cycle
          pRSL_PLUS_FOUR: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[2];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[2];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [2];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [2];
          end
          // shift data by +5 SDR cycle
          pRSL_PLUS_FIVE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[3];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[2];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [2];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [2];
          end
          // shift data by +6 SDR cycle
          pRSL_PLUS_SIX: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[3];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[3];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [3];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [3];
          end
          // shift data by +7 SDR cycle
          pMAX_RSL: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[4];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[3];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [3];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [3];
          end
          default: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[0];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
        endcase
  end  
                    
  always @(*) begin : bl_rddata_en_start_proc
    integer bl_idx;
    bl_rddata_en_delayed = {bl_rddata_en_h_dt,bl_rddata_en_l_dt};
    bl_cmd_rank_delayed = bl_cmd_rank_dt;
  end

  assign bl_dfi_rdrank       = bl_cmd_rank_delayed;

  assign gdqs_ddr_shift = gdqs_ddr_shift_per_rank[bl_dfi_rdrank];

  assign gdqs_ddr_shift_qs_en_pre1 = ((next_state != IDLE) || (curr_state != IDLE) || (ctl_qs_en_new != 8'hff)) ? gdqs_ddr_shift : 2'b00; 
  
  assign gdqs_ddr_shift_qs_en = gdqs_ddr_shift_qs_en_pre1 ;

  assign bl_ctl_qs_en = ctl_qs_en_new;


always @* begin
    case (curr_state)
      //------------------------------------------------------------------------
      IDLE: begin
        if ( (bl_rddata_en_delayed == 4'b1110) || (bl_rddata_en_delayed == 4'b1100) || (bl_rddata_en_delayed == 4'b1000) || (bl_rddata_en_delayed == 4'b1111) )
          next_state = PRE;
        else
          next_state = IDLE;
      end
      //------------------------------------------------------------------------
      PRE: begin
        if (bl_rddata_en_delayed == 4'b1111) 
          next_state = DATA;
        else if ( (bl_rddata_en_delayed == 4'b0000) || (bl_rddata_en_delayed == 4'b0001) || (bl_rddata_en_delayed == 4'b0011) || (bl_rddata_en_delayed == 4'b0111) )
          next_state = POST;
        else
          next_state = PRE;
      end
      //------------------------------------------------------------------------
      DATA: begin
        if (bl_rddata_en_delayed == 4'b1111)
          next_state = DATA;
        else if( (bl_rddata_en_delayed == 4'b0000) || (bl_rddata_en_delayed == 4'b0001) || (bl_rddata_en_delayed == 4'b0011) || (bl_rddata_en_delayed == 4'b0111) )
          next_state = POST;
        else
          next_state = PRE;
      end
      //------------------------------------------------------------------------
      POST: begin
        if(bl_rddata_en_delayed == 4'b0000) 
          next_state = IDLE;
        else
          next_state = PRE;
      end
      default: begin
        next_state = IDLE;
      end
    endcase
  end


always @(*) begin
  if ((next_state==PRE) && (curr_state==IDLE)) begin
  case (bl_rddata_en_delayed) 
    4'b1111 : gate_en = 8'b0000_0001;
    4'b1110 : gate_en = 8'b0000_0111;
    4'b1100 : gate_en = 8'b0001_1111;
    4'b1000 : gate_en = 8'b0111_1111;
    default : gate_en = 8'b1111_1111;
  endcase
  end else if (((next_state==DATA) && (curr_state==PRE)) || ((next_state==DATA) && (curr_state==DATA)) || ((next_state==DATA) && (curr_state==POST)) ) begin
  gate_en = 8'b0000_0000;
  end else if (((next_state==POST) && (curr_state==PRE)) || ((next_state==POST) && (curr_state==DATA))) begin
  case (bl_rddata_en_delayed) 
    4'b0000 : gate_en = 8'b1111_1111;
    4'b0001 : gate_en = 8'b1111_1100;
    4'b0011 : gate_en = 8'b1111_0000;
    4'b0111 : gate_en = 8'b1100_0000;
    default : gate_en = 8'b1111_1111;
  endcase
  end else if (((next_state==PRE) && (curr_state==PRE)) || ((next_state==PRE) && (curr_state==POST)) || ((next_state==PRE) && (curr_state==DATA))) begin
  case (bl_rddata_en_delayed) 
    4'b1111 : gate_en = 8'b0000_0001;
    4'b1110 : gate_en = 8'b0000_0111;
    4'b1101 : gate_en = 8'b0001_1100;
    4'b1100 : gate_en = 8'b0001_1111;
    4'b1011 : gate_en = 8'b0111_0000;
    4'b1001 : gate_en = 8'b0111_1100;
    4'b1000 : gate_en = 8'b0111_1111;
    default : gate_en = 8'b1111_1111;
  endcase  
  end else if ((next_state==POST) && (curr_state==IDLE)) begin
  gate_en = 8'b1111_1111;  
  end else begin
  gate_en = 8'b1111_1111;  
  end
end

  always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      gate_en_r6      <= 6'h3f;
      curr_state      <= IDLE;
    end
    else begin
      gate_en_r6     <= gate_en[7:2];
      curr_state     <= next_state;
    end
  end

 always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      post_shift_qs_en_3      <= 3'h7;
    end
    else begin
      post_shift_qs_en_3     <= bl_ctl_qs_en[7:5];
    end
  end
  


  assign ctl_qs_en_new = {gate_en[1:0], gate_en_r6};

  assign ctl_qs_en =  (gdqs_ddr_shift_qs_en == 2'b01) ? {bl_ctl_qs_en[6:0], post_shift_qs_en_3[2]} :
                      (gdqs_ddr_shift_qs_en == 2'b10) ? {bl_ctl_qs_en[5:0], post_shift_qs_en_3[2:1]} :
                      (gdqs_ddr_shift_qs_en == 2'b11) ? {bl_ctl_qs_en[4:0], post_shift_qs_en_3[2:0]} :
                                                      {bl_ctl_qs_en[7:0]};

  // No pipeline stage
  always @(*) begin
    ctl_qs_en_px       [0] = ctl_qs_en;
  end

  // optional pipeline stages at the outputs to PHY
  generate
    if (pPIPE_DFI2PHY > 0) begin : genblk_dfi2phy_pipe
      always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_pipe
        integer pidx; 

        if (ctl_rst_n == 1'b0) begin
          for (pidx = 1; pidx <= pPIPE_DFI2PHY; pidx = pidx + 1) begin
            ctl_qs_en_px       [pidx] <= {               4{1'b0}};
          end
        end
        else begin
          for (pidx = 1; pidx <= pPIPE_DFI2PHY; pidx = pidx + 1) begin
            ctl_qs_en_px       [pidx] <= ctl_qs_en_px       [pidx - 1];
          end
        end
      end  // always @(posedge ...

    end
  endgenerate

// Wire out pipelined, or not, DFI outputs to the PHY
always @(*) begin
    phy_bl_ctl_qs_en  = ctl_qs_en_px[pPIPE_DFI2PHY];
end

endmodule

`endif

`default_nettype wire  // restore implicit data types


//***************************************************************************
// SOPC TOP Modules
//***************************************************************************
`timescale 1ns / 1ps 

module ph1_logic_sopc_top  #(
    parameter CLOCK_RATE = 25_000_000
) (
 
    input        cpu_clk,
    input        cpu_rst_n,

    output  [27:0]   fpga_apb_PADDR   ,
    output  [ 0:0]   fpga_apb_PSEL    ,
    output           fpga_apb_PENABLE ,
    input            fpga_apb_PREADY  ,
    output           fpga_apb_PWRITE  ,
    output  [31:0]   fpga_apb_PWDATA  ,
    input   [31:0]   fpga_apb_PRDATA  ,
    input            fpga_apb_PSLVERR ,

    output           uart_txd ,    
    input            uart_rxd ,

    input            user_update      ,
    input   [ 7:0]   user_ram_addr    ,
    input            user_ram_wr_en   ,
    input            user_ram_rd_en   ,
    input   [31:0]   user_ram_wr_data ,
    output  [31:0]   user_ram_rd_data ,

    input   [31:0]   user_set         ,
    output  [31:0]   user_led         ,

    output           pzq_cal_done_o   ,
    input            pzq_cal_done_i   ,

    output           mcu_busy         ,
    output           ddr_init_cal_done

);


wire             cpu_areset            ;
wire             cpu_aresetn           ;

wire    [31:0]   io_gpioA_user         ;       
wire    [31:0]   io_gpioA_read         ;       
wire    [31:0]   io_gpioA_write        ;      
wire             user_update_pulse     ;
wire             user_update_clr_pulse ;

reg     [ 1:0]   user_update_r         ;
reg              user_update_int       ;
wire             user_update_clr       ;
reg     [ 1:0]   user_update_clr_r     ;

assign cpu_areset  = ~cpu_rst_n ;
assign cpu_aresetn =  cpu_rst_n ;

ph1_logic_SOPC  #(
    .CLOCK_RATE ( CLOCK_RATE )
) u_cpu(
    .io_clk             ( cpu_clk          ),
    .io_rst             ( cpu_areset       ),
    .io_gpio_user       ( io_gpioA_user    ),
    .io_gpio_read       ( io_gpioA_read    ),
    .io_gpio_write      ( io_gpioA_write   ),
    .io_uart_txd        ( uart_txd         ),
    .io_uart_rxd        ( uart_rxd         ),
    .io_apb_PADDR       ( fpga_apb_PADDR   ),
    .io_apb_PSEL        ( fpga_apb_PSEL    ),
    .io_apb_PENABLE     ( fpga_apb_PENABLE ),
    .io_apb_PREADY      ( fpga_apb_PREADY  ),
    .io_apb_PWRITE      ( fpga_apb_PWRITE  ),
    .io_apb_PWDATA      ( fpga_apb_PWDATA  ),
    .io_apb_PRDATA      ( fpga_apb_PRDATA  ),
    .io_apb_PSLVERR     ( fpga_apb_PSLVERR ),

    .user_ram_addr      ( user_ram_addr    ),
    .user_ram_wr_en     ( user_ram_wr_en   ),
    .user_ram_rd_en     ( user_ram_rd_en   ),
    .user_ram_wr_data   ( user_ram_wr_data ),
    .user_ram_rd_data   ( user_ram_rd_data ),
    
    .io_interrupt       ( 1'b0             ),
    .io_interruptClear  (                  )
);  

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_r <= 2'b00 ; 
    else
        user_update_r <= {user_update_r[0], user_update};
end

assign user_update_pulse = user_update_r[0] & (~user_update_r[1]);

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_clr_r <= 2'b00 ; 
    else
        user_update_clr_r <= {user_update_clr_r[0], user_update_clr};
end

assign user_update_clr_pulse = user_update_clr_r[0] & (~user_update_clr_r[1]);

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_int <= 1'b0 ;
    else if ( user_update_pulse == 1'b1 )
        user_update_int <= 1'b1 ;
    else if ( user_update_clr_pulse == 1'b1 )
        user_update_int <= 1'b0 ;
    else
        user_update_int <= user_update_int ;
end

`ifdef PH1_DDR_SIM
assign io_gpioA_read = 32'h01_00_00_00 | (pzq_cal_done_i << 27) | (user_update_int << 29);
`else
assign io_gpioA_read = 32'h00_00_00_00 | (pzq_cal_done_i << 27) | (user_update_int << 29);
`endif

assign pzq_cal_done_o    = io_gpioA_write[27];
assign user_update_clr   = io_gpioA_write[29];
assign mcu_busy          = io_gpioA_write[30];
assign ddr_init_cal_done = io_gpioA_write[31];
assign user_led          = io_gpioA_write;
assign io_gpioA_user     = user_set      ;

endmodule


`timescale 1ps / 1ps

module ph1_logic_SOPC #(
    parameter CLOCK_RATE = 25_000_000
)(
    input               io_clk,
    input               io_rst,

    input      [31:0]   io_gpio_user,
    input      [31:0]   io_gpio_read,
    output     [31:0]   io_gpio_write,
  
    output              io_uart_txd,
    input               io_uart_rxd,
  
    output     [27:0]   io_apb_PADDR,
    output     [ 0:0]   io_apb_PSEL,
    output              io_apb_PENABLE,
    input               io_apb_PREADY,
    output              io_apb_PWRITE,
    output     [31:0]   io_apb_PWDATA,
    input      [31:0]   io_apb_PRDATA,
    input               io_apb_PSLVERR,

    input      [ 7:0]   user_ram_addr    ,
    input               user_ram_wr_en   ,
    input               user_ram_rd_en   ,
    input      [31:0]   user_ram_wr_data ,
    output     [31:0]   user_ram_rd_data ,
  
    input               io_interrupt,
    output              io_interruptClear 
);

reg                 _zz_7_;
reg        [31:0]   _zz_12_;
wire                io_rst_sync ;

wire                system_mainBusArbiter_io_iBus_cmd_ready;
wire                system_mainBusArbiter_io_iBus_rsp_valid;
wire                system_mainBusArbiter_io_iBus_rsp_payload_error;
wire       [31:0]   system_mainBusArbiter_io_iBus_rsp_payload_inst;
wire                system_mainBusArbiter_io_dBus_cmd_ready;
wire                system_mainBusArbiter_io_dBus_rsp_ready;
wire                system_mainBusArbiter_io_dBus_rsp_error;
wire       [31:0]   system_mainBusArbiter_io_dBus_rsp_data;
wire                system_mainBusArbiter_io_masterBus_cmd_valid;
wire                system_mainBusArbiter_io_masterBus_cmd_payload_write;
wire       [31:0]   system_mainBusArbiter_io_masterBus_cmd_payload_address;
wire       [31:0]   system_mainBusArbiter_io_masterBus_cmd_payload_data;
wire       [3:0]    system_mainBusArbiter_io_masterBus_cmd_payload_mask;
wire                system_cpu_iBus_cmd_valid;
wire       [31:0]   system_cpu_iBus_cmd_payload_pc;
wire                system_cpu_debug_resetOut;
wire                system_cpu_dBus_cmd_valid;
wire                system_cpu_dBus_cmd_payload_wr;
wire       [31:0]   system_cpu_dBus_cmd_payload_address;
wire       [31:0]   system_cpu_dBus_cmd_payload_data;
wire       [1:0]    system_cpu_dBus_cmd_payload_size;

reg                 system_ram_io_bus_cmd_valid;
wire                system_ram_io_bus_cmd_ready;
wire                system_ram_io_bus_rsp_valid;
wire       [31:0]   system_ram_io_bus_rsp_payload_data;
wire                system_apbBridge_io_pipelinedMemoryBus_cmd_ready;
wire                system_apbBridge_io_pipelinedMemoryBus_rsp_valid;
wire       [31:0]   system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data;

wire       [27:0]   apbBridge_mst_PADDR;
wire       [0:0]    apbBridge_mst_PSEL;
wire                apbBridge_mst_PENABLE;
wire                apbBridge_mst_PWRITE;
wire       [31:0]   apbBridge_mst_PWDATA;
wire                apbBridge_mst_PREADY;
wire       [31:0]   apbBridge_mst_PRDATA;
wire                apbBridge_mst_PSLVERR;

wire                system_timerCtrl_io_apb_PREADY;
wire       [31:0]   system_timerCtrl_io_apb_PRDATA;
wire                system_timerCtrl_io_apb_PSLVERROR;
wire                system_timerCtrl_io_interrupt;

wire                system_uartCtrl_io_interrupt;
wire                system_interruptCtrl_io_apb_PREADY;
wire       [31:0]   system_interruptCtrl_io_apb_PRDATA;
wire                system_interruptCtrl_io_apb_PSLVERROR;
wire                system_interruptCtrl_io_timerInterruptClear;
wire                system_interruptCtrl_io_externalInterruptClear;
wire                system_interruptCtrl_io_softwareInterruptClear;

wire       [27:0]   apb3decoder_mst_PADDR   ;
wire       [4:0]    apb3decoder_mst_PSEL    ;
wire                apb3decoder_mst_PENABLE ;
wire                apb3decoder_mst_PWRITE  ;
wire       [31:0]   apb3decoder_mst_PWDATA  ;
wire                apb3decoder_mst_PREADY  ;
wire       [31:0]   apb3decoder_mst_PRDATA  ;
wire                apb3decoder_mst_PSLVERR ;

wire       [27:0]   apb3Router_0_PADDR;
wire       [0:0]    apb3Router_0_PSEL;
wire                apb3Router_0_PENABLE;
wire                apb3Router_0_PWRITE;
wire       [31:0]   apb3Router_0_PWDATA;
wire                apb3Router_0_PREADY;
wire       [31:0]   apb3Router_0_PRDATA;
wire                apb3Router_0_PSLVERR;

wire       [27:0]   apb3Router_1_PADDR;
wire       [0:0]    apb3Router_1_PSEL;
wire                apb3Router_1_PENABLE;
wire                apb3Router_1_PWRITE;
wire       [31:0]   apb3Router_1_PWDATA;
wire                apb3Router_1_PREADY;
wire       [31:0]   apb3Router_1_PRDATA;
wire                apb3Router_1_PSLVERR;

wire       [27:0]   apb3Router_2_PADDR;
wire       [0:0]    apb3Router_2_PSEL;
wire                apb3Router_2_PENABLE;
wire                apb3Router_2_PWRITE;
wire       [31:0]   apb3Router_2_PWDATA;
wire                apb3Router_2_PREADY;
wire       [31:0]   apb3Router_2_PRDATA;
wire                apb3Router_2_PSLVERR;

wire       [27:0]   apb3Router_3_PADDR;
wire       [0:0]    apb3Router_3_PSEL;
wire                apb3Router_3_PENABLE;
wire                apb3Router_3_PWRITE;
wire       [31:0]   apb3Router_3_PWDATA;
wire                apb3Router_3_PREADY;
wire       [31:0]   apb3Router_3_PRDATA;
wire                apb3Router_3_PSLVERR;

wire       [27:0]   apb3Router_4_PADDR;
wire       [0:0]    apb3Router_4_PSEL;
wire                apb3Router_4_PENABLE;
wire                apb3Router_4_PWRITE;
wire       [31:0]   apb3Router_4_PWDATA;
wire                apb3Router_4_PREADY;
wire       [31:0]   apb3Router_4_PRDATA;
wire                apb3Router_4_PSLVERR;


wire                _zz_14_;
wire                _zz_15_;
reg        [5:0]    resetCtrl_dly_cnt = 6'h0 ;
reg                 resetCtrl_mainClkResetUnbuffered;
reg                 resetCtrl_mainClkReset;
reg                 resetCtrl_systemReset;
wire                system_timerInterrupt;
wire                system_externalInterrupt;
wire                system_softwareInterrupt;
wire                system_timerInterruptClear;
wire                system_externalInterruptClear;
wire                system_softwareInterruptClear;
reg        [1:0]    system_interruptType;
wire                system_cpu_dBus_cmd_halfPipe_valid;
wire                system_cpu_dBus_cmd_halfPipe_ready;
wire                system_cpu_dBus_cmd_halfPipe_payload_wr;
wire       [31:0]   system_cpu_dBus_cmd_halfPipe_payload_address;
wire       [31:0]   system_cpu_dBus_cmd_halfPipe_payload_data;
wire       [1:0]    system_cpu_dBus_cmd_halfPipe_payload_size;
reg                 system_cpu_dBus_cmd_halfPipe_regs_valid;
reg                 system_cpu_dBus_cmd_halfPipe_regs_ready;
reg                 system_cpu_dBus_cmd_halfPipe_regs_payload_wr;
reg        [31:0]   system_cpu_dBus_cmd_halfPipe_regs_payload_address;
reg        [31:0]   system_cpu_dBus_cmd_halfPipe_regs_payload_data;
reg        [1:0]    system_cpu_dBus_cmd_halfPipe_regs_payload_size;
reg                 system_cpu_debug_resetOut_regNext;
wire                system_mainBusDecoder_logic_masterPipelined_cmd_valid;
reg                 system_mainBusDecoder_logic_masterPipelined_cmd_ready;
wire                system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_cmd_payload_address;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_cmd_payload_data;
wire       [3:0]    system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask;
wire                system_mainBusDecoder_logic_masterPipelined_rsp_valid;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_rsp_payload_data;
wire                system_mainBusDecoder_logic_hits_0;

wire                system_mainBusDecoder_logic_hits_1;
wire                _zz_4_;
wire                system_mainBusDecoder_logic_noHit;
reg                 system_mainBusDecoder_logic_rspPending;
reg                 system_mainBusDecoder_logic_rspNoHit;
reg                 system_mainBusDecoder_logic_rspSourceId;

assign _zz_14_ =  system_mainBusDecoder_logic_rspPending && (~system_mainBusDecoder_logic_masterPipelined_rsp_valid);
assign _zz_15_ = ~system_cpu_dBus_cmd_halfPipe_regs_valid;
 
ph1_logic_BufferCC io_rst_buffercc ( 
    .io_dataIn     (io_rst      ), //i
    .io_dataOut    (io_rst_sync ), //o
    .io_clk        (io_clk      )  //i
);    

//-------- Start : system reset generation --------//
always @ (posedge io_clk) begin
    if( io_rst_sync )begin
        resetCtrl_dly_cnt <= 6'h0;
    end else if (resetCtrl_dly_cnt == 6'h3f) begin
        resetCtrl_dly_cnt <= resetCtrl_dly_cnt ;
    end else begin
        resetCtrl_dly_cnt <= resetCtrl_dly_cnt + 1'b1;
    end
end

always @ (*) begin
    if ( resetCtrl_dly_cnt == 6'h3f ) begin
        resetCtrl_mainClkResetUnbuffered = 1'b0;
    end else begin
        resetCtrl_mainClkResetUnbuffered = 1'b1;
    end
end

always @ (posedge io_clk) begin
    resetCtrl_mainClkReset <= resetCtrl_mainClkResetUnbuffered;
    if(system_cpu_debug_resetOut_regNext)begin
          resetCtrl_systemReset <= 1'b1;
    end else begin
        resetCtrl_systemReset  <= resetCtrl_mainClkResetUnbuffered;
    end
end
//-------- End : system reset generation --------//




ph1_logic_mcu system_cpu ( 
    .iBus_cmd_valid                   (system_cpu_iBus_cmd_valid                             ), //o
    .iBus_cmd_ready                   (system_mainBusArbiter_io_iBus_cmd_ready               ), //i
    .iBus_cmd_payload_pc              (system_cpu_iBus_cmd_payload_pc                        ), //o
    .iBus_rsp_valid                   (system_mainBusArbiter_io_iBus_rsp_valid               ), //i
    .iBus_rsp_payload_error           (system_mainBusArbiter_io_iBus_rsp_payload_error       ), //i
    .iBus_rsp_payload_inst            (system_mainBusArbiter_io_iBus_rsp_payload_inst        ), //i
    
    .timerInterrupt                   (system_timerInterrupt                                 ), //i
    .externalInterrupt                (system_externalInterrupt                              ), //i
    .softwareInterrupt                (system_softwareInterrupt                              ), //i
    
    .debug_bus_cmd_valid              (  1'b0  ), //i
    .debug_bus_cmd_ready              (        ), //o
    .debug_bus_cmd_payload_wr         (  1'b0  ), //i
    .debug_bus_cmd_payload_address    (  8'h0  ), //i
    .debug_bus_cmd_payload_data       ( 32'h0  ), //i
    .debug_bus_rsp_data               (        ), //o
    .debug_resetOut                   (system_cpu_debug_resetOut ), //o
    
    .dBus_cmd_valid                   (system_cpu_dBus_cmd_valid                             ), //o
    .dBus_cmd_ready                   (system_cpu_dBus_cmd_halfPipe_regs_ready               ), //i
    .dBus_cmd_payload_wr              (system_cpu_dBus_cmd_payload_wr                        ), //o
    .dBus_cmd_payload_address         (system_cpu_dBus_cmd_payload_address                   ), //o
    .dBus_cmd_payload_data            (system_cpu_dBus_cmd_payload_data                      ), //o
    .dBus_cmd_payload_size            (system_cpu_dBus_cmd_payload_size[1:0]                 ), //o
    .dBus_rsp_ready                   (system_mainBusArbiter_io_dBus_rsp_ready               ), //i
    .dBus_rsp_error                   (system_mainBusArbiter_io_dBus_rsp_error               ), //i
    .dBus_rsp_data                    (system_mainBusArbiter_io_dBus_rsp_data                ), //i
    
    .io_clk                           (io_clk                                                ), //i
    .resetCtrl_systemReset            (resetCtrl_systemReset                                 ), //i
    .resetCtrl_mainClkReset           (resetCtrl_mainClkReset                                )  //i
);    


ph1_logic_MuraxMasterArbiter system_mainBusArbiter ( 
    .io_iBus_cmd_valid                   (system_cpu_iBus_cmd_valid                                           ), //i
    .io_iBus_cmd_ready                   (system_mainBusArbiter_io_iBus_cmd_ready                             ), //o
    .io_iBus_cmd_payload_pc              (system_cpu_iBus_cmd_payload_pc[31:0]                                ), //i
    .io_iBus_rsp_valid                   (system_mainBusArbiter_io_iBus_rsp_valid                             ), //o
    .io_iBus_rsp_payload_error           (system_mainBusArbiter_io_iBus_rsp_payload_error                     ), //o
    .io_iBus_rsp_payload_inst            (system_mainBusArbiter_io_iBus_rsp_payload_inst[31:0]                ), //o
    .io_dBus_cmd_valid                   (system_cpu_dBus_cmd_halfPipe_valid                                  ), //i
    .io_dBus_cmd_ready                   (system_mainBusArbiter_io_dBus_cmd_ready                             ), //o
    .io_dBus_cmd_payload_wr              (system_cpu_dBus_cmd_halfPipe_payload_wr                             ), //i
    .io_dBus_cmd_payload_address         (system_cpu_dBus_cmd_halfPipe_payload_address[31:0]                  ), //i
    .io_dBus_cmd_payload_data            (system_cpu_dBus_cmd_halfPipe_payload_data[31:0]                     ), //i
    .io_dBus_cmd_payload_size            (system_cpu_dBus_cmd_halfPipe_payload_size[1:0]                      ), //i
    .io_dBus_rsp_ready                   (system_mainBusArbiter_io_dBus_rsp_ready                             ), //o
    .io_dBus_rsp_error                   (system_mainBusArbiter_io_dBus_rsp_error                             ), //o
    .io_dBus_rsp_data                    (system_mainBusArbiter_io_dBus_rsp_data[31:0]                        ), //o
    .io_masterBus_cmd_valid              (system_mainBusArbiter_io_masterBus_cmd_valid                        ), //o
    .io_masterBus_cmd_ready              (system_mainBusDecoder_logic_masterPipelined_cmd_ready               ), //i
    .io_masterBus_cmd_payload_write      (system_mainBusArbiter_io_masterBus_cmd_payload_write                ), //o
    .io_masterBus_cmd_payload_address    (system_mainBusArbiter_io_masterBus_cmd_payload_address[31:0]        ), //o
    .io_masterBus_cmd_payload_data       (system_mainBusArbiter_io_masterBus_cmd_payload_data[31:0]           ), //o
    .io_masterBus_cmd_payload_mask       (system_mainBusArbiter_io_masterBus_cmd_payload_mask[3:0]            ), //o
    .io_masterBus_rsp_valid              (system_mainBusDecoder_logic_masterPipelined_rsp_valid               ), //i
    .io_masterBus_rsp_payload_data       (system_mainBusDecoder_logic_masterPipelined_rsp_payload_data[31:0]  ), //i
    .io_clk                              (io_clk                                                              ), //i
    .resetCtrl_systemReset               (resetCtrl_systemReset                                               )  //i
); 

ph1_logic_AlcPipelinedMemoryBusRam system_ram ( 
    .io_bus_cmd_valid              (system_ram_io_bus_cmd_valid                                            ), //i
    .io_bus_cmd_ready              (system_ram_io_bus_cmd_ready                                            ), //o
    .io_bus_cmd_payload_write      (system_mainBusDecoder_logic_masterPipelined_cmd_payload_write          ), //i
    .io_bus_cmd_payload_address    (system_mainBusDecoder_logic_masterPipelined_cmd_payload_address        ), //i
    .io_bus_cmd_payload_data       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_data           ), //i
    .io_bus_cmd_payload_mask       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask           ), //i
    .io_bus_rsp_valid              (system_ram_io_bus_rsp_valid                                            ), //o
    .io_bus_rsp_payload_data       (system_ram_io_bus_rsp_payload_data                                     ), //o

    .io_clk                        (io_clk                                                                 ), //i
    .resetCtrl_systemReset         (resetCtrl_systemReset                                                  )  //i
);

ph1_logic_PipelinedMemoryBusToApbBridge system_apbBridge ( 
    .io_pipelinedMemoryBus_cmd_valid              (_zz_7_                                                          ), //i
    .io_pipelinedMemoryBus_cmd_ready              (system_apbBridge_io_pipelinedMemoryBus_cmd_ready                ), //o
    .io_pipelinedMemoryBus_cmd_payload_write      (_zz_4_                                                          ), //i
    .io_pipelinedMemoryBus_cmd_payload_address    (system_mainBusDecoder_logic_masterPipelined_cmd_payload_address ), //i
    .io_pipelinedMemoryBus_cmd_payload_data       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_data    ), //i
    .io_pipelinedMemoryBus_cmd_payload_mask       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask    ), //i
    .io_pipelinedMemoryBus_rsp_valid              (system_apbBridge_io_pipelinedMemoryBus_rsp_valid                ), //o
    .io_pipelinedMemoryBus_rsp_payload_data       (system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data         ), //o
    
    .io_apb_PADDR                                 ( apbBridge_mst_PADDR   ), //o
    .io_apb_PSEL                                  ( apbBridge_mst_PSEL    ), //o
    .io_apb_PENABLE                               ( apbBridge_mst_PENABLE ), //o
    .io_apb_PREADY                                ( apbBridge_mst_PREADY  ), //i
    .io_apb_PWRITE                                ( apbBridge_mst_PWRITE  ), //o
    .io_apb_PWDATA                                ( apbBridge_mst_PWDATA  ), //o
    .io_apb_PRDATA                                ( apbBridge_mst_PRDATA  ), //i
    .io_apb_PSLVERROR                             ( apbBridge_mst_PSLVERR ), //i
    
    .io_clk                                       ( io_clk                ), //i
    .resetCtrl_systemReset                        ( resetCtrl_systemReset )  //i
);


ph1_logic_Apb3Decoder io_apb_decoder ( 
    .io_input_PADDR         ( apbBridge_mst_PADDR   ), //i
    .io_input_PSEL          ( apbBridge_mst_PSEL    ), //i
    .io_input_PENABLE       ( apbBridge_mst_PENABLE ), //i
    .io_input_PREADY        ( apbBridge_mst_PREADY  ), //o
    .io_input_PWRITE        ( apbBridge_mst_PWRITE  ), //i
    .io_input_PWDATA        ( apbBridge_mst_PWDATA  ), //i
    .io_input_PRDATA        ( apbBridge_mst_PRDATA  ), //o
    .io_input_PSLVERROR     ( apbBridge_mst_PSLVERR ), //o
    
    .io_output_PADDR        ( apb3decoder_mst_PADDR   ), //o
    .io_output_PSEL         ( apb3decoder_mst_PSEL    ), //o
    .io_output_PENABLE      ( apb3decoder_mst_PENABLE ), //o
    .io_output_PREADY       ( apb3decoder_mst_PREADY  ), //i
    .io_output_PWRITE       ( apb3decoder_mst_PWRITE  ), //o
    .io_output_PWDATA       ( apb3decoder_mst_PWDATA  ), //o
    .io_output_PRDATA       ( apb3decoder_mst_PRDATA  ), //i
    .io_output_PSLVERROR    ( apb3decoder_mst_PSLVERR )  //i
);

ph1_logic_Apb3Router apb3Router_1 ( 
    .io_input_PADDR            ( apb3decoder_mst_PADDR   ), //i
    .io_input_PSEL             ( apb3decoder_mst_PSEL    ), //i
    .io_input_PENABLE          ( apb3decoder_mst_PENABLE ), //i
    .io_input_PREADY           ( apb3decoder_mst_PREADY  ), //o
    .io_input_PWRITE           ( apb3decoder_mst_PWRITE  ), //i
    .io_input_PWDATA           ( apb3decoder_mst_PWDATA  ), //i
    .io_input_PRDATA           ( apb3decoder_mst_PRDATA  ), //o
    .io_input_PSLVERROR        ( apb3decoder_mst_PSLVERR ), //o
    
    .io_outputs_0_PADDR        ( apb3Router_0_PADDR   ), //o
    .io_outputs_0_PSEL         ( apb3Router_0_PSEL    ), //o
    .io_outputs_0_PENABLE      ( apb3Router_0_PENABLE ), //o
    .io_outputs_0_PREADY       ( apb3Router_0_PREADY  ), //i
    .io_outputs_0_PWRITE       ( apb3Router_0_PWRITE  ), //o
    .io_outputs_0_PWDATA       ( apb3Router_0_PWDATA  ), //o
    .io_outputs_0_PRDATA       ( apb3Router_0_PRDATA  ), //i
    .io_outputs_0_PSLVERROR    ( apb3Router_0_PSLVERR ), //i
    
    .io_outputs_1_PADDR        ( apb3Router_1_PADDR   ), //o
    .io_outputs_1_PSEL         ( apb3Router_1_PSEL    ), //o
    .io_outputs_1_PENABLE      ( apb3Router_1_PENABLE ), //o
    .io_outputs_1_PREADY       ( apb3Router_1_PREADY  ), //i
    .io_outputs_1_PWRITE       ( apb3Router_1_PWRITE  ), //o
    .io_outputs_1_PWDATA       ( apb3Router_1_PWDATA  ), //o
    .io_outputs_1_PRDATA       ( apb3Router_1_PRDATA  ), //i
    .io_outputs_1_PSLVERROR    ( apb3Router_1_PSLVERR ), //i
    
    .io_outputs_2_PADDR        ( apb3Router_2_PADDR   ), //o
    .io_outputs_2_PSEL         ( apb3Router_2_PSEL    ), //o
    .io_outputs_2_PENABLE      ( apb3Router_2_PENABLE ), //o
    .io_outputs_2_PREADY       ( apb3Router_2_PREADY  ), //i
    .io_outputs_2_PWRITE       ( apb3Router_2_PWRITE  ), //o
    .io_outputs_2_PWDATA       ( apb3Router_2_PWDATA  ), //o
    .io_outputs_2_PRDATA       ( apb3Router_2_PRDATA  ), //i
    .io_outputs_2_PSLVERROR    ( apb3Router_2_PSLVERR ), //i

    .io_outputs_3_PADDR        ( apb3Router_3_PADDR   ), //o
    .io_outputs_3_PSEL         ( apb3Router_3_PSEL    ), //o
    .io_outputs_3_PENABLE      ( apb3Router_3_PENABLE ), //o
    .io_outputs_3_PREADY       ( apb3Router_3_PREADY  ), //i
    .io_outputs_3_PWRITE       ( apb3Router_3_PWRITE  ), //o
    .io_outputs_3_PWDATA       ( apb3Router_3_PWDATA  ), //o
    .io_outputs_3_PRDATA       ( apb3Router_3_PRDATA  ), //i
    .io_outputs_3_PSLVERROR    ( apb3Router_3_PSLVERR ), //i

    .io_outputs_4_PADDR        ( apb3Router_4_PADDR   ), //o
    .io_outputs_4_PSEL         ( apb3Router_4_PSEL    ), //o
    .io_outputs_4_PENABLE      ( apb3Router_4_PENABLE ), //o
    .io_outputs_4_PREADY       ( apb3Router_4_PREADY  ), //i
    .io_outputs_4_PWRITE       ( apb3Router_4_PWRITE  ), //o
    .io_outputs_4_PWDATA       ( apb3Router_4_PWDATA  ), //o
    .io_outputs_4_PRDATA       ( apb3Router_4_PRDATA  ), //i
    .io_outputs_4_PSLVERROR    ( apb3Router_4_PSLVERR ), //i
    
    .io_clk                    (io_clk                                    ), //i
    .resetCtrl_systemReset     (resetCtrl_systemReset                     )  //i
);


ph1_logic_SopcUserRam system_ramCtrl(

    .io_clk              ( io_clk                   ), //i
    .io_rst              ( resetCtrl_systemReset    ), //i
    
    .io_apb_PADDR        ( apb3Router_1_PADDR[17:0] ), //i
    .io_apb_PSEL         ( apb3Router_1_PSEL        ), //i
    .io_apb_PENABLE      ( apb3Router_1_PENABLE     ), //i
    .io_apb_PREADY       ( apb3Router_1_PREADY      ), //o
    .io_apb_PWRITE       ( apb3Router_1_PWRITE      ), //i
    .io_apb_PWDATA       ( apb3Router_1_PWDATA      ), //i
    .io_apb_PRDATA       ( apb3Router_1_PRDATA      ), //o
    .io_apb_PSLVERROR    ( apb3Router_1_PSLVERR     ), //o

    .user_ram_addr       ( user_ram_addr            ),
    .user_ram_wr_en      ( user_ram_wr_en           ),
    .user_ram_rd_en      ( user_ram_rd_en           ),
    .user_ram_wr_data    ( user_ram_wr_data         ),
    .user_ram_rd_data    ( user_ram_rd_data         ) 
);


ph1_logic_SopcTimer system_timerCtrl ( 
    .io_clk                   ( io_clk                        ), //i
    .io_rst                   ( resetCtrl_systemReset         ), //i
    .io_apb_PADDR             ( apb3Router_2_PADDR            ), //i
    .io_apb_PSEL              ( apb3Router_2_PSEL             ), //i
    .io_apb_PENABLE           ( apb3Router_2_PENABLE          ), //i
    .io_apb_PREADY            ( apb3Router_2_PREADY           ), //o
    .io_apb_PWRITE            ( apb3Router_2_PWRITE           ), //i
    .io_apb_PWDATA            ( apb3Router_2_PWDATA           ), //i
    .io_apb_PRDATA            ( apb3Router_2_PRDATA           ), //o
    .io_apb_PSLVERROR         ( apb3Router_2_PSLVERR          ), //o
    
    .io_interruptClear        ( system_timerInterruptClear    ), //i
    .io_interrupt             ( system_timerCtrl_io_interrupt )  //o
);

ph1_logic_SopcGpio system_gpioCtrl ( 
    .io_clk              ( io_clk                ), //i
    .io_rst              ( resetCtrl_systemReset | io_rst ), //i
    
    .io_apb_PADDR        ( apb3Router_3_PADDR    ), //i
    .io_apb_PSEL         ( apb3Router_3_PSEL     ), //i
    .io_apb_PENABLE      ( apb3Router_3_PENABLE  ), //i
    .io_apb_PREADY       ( apb3Router_3_PREADY   ), //o
    .io_apb_PWRITE       ( apb3Router_3_PWRITE   ), //i
    .io_apb_PWDATA       ( apb3Router_3_PWDATA   ), //i
    .io_apb_PRDATA       ( apb3Router_3_PRDATA   ), //o
    .io_apb_PSLVERROR    ( apb3Router_3_PSLVERR  ), //o
    
    .io_gpio_user        ( io_gpio_user          ), //i
    .io_gpio_read        ( io_gpio_read          ), //i
    .io_gpio_write       ( io_gpio_write         )  //o
);

`ifndef PH1_DDR_SIM
    ph1_logic_apb_uart #(
     .CLOCK_RATE ( CLOCK_RATE )
)system_uartCtrl (

    .apb_pclk   ( io_clk                ), // input
    .apb_prstn  (~resetCtrl_systemReset ), // input
    .apb_pready ( apb3Router_4_PREADY   ), // output
    .apb_psel   ( apb3Router_4_PSEL     ), // input
    .apb_penable( apb3Router_4_PENABLE  ), // input
    .apb_pwrite ( apb3Router_4_PWRITE   ), // input
    .apb_paddr  ( apb3Router_4_PADDR    ), // input
    .apb_pwdata ( apb3Router_4_PWDATA   ), // input
    .apb_prdata ( apb3Router_4_PRDATA   ), // output
    .apb_pslverr( apb3Router_4_PSLVERR  ), // output

    .uart_rxd   ( io_uart_rxd           ), // input
    .uart_txd   ( io_uart_txd           )  // output
);
`else
    assign apb3Router_4_PSLVERR = 1'b0 ;
    assign apb3Router_4_PREADY  = 1'b1 ;
    assign apb3Router_4_PRDATA  = 32'h0;
`endif



always @(*) begin
    if (system_mainBusDecoder_logic_rspSourceId)
        _zz_12_ = system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data;
    else
        _zz_12_ = system_ram_io_bus_rsp_payload_data;
end


assign system_cpu_dBus_cmd_halfPipe_valid = system_cpu_dBus_cmd_halfPipe_regs_valid;
assign system_cpu_dBus_cmd_halfPipe_payload_wr = system_cpu_dBus_cmd_halfPipe_regs_payload_wr;
assign system_cpu_dBus_cmd_halfPipe_payload_address = system_cpu_dBus_cmd_halfPipe_regs_payload_address;
assign system_cpu_dBus_cmd_halfPipe_payload_data = system_cpu_dBus_cmd_halfPipe_regs_payload_data;
assign system_cpu_dBus_cmd_halfPipe_payload_size = system_cpu_dBus_cmd_halfPipe_regs_payload_size;
assign system_cpu_dBus_cmd_halfPipe_ready = system_mainBusArbiter_io_dBus_cmd_ready;

assign system_timerInterrupt    = system_timerCtrl_io_interrupt;
assign system_externalInterrupt = system_uartCtrl_io_interrupt;
assign system_softwareInterrupt = io_interrupt;
assign io_interruptClear = system_softwareInterruptClear;
assign system_timerInterruptClear = system_interruptCtrl_io_timerInterruptClear;
assign system_externalInterruptClear = system_interruptCtrl_io_externalInterruptClear;
assign system_softwareInterruptClear = system_interruptCtrl_io_softwareInterruptClear;
assign system_mainBusDecoder_logic_masterPipelined_cmd_valid           = system_mainBusArbiter_io_masterBus_cmd_valid;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_write   = system_mainBusArbiter_io_masterBus_cmd_payload_write;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_address = system_mainBusArbiter_io_masterBus_cmd_payload_address;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_data    = system_mainBusArbiter_io_masterBus_cmd_payload_data;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask    = system_mainBusArbiter_io_masterBus_cmd_payload_mask;
assign system_mainBusDecoder_logic_hits_0 = ((system_mainBusDecoder_logic_masterPipelined_cmd_payload_address & (~ 32'h0000ffff)) == 32'h80000000);
assign system_mainBusDecoder_logic_hits_1 = ((system_mainBusDecoder_logic_masterPipelined_cmd_payload_address & (~ 32'h0fffffff)) == 32'hf0000000);
assign system_mainBusDecoder_logic_noHit  = ({system_mainBusDecoder_logic_hits_1, system_mainBusDecoder_logic_hits_0} == 2'b00);


always @ (*) begin
    system_ram_io_bus_cmd_valid = (system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_hits_0);
    if(_zz_14_)begin
        system_ram_io_bus_cmd_valid = 1'b0;
    end
end

//  assign system_ram_io_bus_cmd_payload_write = system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
always @ (*) begin
    _zz_7_ = (system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_hits_1);
    if(_zz_14_)begin
         _zz_7_ = 1'b0;
    end
end

  assign _zz_4_ = system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
  always @ (*) begin
    system_mainBusDecoder_logic_masterPipelined_cmd_ready = (({(system_mainBusDecoder_logic_hits_1 && system_apbBridge_io_pipelinedMemoryBus_cmd_ready),(system_mainBusDecoder_logic_hits_0 && system_ram_io_bus_cmd_ready)} != (2'b00)) || system_mainBusDecoder_logic_noHit);
    if(_zz_14_)begin
      system_mainBusDecoder_logic_masterPipelined_cmd_ready = 1'b0;
    end
  end

assign system_mainBusDecoder_logic_masterPipelined_rsp_valid = (system_apbBridge_io_pipelinedMemoryBus_rsp_valid || system_ram_io_bus_rsp_valid) || (system_mainBusDecoder_logic_rspPending && system_mainBusDecoder_logic_rspNoHit);
assign system_mainBusDecoder_logic_masterPipelined_rsp_payload_data = _zz_12_;

  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      system_interruptType <= (2'b00);
      system_cpu_dBus_cmd_halfPipe_regs_valid <= 1'b0;
      system_cpu_dBus_cmd_halfPipe_regs_ready <= 1'b1;
      system_mainBusDecoder_logic_rspPending  <= 1'b0;
      system_mainBusDecoder_logic_rspNoHit    <= 1'b0;
    end else begin
      if(system_timerInterruptClear || system_externalInterruptClear || system_softwareInterruptClear)begin
        system_interruptType <= (2'b00);
      end else begin
        if((system_timerInterrupt && (system_interruptType == (2'b00))))begin
          system_interruptType <= (2'b01);
        end else begin
          if((system_externalInterrupt && (system_interruptType == (2'b00))))begin
            system_interruptType <= (2'b10);
          end else begin
            if((system_softwareInterrupt && (system_interruptType == (2'b00))))begin
              system_interruptType <= (2'b11);
            end
          end
        end
      end
      if(_zz_15_)begin
        system_cpu_dBus_cmd_halfPipe_regs_valid <= system_cpu_dBus_cmd_valid;
        system_cpu_dBus_cmd_halfPipe_regs_ready <= (! system_cpu_dBus_cmd_valid);
      end else begin
        system_cpu_dBus_cmd_halfPipe_regs_valid <= (! system_cpu_dBus_cmd_halfPipe_ready);
        system_cpu_dBus_cmd_halfPipe_regs_ready <= system_cpu_dBus_cmd_halfPipe_ready;
      end
      if(system_mainBusDecoder_logic_masterPipelined_rsp_valid)begin
        system_mainBusDecoder_logic_rspPending <= 1'b0;
      end
      if(((system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_masterPipelined_cmd_ready) && (! system_mainBusDecoder_logic_masterPipelined_cmd_payload_write)))begin
        system_mainBusDecoder_logic_rspPending <= 1'b1;
      end
      system_mainBusDecoder_logic_rspNoHit <= 1'b0;
      if(system_mainBusDecoder_logic_noHit)begin
        system_mainBusDecoder_logic_rspNoHit <= 1'b1;
      end
    end
  end

  always @ (posedge io_clk) begin
    if(_zz_15_)begin
      system_cpu_dBus_cmd_halfPipe_regs_payload_wr <= system_cpu_dBus_cmd_payload_wr;
      system_cpu_dBus_cmd_halfPipe_regs_payload_address <= system_cpu_dBus_cmd_payload_address;
      system_cpu_dBus_cmd_halfPipe_regs_payload_data <= system_cpu_dBus_cmd_payload_data;
      system_cpu_dBus_cmd_halfPipe_regs_payload_size <= system_cpu_dBus_cmd_payload_size;
    end
    if((system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_masterPipelined_cmd_ready))begin
      system_mainBusDecoder_logic_rspSourceId <= system_mainBusDecoder_logic_hits_1;
    end
  end

always @ (posedge io_clk) begin
    system_cpu_debug_resetOut_regNext <= system_cpu_debug_resetOut;
end

//-------- external apb port --------//
assign io_apb_PADDR   = apb3Router_0_PADDR   ;
assign io_apb_PSEL    = apb3Router_0_PSEL    ;
assign io_apb_PENABLE = apb3Router_0_PENABLE ;
assign io_apb_PWRITE  = apb3Router_0_PWRITE  ;
assign io_apb_PWDATA  = apb3Router_0_PWDATA  ;

assign apb3Router_0_PREADY  = io_apb_PREADY  ;
assign apb3Router_0_PRDATA  = io_apb_PRDATA  ;
assign apb3Router_0_PSLVERR = io_apb_PSLVERR ;

//-------- Debug Ports --------//

endmodule

`timescale 1ps/1ps

module ph1_logic_AlcPipelinedMemoryBusRam #(
`ifdef USE_DEBUG
    parameter RAM_DEPTH = 8192
`else
	parameter RAM_DEPTH = 4096
`endif
)(
    input           io_bus_cmd_valid,
    output          io_bus_cmd_ready,
    input           io_bus_cmd_payload_write,
    input   [31:0]  io_bus_cmd_payload_address,
    input   [31:0]  io_bus_cmd_payload_data,
    input   [ 3:0]  io_bus_cmd_payload_mask,
    output          io_bus_rsp_valid,
    output  [31:0]  io_bus_rsp_payload_data,
    input           io_clk,
    input           resetCtrl_systemReset 
);  


function integer clogb2 (input integer size);
begin
    size = size - 1;
    for (clogb2=1; size>1; clogb2=clogb2+1)
        size = size >> 1;
    end
endfunction // clogb2

localparam ADDR_WIDTH = clogb2(RAM_DEPTH);

reg         bus_rsp_valid;

wire [31:0] bus_data ;
wire [31:0] bus_addr ;

wire [ADDR_WIDTH-1:0] ram_addr ;

`ifndef PH1_DDR_SIM
reg  [31:0] ram_data ;
wire [31:0] ram_wrdata ;
wire [31:0] ram_rddata ;

ph1_logic_mcu_ram u_mcu_ram ( 
    .doa   ( ram_rddata ), 
    .dia   ( ram_wrdata ),     
    .addra ( ram_addr   ),     
    .clka  ( io_clk     ),     
    .wea   ( io_bus_cmd_valid && io_bus_cmd_payload_write ),     
    .bea   ( io_bus_cmd_payload_mask )
);

always @ (posedge io_clk) begin
    if(io_bus_cmd_valid) begin
        ram_data <= ram_rddata ;
    end
end

assign ram_wrdata = bus_data ;
assign io_bus_rsp_payload_data = ram_rddata; //ram_data;

`else

reg  [31:0] ram_symbol [0:RAM_DEPTH-1];
reg  [31:0] ram_data ;

string cpu_sim_txt_path;

initial begin
	$value$plusargs("CPU_SIM_PATH=%s",cpu_sim_txt_path);
    $readmemh(cpu_sim_txt_path,ram_symbol);
end

always @ (posedge io_clk) begin
    if(io_bus_cmd_valid) begin
        ram_data <= ram_symbol[ram_addr];
    end
end

always @ (posedge io_clk) begin
    if ( io_bus_cmd_valid && io_bus_cmd_payload_write ) begin
        ram_symbol[ram_addr][ 7: 0] <= io_bus_cmd_payload_mask[0] ? bus_data[7 : 0] : ram_symbol[ram_addr][ 7: 0];
        ram_symbol[ram_addr][15: 8] <= io_bus_cmd_payload_mask[1] ? bus_data[15: 8] : ram_symbol[ram_addr][15: 8];
        ram_symbol[ram_addr][23:16] <= io_bus_cmd_payload_mask[2] ? bus_data[23:16] : ram_symbol[ram_addr][23:16];
        ram_symbol[ram_addr][31:24] <= io_bus_cmd_payload_mask[3] ? bus_data[31:24] : ram_symbol[ram_addr][31:24];
    end
end

assign io_bus_rsp_payload_data = ram_data;

`endif

assign io_bus_rsp_valid = bus_rsp_valid ;
assign io_bus_cmd_ready = 1'b1;

assign bus_data = io_bus_cmd_payload_data;
assign bus_addr = (io_bus_cmd_payload_address >> 2);

assign ram_addr = bus_addr[ADDR_WIDTH-1:0];

always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset)
        bus_rsp_valid <= 1'b0;
    else
        bus_rsp_valid <= ((io_bus_cmd_valid && io_bus_cmd_ready) && (!io_bus_cmd_payload_write));
end


endmodule

`timescale 1ps/1ps

module ph1_logic_Apb3Decoder (
    input      [27:0]   io_input_PADDR,
    input      [0:0]    io_input_PSEL,
    input               io_input_PENABLE,
    output reg          io_input_PREADY,
    input               io_input_PWRITE,
    input      [31:0]   io_input_PWDATA,
    output     [31:0]   io_input_PRDATA,
    output reg          io_input_PSLVERROR,
    output     [27:0]   io_output_PADDR,
    output reg [4:0]    io_output_PSEL,
    output              io_output_PENABLE,
    input               io_output_PREADY,
    output              io_output_PWRITE,
    output     [31:0]   io_output_PWDATA,
    input      [31:0]   io_output_PRDATA,
    input               io_output_PSLVERROR 
);

wire  no_map;

assign no_map = io_input_PSEL[0] && (io_output_PSEL == 5'h0);
assign io_output_PADDR   = io_input_PADDR;
assign io_output_PENABLE = io_input_PENABLE;
assign io_output_PWRITE  = io_input_PWRITE;
assign io_output_PWDATA  = io_input_PWDATA;
assign io_input_PRDATA   = io_output_PRDATA;

always @ (*) begin
    io_output_PSEL[0] = ((io_input_PADDR & 28'hffc0000) == 28'h0000000) && io_input_PSEL[0];
    io_output_PSEL[1] = ((io_input_PADDR & 28'hfff0000) == 28'h0040000) && io_input_PSEL[0];    
    io_output_PSEL[2] = ((io_input_PADDR & 28'hffff000) == 28'h0080000) && io_input_PSEL[0];
    io_output_PSEL[3] = ((io_input_PADDR & 28'hffff000) == 28'h0081000) && io_input_PSEL[0];
    io_output_PSEL[4] = ((io_input_PADDR & 28'hffff000) == 28'h0082000) && io_input_PSEL[0];
end

always @ (*) begin
    io_input_PREADY    = io_output_PREADY;
    io_input_PSLVERROR = io_output_PSLVERROR;
    if(no_map)begin
        io_input_PREADY    = 1'b1;
        io_input_PSLVERROR = 1'b1;
    end
end

endmodule

`timescale 1ps/1ps
module ph1_logic_Apb3Router (
  input      [27:0]   io_input_PADDR,
  input      [4:0]    io_input_PSEL,
  input               io_input_PENABLE,
  output              io_input_PREADY,
  input               io_input_PWRITE,
  input      [31:0]   io_input_PWDATA,
  output     [31:0]   io_input_PRDATA,
  output              io_input_PSLVERROR,
  
  output     [27:0]   io_outputs_0_PADDR,
  output     [0:0]    io_outputs_0_PSEL,
  output              io_outputs_0_PENABLE,
  input               io_outputs_0_PREADY,
  output              io_outputs_0_PWRITE,
  output     [31:0]   io_outputs_0_PWDATA,
  input      [31:0]   io_outputs_0_PRDATA,
  input               io_outputs_0_PSLVERROR,

  output     [27:0]   io_outputs_1_PADDR,
  output     [0:0]    io_outputs_1_PSEL,
  output              io_outputs_1_PENABLE,
  input               io_outputs_1_PREADY,
  output              io_outputs_1_PWRITE,
  output     [31:0]   io_outputs_1_PWDATA,
  input      [31:0]   io_outputs_1_PRDATA,
  input               io_outputs_1_PSLVERROR,

  output     [27:0]   io_outputs_2_PADDR,
  output     [0:0]    io_outputs_2_PSEL,
  output              io_outputs_2_PENABLE,
  input               io_outputs_2_PREADY,
  output              io_outputs_2_PWRITE,
  output     [31:0]   io_outputs_2_PWDATA,
  input      [31:0]   io_outputs_2_PRDATA,
  input               io_outputs_2_PSLVERROR,

  output     [27:0]   io_outputs_3_PADDR,
  output     [0:0]    io_outputs_3_PSEL,
  output              io_outputs_3_PENABLE,
  input               io_outputs_3_PREADY,
  output              io_outputs_3_PWRITE,
  output     [31:0]   io_outputs_3_PWDATA,
  input      [31:0]   io_outputs_3_PRDATA,
  input               io_outputs_3_PSLVERROR,

  output     [27:0]   io_outputs_4_PADDR,
  output     [0:0]    io_outputs_4_PSEL,
  output              io_outputs_4_PENABLE,
  input               io_outputs_4_PREADY,
  output              io_outputs_4_PWRITE,
  output     [31:0]   io_outputs_4_PWDATA,
  input      [31:0]   io_outputs_4_PRDATA,
  input               io_outputs_4_PSLVERROR,

  input               io_clk,
  input               resetCtrl_systemReset 
);

reg                 pready_int;
reg        [31:0]   prdata_int;
reg                 pslverr_int;

wire                _zz_2_;
wire                _zz_4_;
wire                _zz_3_;

reg        [2:0]    selIndex;

assign _zz_2_ =  io_input_PSEL[4];
assign _zz_4_ = (io_input_PSEL[2] || io_input_PSEL[3]);
assign _zz_3_ = (io_input_PSEL[1] || io_input_PSEL[3]);

always @ (posedge io_clk) begin
    selIndex <= {_zz_2_, _zz_4_, _zz_3_};
end

always @(*) begin
    case(selIndex)
        3'b000 : begin
            pready_int  = io_outputs_0_PREADY;
            prdata_int  = io_outputs_0_PRDATA;
            pslverr_int = io_outputs_0_PSLVERROR;
        end
        3'b001 : begin
            pready_int  = io_outputs_1_PREADY;
            prdata_int  = io_outputs_1_PRDATA;
            pslverr_int = io_outputs_1_PSLVERROR;
        end
        3'b010 : begin
            pready_int  = io_outputs_2_PREADY;
            prdata_int  = io_outputs_2_PRDATA;
            pslverr_int = io_outputs_2_PSLVERROR;
        end
        3'b011 : begin
            pready_int  = io_outputs_3_PREADY;
            prdata_int  = io_outputs_3_PRDATA;
            pslverr_int = io_outputs_3_PSLVERROR;
        end
        default : begin
            pready_int  = io_outputs_4_PREADY;
            prdata_int  = io_outputs_4_PRDATA;
            pslverr_int = io_outputs_4_PSLVERROR;
        end
    endcase
end

assign io_outputs_0_PADDR   = io_input_PADDR;
assign io_outputs_0_PENABLE = io_input_PENABLE;
assign io_outputs_0_PSEL[0] = io_input_PSEL[0];
assign io_outputs_0_PWRITE  = io_input_PWRITE;
assign io_outputs_0_PWDATA  = io_input_PWDATA;

assign io_outputs_1_PADDR   = io_input_PADDR;
assign io_outputs_1_PENABLE = io_input_PENABLE;
assign io_outputs_1_PSEL[0] = io_input_PSEL[1];
assign io_outputs_1_PWRITE  = io_input_PWRITE;
assign io_outputs_1_PWDATA  = io_input_PWDATA;

assign io_outputs_2_PADDR   = io_input_PADDR;
assign io_outputs_2_PENABLE = io_input_PENABLE;
assign io_outputs_2_PSEL[0] = io_input_PSEL[2];
assign io_outputs_2_PWRITE  = io_input_PWRITE;
assign io_outputs_2_PWDATA  = io_input_PWDATA;

assign io_outputs_3_PADDR   = io_input_PADDR;
assign io_outputs_3_PENABLE = io_input_PENABLE;
assign io_outputs_3_PSEL[0] = io_input_PSEL[3];
assign io_outputs_3_PWRITE  = io_input_PWRITE;
assign io_outputs_3_PWDATA  = io_input_PWDATA;

assign io_outputs_4_PADDR   = io_input_PADDR;
assign io_outputs_4_PENABLE = io_input_PENABLE;
assign io_outputs_4_PSEL[0] = io_input_PSEL[4];
assign io_outputs_4_PWRITE  = io_input_PWRITE;
assign io_outputs_4_PWDATA  = io_input_PWDATA;

assign io_input_PREADY    = pready_int;
assign io_input_PRDATA    = prdata_int;
assign io_input_PSLVERROR = pslverr_int;

endmodule

`timescale 1ps / 1ps
module ph1_logic_BufferCC (
    input               io_clk,
    input               io_dataIn,
    output              io_dataOut
);    

reg    buffers_0;
reg    buffers_1;

always @ (posedge io_clk) begin
    buffers_0 <= io_dataIn ;
    buffers_1 <= buffers_0 ;
end    

assign io_dataOut = buffers_1;

endmodule

`timescale 1ns / 1ps

module ph1_logic_mcu_ram ( doa, dia, addra, clka, wea, bea );


	parameter DATA_WIDTH_A = 32; 
	parameter ADDR_WIDTH_A = 13;
`ifdef USE_DEBUG
	parameter DATA_DEPTH_A = 8192;
	parameter DATA_DEPTH_B = 8192;
`else
	parameter DATA_DEPTH_A = 4096;
	parameter DATA_DEPTH_B = 4096;
`endif
	parameter DATA_WIDTH_B = 32;
	parameter ADDR_WIDTH_B = 13;
	parameter REGMODE_A    = "NOREG";
	parameter WRITEMODE_A  = "NORMAL";
	parameter RESETMODE_A  = "ASYNC";

	output [DATA_WIDTH_A-1:0] doa;

	input  [DATA_WIDTH_A-1:0] dia;
	input  [ADDR_WIDTH_A-1:0] addra;
	input  wea;
	input  [3:0] bea;
	input  clka;



	PH1_LOGIC_ERAM #( .DATA_WIDTH_A(DATA_WIDTH_A),
				.ADDR_WIDTH_A(ADDR_WIDTH_A),
				.DATA_DEPTH_A(DATA_DEPTH_A),
				.DATA_WIDTH_B(DATA_WIDTH_B),
				.ADDR_WIDTH_B(ADDR_WIDTH_B),
				.DATA_DEPTH_B(DATA_DEPTH_B),
				.BYTE_ENABLE(8),
				.BYTE_A(4),
				.BYTE_B(4),
				.MODE("SP"),
				.REGMODE_A(REGMODE_A),
				.WRITEMODE_A(WRITEMODE_A),
				.IMPLEMENT("20K"),
				.ECC_ENCODE("DISABLE"),
				.ECC_DECODE("DISABLE"),
				.CLKMODE("ASYNC"),
				.SSROVERCE("ENABLE"),
				.OREGSET_A("RESET"),
				.RESETMODE_A(RESETMODE_A),
				.ASYNC_RESET_RELEASE_A("ASYNC"),
				.DEBUGGABLE("NO"),
				.PACKABLE("NO"),
			`ifdef USE_DEBUG
				.INIT_FILE("ddr_ip_dbg.mif"),
			`else
				.INIT_FILE("ddr_ip.mif"),
			`endif
				.FILL_ALL("NONE"))
			inst(
				.dia(dia),
				.dib({32{1'b0}}),
				.addra(addra),
				.addrb({13{1'b0}}),
				.cea(1'b1),
				.ceb(1'b0),
				.ocea(1'b0),
				.oceb(1'b0),
				.clka(clka),
				.clkb(1'b0),
				.wea(wea),
				.bea(bea),
				.web(1'b0),
				.beb(1'b0),
				.rsta(1'b0),
				.rstb(1'b0),
				.doa(doa),
				.dob(),
				.ecc_sbiterr(open),
				.ecc_dbiterr(open));


endmodule

`timescale 1ps/1ps
module ph1_logic_MuraxMasterArbiter (
  input               io_iBus_cmd_valid,
  output reg          io_iBus_cmd_ready,
  input      [31:0]   io_iBus_cmd_payload_pc,
  output              io_iBus_rsp_valid,
  output              io_iBus_rsp_payload_error,
  output     [31:0]   io_iBus_rsp_payload_inst,
  input               io_dBus_cmd_valid,
  output reg          io_dBus_cmd_ready,
  input               io_dBus_cmd_payload_wr,
  input      [31:0]   io_dBus_cmd_payload_address,
  input      [31:0]   io_dBus_cmd_payload_data,
  input      [1:0]    io_dBus_cmd_payload_size,
  output              io_dBus_rsp_ready,
  output              io_dBus_rsp_error,
  output     [31:0]   io_dBus_rsp_data,
  output reg          io_masterBus_cmd_valid,
  input               io_masterBus_cmd_ready,
  output              io_masterBus_cmd_payload_write,
  output     [31:0]   io_masterBus_cmd_payload_address,
  output     [31:0]   io_masterBus_cmd_payload_data,
  output     [3:0]    io_masterBus_cmd_payload_mask,
  input               io_masterBus_rsp_valid,
  input      [31:0]   io_masterBus_rsp_payload_data,
  input               io_clk,
  input               resetCtrl_systemReset 
);
  wire                _zz_2_;
  reg        [3:0]    _zz_1_;
  reg                 rspPending;
  reg                 rspTarget;

  assign _zz_2_ = (rspPending && (! io_masterBus_rsp_valid));
  always @ (*) begin
    io_masterBus_cmd_valid = (io_iBus_cmd_valid || io_dBus_cmd_valid);
    if(_zz_2_)begin
      io_masterBus_cmd_valid = 1'b0;
    end
  end

  assign io_masterBus_cmd_payload_write = (io_dBus_cmd_valid && io_dBus_cmd_payload_wr);
  assign io_masterBus_cmd_payload_address = (io_dBus_cmd_valid ? io_dBus_cmd_payload_address : io_iBus_cmd_payload_pc);
  assign io_masterBus_cmd_payload_data = io_dBus_cmd_payload_data;
  always @ (*) begin
    case(io_dBus_cmd_payload_size)
      2'b00 : begin
        _zz_1_ = (4'b0001);
      end
      2'b01 : begin
        _zz_1_ = (4'b0011);
      end
      default : begin
        _zz_1_ = (4'b1111);
      end
    endcase
  end

  assign io_masterBus_cmd_payload_mask = (_zz_1_ <<< io_dBus_cmd_payload_address[1 : 0]);
  always @ (*) begin
    io_iBus_cmd_ready = (io_masterBus_cmd_ready && (! io_dBus_cmd_valid));
    if(_zz_2_)begin
      io_iBus_cmd_ready = 1'b0;
    end
  end

  always @ (*) begin
    io_dBus_cmd_ready = io_masterBus_cmd_ready;
    if(_zz_2_)begin
      io_dBus_cmd_ready = 1'b0;
    end
  end

  assign io_iBus_rsp_valid = (io_masterBus_rsp_valid && (! rspTarget));
  assign io_iBus_rsp_payload_inst = io_masterBus_rsp_payload_data;
  assign io_iBus_rsp_payload_error = 1'b0;
  assign io_dBus_rsp_ready = (io_masterBus_rsp_valid && rspTarget);
  assign io_dBus_rsp_data = io_masterBus_rsp_payload_data;
  assign io_dBus_rsp_error = 1'b0;
  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      rspPending <= 1'b0;
      rspTarget <= 1'b0;
    end else begin
      if(io_masterBus_rsp_valid)begin
        rspPending <= 1'b0;
      end
      if(((io_masterBus_cmd_valid && io_masterBus_cmd_ready) && (! io_masterBus_cmd_payload_write)))begin
        rspTarget <= io_dBus_cmd_valid;
        rspPending <= 1'b1;
      end
    end
  end


endmodule

`timescale 1ps/1ps
module ph1_logic_PipelinedMemoryBusToApbBridge (
  input               io_pipelinedMemoryBus_cmd_valid,
  output              io_pipelinedMemoryBus_cmd_ready,
  input               io_pipelinedMemoryBus_cmd_payload_write,
  input      [31:0]   io_pipelinedMemoryBus_cmd_payload_address,
  input      [31:0]   io_pipelinedMemoryBus_cmd_payload_data,
  input      [3:0]    io_pipelinedMemoryBus_cmd_payload_mask,
  output              io_pipelinedMemoryBus_rsp_valid,
  output     [31:0]   io_pipelinedMemoryBus_rsp_payload_data,
  
  output     [27:0]   io_apb_PADDR,
  output     [0:0]    io_apb_PSEL,
  output              io_apb_PENABLE,
  input               io_apb_PREADY,
  output              io_apb_PWRITE,
  output     [31:0]   io_apb_PWDATA,
  input      [31:0]   io_apb_PRDATA,
  input               io_apb_PSLVERROR,
  
  input               io_clk,
  input               resetCtrl_systemReset 
);

wire                _zz_2_;

wire                pipelinedMemoryBusStage_cmd_valid;
reg                 pipelinedMemoryBusStage_cmd_ready;
wire                pipelinedMemoryBusStage_cmd_payload_write;
wire       [31:0]   pipelinedMemoryBusStage_cmd_payload_address;
wire       [31:0]   pipelinedMemoryBusStage_cmd_payload_data;
wire       [3:0]    pipelinedMemoryBusStage_cmd_payload_mask;
reg                 pipelinedMemoryBusStage_rsp_valid;
wire       [31:0]   pipelinedMemoryBusStage_rsp_payload_data;
wire                io_pipelinedMemoryBus_cmd_halfPipe_valid;
wire                io_pipelinedMemoryBus_cmd_halfPipe_ready;
wire                io_pipelinedMemoryBus_cmd_halfPipe_payload_write;
wire       [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_payload_address;
wire       [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_payload_data;
wire       [3:0]    io_pipelinedMemoryBus_cmd_halfPipe_payload_mask;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_valid;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_ready;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write;
reg        [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address;
reg        [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data;
reg        [3:0]    io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask;
reg                 pipelinedMemoryBusStage_rsp_regNext_valid;
reg        [31:0]   pipelinedMemoryBusStage_rsp_regNext_payload_data;
reg                 state;
wire                state_inv ;

assign state_inv = ~state;
assign _zz_2_ = (! io_pipelinedMemoryBus_cmd_halfPipe_regs_valid);

assign io_pipelinedMemoryBus_cmd_halfPipe_valid           = io_pipelinedMemoryBus_cmd_halfPipe_regs_valid;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_write   = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_address = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_data    = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_mask    = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask;
assign io_pipelinedMemoryBus_cmd_ready                    = io_pipelinedMemoryBus_cmd_halfPipe_regs_ready;
assign pipelinedMemoryBusStage_cmd_valid                  = io_pipelinedMemoryBus_cmd_halfPipe_valid;
assign io_pipelinedMemoryBus_cmd_halfPipe_ready           = pipelinedMemoryBusStage_cmd_ready;
assign pipelinedMemoryBusStage_cmd_payload_write          = io_pipelinedMemoryBus_cmd_halfPipe_payload_write;
assign pipelinedMemoryBusStage_cmd_payload_address        = io_pipelinedMemoryBus_cmd_halfPipe_payload_address;
assign pipelinedMemoryBusStage_cmd_payload_data           = io_pipelinedMemoryBus_cmd_halfPipe_payload_data;
assign pipelinedMemoryBusStage_cmd_payload_mask           = io_pipelinedMemoryBus_cmd_halfPipe_payload_mask;
assign io_pipelinedMemoryBus_rsp_valid                    = pipelinedMemoryBusStage_rsp_regNext_valid;
assign io_pipelinedMemoryBus_rsp_payload_data             = pipelinedMemoryBusStage_rsp_regNext_payload_data;

always @ (*) begin
    pipelinedMemoryBusStage_cmd_ready = 1'b0;
    pipelinedMemoryBusStage_rsp_valid = 1'b0;
    if (state == 1'b1 ) begin
        if( io_apb_PREADY == 1'b1 )begin
            pipelinedMemoryBusStage_cmd_ready = 1'b1;
            pipelinedMemoryBusStage_rsp_valid = ~pipelinedMemoryBusStage_cmd_payload_write;
        end
    end
end

assign io_apb_PSEL[0] = pipelinedMemoryBusStage_cmd_valid;
assign io_apb_PENABLE = state;
assign io_apb_PWRITE  = pipelinedMemoryBusStage_cmd_payload_write;
assign io_apb_PADDR   = pipelinedMemoryBusStage_cmd_payload_address[27:0];
assign io_apb_PWDATA  = pipelinedMemoryBusStage_cmd_payload_data;

assign pipelinedMemoryBusStage_rsp_payload_data = io_apb_PRDATA;

always @ (posedge io_clk or posedge resetCtrl_systemReset)
begin
    if (resetCtrl_systemReset)
        state <= 1'b0 ;
    else if ( state_inv )
        state <= pipelinedMemoryBusStage_cmd_valid;
    else if ( io_apb_PREADY )
        state <= 1'b0;
end

always @ (posedge io_clk or posedge resetCtrl_systemReset)
begin
    if (resetCtrl_systemReset) begin
        io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <= 1'b0;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <= 1'b1;
        pipelinedMemoryBusStage_rsp_regNext_valid     <= 1'b0;
    end else begin
        if(_zz_2_)begin
            io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <=  io_pipelinedMemoryBus_cmd_valid;
            io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <= ~io_pipelinedMemoryBus_cmd_valid;
        end else begin
            io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <= ~io_pipelinedMemoryBus_cmd_halfPipe_ready;
            io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <=  io_pipelinedMemoryBus_cmd_halfPipe_ready;
        end
        
        pipelinedMemoryBusStage_rsp_regNext_valid <= pipelinedMemoryBusStage_rsp_valid;
        
    end
end

always @ (posedge io_clk) begin
    if(_zz_2_)begin
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write   <= io_pipelinedMemoryBus_cmd_payload_write;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address <= io_pipelinedMemoryBus_cmd_payload_address;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data    <= io_pipelinedMemoryBus_cmd_payload_data;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask    <= io_pipelinedMemoryBus_cmd_payload_mask;
    end
    
    pipelinedMemoryBusStage_rsp_regNext_payload_data <= pipelinedMemoryBusStage_rsp_payload_data;
end

endmodule

//***************************************************************************
// SOPC Core Modules - Encrypted
//***************************************************************************

`timescale 1ps/1ps
module ph1_logic_mcu (
    output              iBus_cmd_valid,
    input               iBus_cmd_ready,
    output     [31:0]   iBus_cmd_payload_pc,
    input               iBus_rsp_valid,
    input               iBus_rsp_payload_error,
    input      [31:0]   iBus_rsp_payload_inst,
    input               timerInterrupt,
    input               externalInterrupt,
    input               softwareInterrupt,
    input               debug_bus_cmd_valid,
    output reg          debug_bus_cmd_ready,
    input               debug_bus_cmd_payload_wr,
    input      [7:0]    debug_bus_cmd_payload_address,
    input      [31:0]   debug_bus_cmd_payload_data,
    output reg [31:0]   debug_bus_rsp_data,
    output              debug_resetOut,
    output              dBus_cmd_valid,
    input               dBus_cmd_ready,
    output              dBus_cmd_payload_wr,
    output     [31:0]   dBus_cmd_payload_address,
    output     [31:0]   dBus_cmd_payload_data,
    output     [1:0]    dBus_cmd_payload_size,
    input               dBus_rsp_ready,
    input               dBus_rsp_error,
    input      [31:0]   dBus_rsp_data,
    input               io_clk,
    input               resetCtrl_systemReset,
    input               resetCtrl_mainClkReset 
);

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "Anlogic"
`pragma protect encrypt_agent_info = "Anlogic Encryption Tool anlogic_2019"
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-002"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
Ps/q71pS440HWoa7EJWmvGjS5EeefwdZiLTc0LJF6mIELMAib0kf2sIZrp+RCBx9
vVHBd3c9ziEjfX/Rq8lhrIIC//ccRAxoPQ4bTd6gXOgYb3pws3/zqqRaPx+ZMtvK
bsQvg/NrVGiOse5lsR5n1SiO1QJ1TPmI0M24E417HmQ=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-003"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
YT666PEP52WU9kgED0CciRcXjVhyOtaArWRyKXmNQnmuylhlXlZeFQy+IIyYWNZr
+K0XQGEAmn8e5bR8ch03BQ2VHTCd1Ee1kxAB+PU4mhzDoSN5C9znx0u5ZYfavkAK
V1rW3MWbn/YYBjUX0ShZ9Sw6ahTuEn29NuJhqEerxyw=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-004"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
WeL3E8Qs4ZiiVYp+3iWNPHIcstha/TVFeXkGl+dQbAzDXbYJM7KNyFgU1MzbCxig
B0XMa08FMTm0kUoAU8ztMJoh97d1fXjDkTAuFQoRA+NqwU8wQcLDHSHeUlm9sZCP
fqEG5UCajsFYYWMlcyZHa02hgTCdjNid1xAwmc0pn+g=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-005"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
qBqi+zsSgwKJuutNd0RzKi/b2REFCWVVLLsWDGbfvZNNGhEXf7pK3XarkaL2EXD4
72JeFIEQ6ZYHOy7l5LXkUH0yKm2iJWpwJePhwTW7ZzZMngi7EcBwG6jq+iix2oWE
hT4San77gCR2vrdZuvbkJPXCkx1xyc14ylgVGGHwQ+I=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-006"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
EWMT0pwdGGI3jcmTG967aHRiiuXUYc5wglWKLCRjLo6Xc+Q1DS9bZkJSWI6YobwB
R7Yqg+YRhUwYseaYg3jfK3isYmdnuTk5p6P0lbJYzHApbB0IVhHBRSf7GwL+HODz
gD2NsAu54VEWi500BY9HvNdJ/j+inqfX9UV8X+pXrqg=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-007"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
kgBymX8Fi/67Yg3CsZAT1tnDFjYHva2332Bx59BSMUXXxMsjTOyLwUEy2GgdEEml
HG0dXp5eaaJGu1rfkfn4KU8D8/59k/PdgAuzRKEw7XF7qPCBUwciK4bwC3FgkRy+
eVmBKtLAAE1cRaqR6nGE1gfRf8mSCFbVchLsA3Rb72I=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-008"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
S2cTdcIAzgxJyxxmUR3falGUG93csxbxDadd9Pn0hp6y1wDnFROfVwQ+YRtJ/dmc
PFvl33Wm7itAVUdUAPCiyXj2RLSF0FIhdZ4EHcKGGmMxWJ0iySm/FzLN8TLQ5Fyf
4ClIn2f0cK0FGjlR5bG9JgWwQlWQxAB/ZhHxl8zlvWE=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-009"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
KpW8yQ6rvyZ+DgGeNgGLiwvWwnzrBTkMjrXcVmf4Zf+JiVIks+QubzSvhdsJB7Qa
LFl+x+SiKKpeI32aD5mT3vmHdpUBew7jifRw+EgxRlY86X4R+1/wATdrVk7wi3/z
Wx6HuP0RjqSpM0cAE3Gbp6iea74Ec/j4BEqPZYavpJA=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-beta"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
Yt5J+kDkOm7CWFPgpVNs6q0ooKduig5XgLeQp6+Wh41BjqeTxgraOGWqemMpWJij
XOt7Jt0XEaTRqLnSeqw0J5CvZxGN3ixDN4IZ3x7mcfM/OC9QD1yhFQpoZRcgqhkZ
hw2u5FpMvlE5tWWPie4D6SS6W/ad4suY5L6S+6OQqgI=
`pragma protect key_keyowner = "Cadence Design Systems.", key_keyname = "CDS_RSA_KEY_VER_1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
Dr1G99goDEs9dpvSxOjykQUa7Qm8id4Xb9VNrakOO3yzZlGQ7/kwDjjmz4GnEVqD
mixOp6U92NC9vHkHVV7WLD0e1A6niSQe0ydasYMcoy3qBRZfFJ8dAdPXmKNNXGun
XV7VG4YBO/R5EzrEVmdrhar6/ZBitQTMMRQk3ZF1fA6zrSYnA7tcm6wmmNSkexL1
zc+VTkqdmfxasaLoNYiF+fZ2COixEQvoLPp/jnSZ3Xzf631NIbbcH4Q1lss8+1D7
QdQQ8uJBeKajo1ds0TZjjTqlbScpSZMiYhzfi08juSNRj6rwNqiUrbPR/qV8u24e
vtGM5PvOxBH79CLv1zDGGg==
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
h284Ox5QmAcB8dv/Fz4ls9K0F8jBQgoyYIFGOxgcBqMK8FpGlrtguEYnUwvLyyT1
mtqP4ZC9ggBkKVc8C/Y89dSTxcIjXWqCAoXBgbEGNbpQcrNmZA4kHilkYtuJHdt5
2jmpyYRXV0L6tnkKVXscb3vXBEzOmzR133jqS+mb3wsOHGvYuMMTlv935MPcZSaq
2dhOK9RSw0RPLFj3Dudgci1pPER0A64WORve7rG9rn2yP6dhv1KqK8i3TOFnnzXJ
LZPfcsDQEAGf1XxOGHFcABtMyto9AUE2RA5c2YuF/AtdsylFk+DEsu1YWTePfzsm
r9A/6/0POP44iPIh6UBXrw==
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
fv6tB6ewj/OP16makJZSkNxiSCbbrhhwaWz4ztPpp2T4eLtSWPxYSEVAthBlfdJj
noT3nW3zHdJOjLSrTgKkwQEmSRQ50MRE48xyvdFf3nX5wmgLqD8pzv8cMNFG6o7/
+RBxOWnu1WPqCWyPfqDIFrLow9m5d9664bkYfssVXCY=
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
CuIQ/8uX1eCN3v/2WfqWRQt2v5V2CawG3E+UyL3mM5fq3nnb7vKwAZd3ux3/Z943
e7zicZe29FA4lN2PTDOTrcVBWvGFS7bmwr9m0DS7Tubx86hk560vRAw5rFTpWwTg
K+8gcW09WpX5uC4EPZOaQEy/dKoL9HXCUVeMONK7Wh8mYaA9uSoAVJ4fhGEn2tJF
yWpiFN8YXVbFI/Cdt9IM2ArRWqvTpav4SrU8X7R0i/PAJ0bGdjdu7NXpts+LUdZo
+D5jjcMM2ldDuaXHCG1diCXfjf1i2epj6zKG1PJyrjl18/U0cX0/0S7IvFsNZ9F8
0V0wvM6R6GQfPXZiyi9Vpg==
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
CvSMEE2ifjyZ+9Wlr8ovkGNCzrtKiYW/sMf/44Gz0CHf3Ot6giBsPYBapm7272mx
mwEblYRAm8MwnWGXY2TsCaz38W4U1eEmvfvzXhvRjXG8o34xa6GDaayTXdnau9ki
mdG0Pk9u1xW4Ayt5gJCbUbA1QPqqZMaQ/FmWgAMvR+k=
`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 137248)
`pragma protect data_block
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
v9cmUmWLsLWIVGrx9tQePaNyQNk7jtkqPnronFcwPx9Iwr4ibFdX0/xZh71WdTBl
fLi4d5yBpeqFX48/iEwldM37RjNhPVjvIVntwKPvVK8Kmkd88yREh7rhwcOZTW3w
6QliKYVQUZPj7MWGOOzsOjorOHYu9F0QoAzMRIVI7hheNYBeRfSqNRehHlxF3ZV7
5Agf7xHf+xV7YAYf78rOis5pmQXxLr27WvUDUNCfiBKDlNhUcqbqBI/2IoCX2WkA
4IJ8bbRx10BfKYzjvqI9gGQaDKD7DDDO7BZItqJ1yrVg4jrVGXI1r3T4dyCViL6L
LsQvk8BAtq3SPmpFmml7ciQh3zVW3iofkVvsiVzT2kS1cJmkv8UIh2D/7XLfER5k
eOUk81Aesj113zGYWyi2iPegUnyZep/uf3MleW8f9Lp6IzPnuxtKZG2gpFYdbWEx
lPdGue61QiqhiwlPNTxZNnn+qwNohLS9VWsETRkghrYSe2KlUEAgSsAfC8gV8t/L
/EkE54yowRb0TmprznxV5gYZ6iqM/tFHgfDss7u3WpAJWWoA1Wfg8d28EnuoMcDY
0H8TNiha1vhUOSnzFkvbKbF9iuyEPsdEkERHrJahHq9pmP6+yO21RaCBxpjhIFKi
GUB/fCzmDFL1wBAFcWsTdexK1m/qYi68p+E+TKp0bxyIJcBv+JgJ4TT2iAS+/vD9
33UYLkclNBAww4O5CC4MOCVuGNK1CIx2auYew1Zgff/7RS+WB2RlRaHyHjsnGlAC
ghnJW6XCBQSr+HCC7LJufFacpWZLnaLBbF/PAC8LZbZGfhw7YmUVsj0Md9IerB3k
yERvboGEirxh7FSGGMx3n3Hf1wnnA0N5EAkWZtqX4IJrCHVA+U0lBaOPclYsGaFu
pI7F8c5iVmsSH0z32k9Wni7v0s1Elibchslbe9V1k/VLDwjF9Z1wNtWlBIfP4HGY
ZnUF0Pp6nKm1ckKmjHE/sYthx86eBhBa15lZE+gyp9/RdH7QXtS7+6MidZLgl1yd
1vpcyc4sOwU5LaIUxReK5MJGjLC1znu/KHvbTByG5Ma1bllqtzlTj80SB/0fcXxf
stX1y9OC/Hv5wQYP2XnjuHcMustMJ9/0jWge689Ti/hT2Sc/Exai2GQwwfz6gn1A
KD8oym29TH1kAryJtZYSM4h+crA3gixtgeGWgMfimORlqswyNAscCouR9PLP/WFA
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
nakrj45dhC1pZ5kuRDBsUQ==
`pragma protect end_protected

endmodule


`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "Anlogic"
`pragma protect encrypt_agent_info = "Anlogic Encryption Tool anlogic_2019"
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-002"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
TvOZeQUdKTRyF4VroV/rygoT6mmqkv5M5+/kHJ/Qs5Ic0n4M3Q8a/2ELxIPffag3
hyH/jvSp+PMNAM1CXwbuFkAx0G3TVmQBnzy6f1RoN7CayhTUeKk/1jVO1jtwAZJp
SpknumeiWjh7jPRkYm+0/R+6B2JRGfianw3RgUduQZg=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-003"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
YWGoJMjacPM5z7bw01av8n5g31AfB+K7ncbZ1ZvfF7UZRkdIruTbIQsl/Wqma8w5
UliED8ZRjeD7pvUTEOs0d9K59lh4LX2p1WORM9RljVxa5IXqoqKQ35A7zdsVSk8E
VBDabdu9aimMDyzcyp5cVlKHvazyHjqmzu1g0ge4Sjw=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-004"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
m2wmQMyeuZLFlR2XpIvytHogJmV84zbU5PioSpfKByGxFQWlt1TLjwye2PGy3Ndp
5CSFa92rVxLxC86ZJoVmuYLpzahZGlpYkPbg9XbLMOpmA232Mwimc/NOn6ygqUIp
FjDaee9CSmqop8/b4MkmTBUdZcbN+LAiNWFFGJW4tlg=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-005"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
d6aGf6NU5nCnXBN9CyRi5wkfJOXrKQxlCNHmkNTWlbqWSf6F3R7ZWlLdBqH5pVHb
Wnn1MjWVKCh+ize7Gk1/eFVGcrmEr5kBwnktvXujJizBcHYKotQK7kdJKqkhoJbw
/EkD+86MDdG3Jq6yp7612P9BkRo+dcv5NsP2jAP/mKw=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-006"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
0nGlWnjAKW77HIpnLbHcf4GYeJg/kwvS3PahYu6glZHtpR5+aIWk4wEF6Atf30pF
gNC6JZlgpvHJMY/pofE+g5MbuYqPK7bpmXnbRfu3zdhg6zksW45ErWwO0PhEYYCo
kUrUULWklkNK8nvJGdItNMaEoPP+JTa6hzW8GH7dX9g=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-007"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
qGtqG3YIHiOmfNo5aDaIFVd/8BTiuzNbejne3adz5yUP6ohr0hQNfCVwkuuqklCU
vn2BxPDM19NGm0haiCpweG5Sl3GbP3xXDrE75l2bNpbd4H1ZKzCdyGL5v4jKy2qc
KnxGPXh930seW3M1pnvcs3UIW4i1AIPNTYqUXJAATI0=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-008"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
sFv8IG7aBPFZnWJ2QOHdaDRNKfRwAcya+Tyka68EBWQwk8UppA5/6x/GGdvqmZqv
SsTVNW+N80/IALayf8qxNa/GpWB3O7UY3YbHpmL5iCOw1z0OXZwcyF8F7XaF7Ilw
sy0P8lTqAjs+qgwAcB0Ktk5dyuuWUES5Q7bgfW5kFoM=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-009"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
WRH9NOuNmczWyTwcojxJ8dEWG/bB/DG/dKB82QsWKmCLi3LxU1QsYylbGTUVjs+Y
Cw7iMs1buR4THOUCT4H8LWjCZvI0S1/iowMAkDv3PSEpkVPGOR8H2IFUqU4zRxik
ZO1eOyQ6vf7RhbgA2oHH07uwSuEZfEIqBKqmpYQQJdc=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-beta"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
a5DjsBxDp1N88j3TCn3SOLWcoZpzktrTSyedjP1+H/qViC1eF2TsOHiQM6boxgU8
eN0s9ZaEpoQcfORffpAbq9hOTs3sTMPPCufWUgX97yt9gnY/9C9ASLHfV3iW5pz5
WnDhRwLnN5R6+XFFzaT6OZigcYrui3KLYhQ9lD7j+qc=
`pragma protect key_keyowner = "Cadence Design Systems.", key_keyname = "CDS_RSA_KEY_VER_1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
QqcadAsjwdw9yOFiXu+JzaPYCgE7rHL979aITs4aeR/vufqWfoT+9dYI7mQWxkwk
g6cnqWgVbT4rhjT1mf+q2qHWooJ1u5pkxq3rhGXB0F5vpsLAc95rA6VepL2XN4gx
mMLTmXaGMP9AnK3M1bx0BcTz5jGk3qDuRM/VhDOJYcUVSqV5UNpVzAKx7Zx8BbY5
Ibxu+uYXvmT16EG6a+XPjtoAqM0MLSxG/3GOUmDcnvQi+IGJVDi4b0Senl3NHodR
buZl3Su/GnifMfHsYRq6IRD6jWiuDwIdfndDSB4v9RE6DG9LTE+Mqq1NN8itdJqb
I68tILODE68YG8WnaMXFAA==
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
SQo8Ujy7aP3ogsg5i+a9ZRgudPX2e6qse9ePT3D0i9QfySbFC9z9mxK3g5faEVzL
7Q1izjs3WgwJW/IWBuUdn89rQ+VP1BGtStMIHIJpqwGDbxhyS0SjOAIy/G6HtkQe
uag/DsHNThdDqtkqTwn0445grQLhdCZZAGU2pipzepyMY7XwgoxRgYgbZVH52HLW
9k60TsNCoiyl3PHC0RXVraJhmGsFeWx/YSzaV4B2IxCyaaufl7DQDmohkmDaD15H
32SnHiydm3u5uY6sAGtX+KySj+YBEywz+W4ynrsdE1yRtRNZW/+1LHHJKNK4T/k7
HUew2xymG4I2/nhPJUCqAQ==
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
C/07PVyKfmnvWXyta8wQk51hky/Vf+1EKWgDa6kjuBEJ+ofn4d4IELNeG/DlNdp8
9JasmNcAEcmqHxHGAImUuZJWEnHrk+UYarDAxLq8x7S1GYYWcF2ra3xpiIkW5InB
vfME5c/CsyiPQTQB5OODm2fbtLtPrKjhuj3PBboPDks=
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
KLKVcqomknRpkoRNcBmFCqaW5LLLxx6CCv3MzqrQia2WDNr/AjTQG9O27m0lKWde
cJ8mQNotDRLqjSU5TCOkwEkrT5z0wz9QW56uY8wpErmHN2AaDQ7iNP6LAqpOITUi
St+oSnkgocDZ3wBoN4YXs3BB7UJlCpd264b2sUTSHMEInK4elq3z3wKPirbYXCuT
zQqMNj8CIiqKTj0XrIYNqJvisf4t4KkUaickHl82CSF7BVgmii5MDX52qWf8W6R8
HKJFwp5COA1wqXR1OFhwsJ2XdMjNRQjWvid/+c8Xpkue5OuFiopBkS33GXj+wIr3
A+FfHstRUSkVovpnVSjTsA==
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
miZ8bkKk+mCjZuTXFEqEce1LVcdoDQOxdi9a0+8G2yxCsXJaWzwafrKJGrAs8ooX
LN1Xf4igjiWa/IIguEUWzuDoCN2bjRORhQh7EAvvwVi5l/aMFqfHNRnKsKsBXWr2
r8sO+mmbGWNMiAvpl/khRhCwH1XhhRdiX17RsNzDvJM=
`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 3408)
`pragma protect data_block
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
`pragma protect end_protected

//***************************************************************************
// APB UART Modules
//***************************************************************************
`timescale 1ps / 1ps

module ph1_logic_apb_uart (

    input         apb_pclk   ,
    input         apb_prstn  ,
    output        apb_pready ,
    input         apb_psel   ,
    input         apb_penable,
    input         apb_pwrite ,
    input  [ 7:0] apb_paddr  ,
    input  [31:0] apb_pwdata ,
    output [31:0] apb_prdata ,
    output        apb_pslverr,
    
    input         uart_rxd   ,
	output        uart_txd
);

parameter BAUD_RATE   = 115_200    ;
parameter CLOCK_RATE  = 25_000_000 ;

wire       clk  ;
wire       rstn ;
wire       rst  ;

wire       uart_tx_fifo_empty   ;
wire       uart_tx_fifo_full    ;
wire       uart_tx_fifo_wr_en   ;
wire [7:0] uart_tx_fifo_wr_data ;
wire       uart_tx_fifo_rd_en   ;
wire [7:0] uart_tx_fifo_rd_data ;

wire       uart_rx_fifo_empty   ;
wire       uart_rx_fifo_full    ;
wire       uart_rx_fifo_wr_en   ;
wire [7:0] uart_rx_fifo_wr_data ;
wire       uart_rx_fifo_rd_en   ;
wire [7:0] uart_rx_fifo_rd_data ;

assign clk  = apb_pclk  ;
assign rstn = apb_prstn ;
assign rst  =~apb_prstn ;
assign apb_pslverr = 1'b0 ;
assign apb_pready  = 1'b1 ;

//----------------------------------------------//
wire apb_wr_flag ;
wire apb_rd_flag ;

reg  [31:0] prdata ;

wire [7:0] rx_fifo ; // 0 , read-only
reg  [7:0] tx_fifo ; // 4 , write-only
wire [3:0] status  ; // 8 , read-only
reg  [1:0] ctrl    ; // c , rw

reg        tx_fifo_en ;
reg        rx_fifo_en ;

wire rx_fifo_valid ; // status[0]
wire rx_fifo_full  ; // status[1]
wire tx_fifo_empty ; // status[2]
wire tx_fifo_full  ; // status[3]

wire rst_tx_fifo ;
wire rst_rx_fifo ;

assign rst_tx_fifo = ctrl[0] ;
assign rst_rx_fifo = ctrl[1] ;

assign apb_wr_flag = apb_pwrite ? (apb_psel & apb_penable) : 1'b0 ;
assign apb_rd_flag = apb_pwrite ? 1'b0 : (apb_psel & apb_penable) ;

assign status[0] = rx_fifo_valid ;
assign status[1] = rx_fifo_full  ;
assign status[2] = tx_fifo_empty ;
assign status[3] = tx_fifo_full  ;

assign apb_prdata  = (apb_paddr[3:0] == 4'h0) ? {24'h0, rx_fifo} :
                     (apb_paddr[3:0] == 4'h8) ? {28'h0, status } :
                     (apb_paddr[3:0] == 4'hC) ? {30'h0, ctrl   } : 32'h0 ;

always @ ( posedge clk )
begin
    if ( rst ) begin
        tx_fifo    <= 8'h0 ;
        tx_fifo_en <= 1'b0 ;
        rx_fifo_en <= 1'b0 ;
        ctrl       <= 3'h0 ;
        prdata     <= 32'h0 ;
    end else if ( apb_wr_flag ) begin
        case ( apb_paddr[3:0] )
            4'h4 : begin
                tx_fifo    <= apb_pwdata[7:0] ;
                tx_fifo_en <= apb_wr_flag ;
            end
            4'hC : begin
                ctrl <= apb_pwdata[1:0];
            end
            default : begin
                tx_fifo    <= 8'h0 ;
                tx_fifo_en <= 1'b0 ;
                ctrl       <= ctrl ;
            end
        endcase
    end else if ( apb_rd_flag ) begin
        case ( apb_paddr[3:0] )
            4'h0 : begin
                rx_fifo_en <= apb_rd_flag ;
                prdata <= {24'h0, rx_fifo};
            end
            4'h8 : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= {28'h0, status};
            end
            4'hC : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= {30'h0, ctrl};
            end
            default : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= 32'h0 ;
            end
        endcase
    end else begin
        tx_fifo    <= 8'h0 ;
        tx_fifo_en <= 1'b0 ;
        rx_fifo_en <= 1'b0 ;
        ctrl       <= ctrl ;
        prdata     <= 32'h0 ;
    end

end

//----------------------------------------------//

assign uart_tx_fifo_wr_data = tx_fifo    ;
assign uart_tx_fifo_wr_en   = tx_fifo_en ;

assign rx_fifo = uart_rx_fifo_rd_data ;
assign uart_rx_fifo_rd_en = rx_fifo_en;

assign rx_fifo_valid =~uart_rx_fifo_empty ;
assign rx_fifo_full  = uart_rx_fifo_full  ;
assign tx_fifo_empty = uart_tx_fifo_empty ;
assign tx_fifo_full  = uart_tx_fifo_full  ;

ph1_logic_uart_fifo u_tx_fifo (
    .clk          ( clk ),
	.rst          ( rst | rst_tx_fifo    ),
	.fifo_empty   ( uart_tx_fifo_empty   ),
	.fifo_full    ( uart_tx_fifo_full    ),
	.fifo_wr_en   ( uart_tx_fifo_wr_en   ),
	.fifo_wr_data ( uart_tx_fifo_wr_data ),
	.fifo_rd_en   ( uart_tx_fifo_rd_en   ),
	.fifo_rd_data ( uart_tx_fifo_rd_data )
);

ph1_logic_uart_fifo u_rx_fifo (
    .clk          ( clk ),
	.rst          ( rst | rst_tx_fifo    ),
	.fifo_empty   ( uart_rx_fifo_empty   ),
	.fifo_full    ( uart_rx_fifo_full    ),
	.fifo_wr_en   ( uart_rx_fifo_wr_en   ),
	.fifo_wr_data ( uart_rx_fifo_wr_data ),
	.fifo_rd_en   ( uart_rx_fifo_rd_en   ),
	.fifo_rd_data ( uart_rx_fifo_rd_data )
);

// Instantiate the UART transmitter
ph1_logic_uart_tx #(
    .BAUD_RATE  ( BAUD_RATE  ),
    .CLOCK_RATE ( CLOCK_RATE )
) u_uart_tx (
    .clk_tx             ( clk                  ),
    .rst_clk_tx         ( rst                  ),
    .char_fifo_empty    ( uart_tx_fifo_empty   ),
    .char_fifo_dout     ( uart_tx_fifo_rd_data ),
    .char_fifo_rd_en    ( uart_tx_fifo_rd_en   ),
    .txd_tx             ( uart_txd             )
);

// Instantiate the UART receiver
ph1_logic_uart_rx #(
    .BAUD_RATE  ( BAUD_RATE  ),
    .CLOCK_RATE ( CLOCK_RATE )
) u_uart_rx (
    .clk_rx      ( clk                  ),
    .rst_clk_rx  ( rst                  ),
    .rxd_i       ( uart_rxd             ),
    .rx_data_vld ( uart_rx_fifo_wr_en   ),
    .rx_data     ( uart_rx_fifo_wr_data ),
    .frm_err     (                      )
);

endmodule

`timescale 1ns/1ps

module ph1_logic_meta_harden (
  input            clk_dst    ,
  input            rst_dst    ,
  input            signal_src ,
  output reg       signal_dst
);


//***************************************************************************
// Register declarations
//***************************************************************************
reg             signal_meta;

//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_dst)
begin
    if (rst_dst) begin
        signal_meta <= 1'b0;
        signal_dst  <= 1'b0;
    end else begin
        signal_meta <= signal_src;
        signal_dst  <= signal_meta;
    end
end

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_baud_gen (
  input        clk,
  input        rst,
  output       baud_x16_en
);


//***************************************************************************
// Constant Functions
//***************************************************************************
function integer clogb2;
    input [31:0] value;
    reg   [31:0] my_value;
    begin
        my_value = value - 1;
        for (clogb2 = 0; my_value > 0; clogb2 = clogb2 + 1)
            my_value = my_value >> 1;
    end
endfunction
  
//***************************************************************************
// Parameter definitions
//***************************************************************************

  parameter BAUD_RATE    = 57_600;
  parameter CLOCK_RATE   = 50_000_000;

  localparam OVERSAMPLE_RATE = BAUD_RATE * 16;

  localparam DIVIDER = (CLOCK_RATE+OVERSAMPLE_RATE/2) / OVERSAMPLE_RATE;

  localparam OVERSAMPLE_VALUE = DIVIDER - 1;

  localparam CNT_WID = clogb2(DIVIDER);


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [CNT_WID-1:0] internal_count;
  reg               baud_x16_en_reg;


//***************************************************************************
// Wire declarations
//***************************************************************************
  wire [CNT_WID-1:0] internal_count_m_1;


//***************************************************************************
// Code
//***************************************************************************
assign internal_count_m_1 = internal_count - 1'b1;

always @(posedge clk)
begin
  if (rst)  begin
    internal_count  <= OVERSAMPLE_VALUE;
    baud_x16_en_reg <= 1'b0;
  end else begin
    baud_x16_en_reg   <= (internal_count_m_1 == {CNT_WID{1'b0}});
    if (internal_count == {CNT_WID{1'b0}})  begin
      internal_count    <= OVERSAMPLE_VALUE;
    end else  begin
      internal_count    <= internal_count_m_1;
    end
  end // if rst
end // always 

assign baud_x16_en = baud_x16_en_reg;

endmodule



`timescale 1ps / 1ps
module ph1_logic_uart_fifo #(
    parameter FWFT = 1
)(
    input  clk ,
	input  rst ,
	
	output fifo_empty   ,
	output fifo_full    ,
	
	input        fifo_wr_en   ,
	input  [7:0] fifo_wr_data ,
	
	input        fifo_rd_en   ,
	output [7:0] fifo_rd_data

);

reg  [7:0] fifo_data[0:15];
reg  [7:0] fifo_data_r    ;

reg  [3:0] fifo_wr_addr ;
reg  [3:0] fifo_rd_addr ;

wire [4:0] fifo_gap ;

assign fifo_empty = (fifo_gap == 5'h0) ? 1'b1 : 1'b0 ;
assign fifo_full  = (fifo_gap == 5'hF) ? 1'b1 : 1'b0 ;

integer n ;

always @ ( posedge clk )
begin
    if ( rst ) begin
        fifo_wr_addr <= #100 4'h0 ;
        for (n = 0; n <= 15; n = n + 1) begin
            fifo_data[n] <= 8'h0 ;
        end
    end else if ( fifo_wr_en ) begin
        if (fifo_gap == 5'h0F)
            fifo_wr_addr <= fifo_wr_addr ;
        else if (fifo_wr_addr == 4'hF) begin
            fifo_data[fifo_wr_addr] <= #100 fifo_wr_data ;
            fifo_wr_addr <= #100 4'h0 ;
        end else begin
            fifo_data[fifo_wr_addr] <= #100 fifo_wr_data ;
            fifo_wr_addr <= #100 fifo_wr_addr + 1'b1 ;
        end
    end else begin
        fifo_wr_addr <= fifo_wr_addr ;
    end
end

always @ ( posedge clk )
begin
    if (rst) begin
        fifo_rd_addr <= #100 4'h0 ;
    end else if ( fifo_rd_en ) begin
        if ( fifo_gap == 5'h00 ) begin
            fifo_rd_addr <= #100 fifo_rd_addr ;
        end else if ( fifo_rd_addr == 4'hF ) begin
            fifo_rd_addr <= #100 4'h0 ;
        end else begin
            fifo_rd_addr <= #100 fifo_rd_addr + 1'b1 ;
        end
    end else begin
        fifo_rd_addr <= #100 fifo_rd_addr ;
    end
end // end of always

assign fifo_gap = (fifo_wr_addr >= fifo_rd_addr) ?
                  (fifo_wr_addr  - fifo_rd_addr) :
           ({1'b1, fifo_wr_addr} - fifo_rd_addr) ;

assign fifo_rd_data = fifo_data[fifo_rd_addr[3:0]] ;

endmodule


`timescale 1ns/1ps
module ph1_logic_uart_rx_ctl (
  input            clk_rx,
  input            rst_clk_rx,
  input            baud_x16_en,

  input            rxd_clk_rx,

  output reg [7:0] rx_data,
  output reg       rx_data_rdy,
  output reg       frm_err
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
  localparam 
    IDLE  = 2'b00,
    START = 2'b01,
    DATA  = 2'b10,
    STOP  = 2'b11;


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [1:0]    state;
  reg [3:0]    over_sample_cnt;
  reg [2:0]    bit_cnt;

//***************************************************************************
// Wire declarations
//***************************************************************************
  wire         over_sample_cnt_done;
  wire         bit_cnt_done;
  
//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        state       <= IDLE;
    end else begin
        if (baud_x16_en) begin
            case (state)
            IDLE: begin
                if (!rxd_clk_rx) begin
                    state <= START;
                end
            end // IDLE state

            START: begin
                if (over_sample_cnt_done) begin
                  if (!rxd_clk_rx) begin
                      state <= DATA;
                  end else begin
                      state <= IDLE;
                  end
                end // if over_sample_cnt_done
            end // START state

            DATA: begin
                if (over_sample_cnt_done && bit_cnt_done) begin
                    state <= STOP;
                end
            end // DATA state

            STOP: begin
                if (over_sample_cnt_done) begin
                    state <= IDLE;
                end
            end // STOP state
            endcase
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 


// Oversample counter
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        over_sample_cnt    <= 4'd0;
    end else begin
        if (baud_x16_en)  begin
            if (!over_sample_cnt_done) begin
                over_sample_cnt <= over_sample_cnt - 1'b1;
            end else begin
                if ((state == IDLE) && !rxd_clk_rx) begin
                    over_sample_cnt <= 4'd7;
                end else if ( ((state == START) && !rxd_clk_rx) || (state == DATA)  ) begin
                    over_sample_cnt <= 4'd15;
                end
            end
        end
    end // if rst_clk_rx
end // always 

assign over_sample_cnt_done = (over_sample_cnt == 4'd0);

always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        bit_cnt    <= 3'b0;
    end else begin
        if (baud_x16_en) begin
            if (over_sample_cnt_done) begin
                if (state == START) begin
                    bit_cnt <= 3'd0;
                end else if (state == DATA) begin
                    bit_cnt <= bit_cnt + 1'b1;
                end
            end // if over_sample_cnt_done
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 

assign bit_cnt_done = (bit_cnt == 3'd7);

// Capture the data and generate the rdy signal
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        rx_data     <= 8'b0000_0000;
        rx_data_rdy <= 1'b0;
    end else begin
        if (baud_x16_en && over_sample_cnt_done) begin
            if (state == DATA) begin
                rx_data[bit_cnt] <= rxd_clk_rx;
                rx_data_rdy      <= (bit_cnt == 3'd7);
            end else begin
                rx_data_rdy      <= 1'b0;
            end
        end
    end // if rst_clk_rx
end // always 

// Framing error generation
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        frm_err     <= 1'b0;
    end else begin
        if (baud_x16_en) begin
            if ((state == STOP) && over_sample_cnt_done && !rxd_clk_rx) begin
                frm_err <= 1'b1;
            end else begin
                frm_err <= 1'b0;
            end
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 


endmodule

`timescale 1ns/1ps

module ph1_logic_uart_rx (
  input            clk_rx,
  input            rst_clk_rx,

  input            rxd_i,

  output     [7:0] rx_data,
  output           rx_data_vld,
  output           frm_err
);


//***************************************************************************
// Parameter definitions
//***************************************************************************

  parameter BAUD_RATE    = 115_200;
  parameter CLOCK_RATE   = 50_000_000;

//***************************************************************************
// Wire/Reg declarations
//***************************************************************************
wire rxd_clk_rx ;
wire baud_x16_en;

wire      rx_data_rdy   ;
reg [1:0] rx_data_rdy_r ;
 
//***************************************************************************
// Code
//***************************************************************************
ph1_logic_meta_harden meta_harden_rxd_i0 (
    .clk_dst      (clk_rx),
    .rst_dst      (rst_clk_rx), 
    .signal_src   (rxd_i),
    .signal_dst   (rxd_clk_rx)
);

ph1_logic_uart_baud_gen #(
    .BAUD_RATE  (BAUD_RATE),
    .CLOCK_RATE (CLOCK_RATE)
) uart_baud_gen_rx_i0 (
    .clk         (clk_rx),
    .rst         (rst_clk_rx),
    .baud_x16_en (baud_x16_en)
);

ph1_logic_uart_rx_ctl uart_rx_ctl_i0 (
    .clk_rx      (clk_rx),
    .rst_clk_rx  (rst_clk_rx),
    .baud_x16_en (baud_x16_en),

    .rxd_clk_rx  (rxd_clk_rx),
    
    .rx_data_rdy (rx_data_rdy),
    .rx_data     (rx_data),
    .frm_err     (frm_err)
);

always @ ( posedge clk_rx )
begin
    rx_data_rdy_r <= {rx_data_rdy_r[0], rx_data_rdy};
end

assign rx_data_vld = rx_data_rdy_r[0] & (~rx_data_rdy_r[1]);

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_tx_ctl (
    input            clk_tx          ,
    input            rst_clk_tx      ,
    input            baud_x16_en     ,
    input            char_fifo_empty ,
    input      [7:0] char_fifo_dout  ,
    output           char_fifo_rd_en ,
    output reg       txd_tx
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
  localparam 
    IDLE  = 2'b00,
    START = 2'b01,
    DATA  = 2'b10,
    STOP  = 2'b11;


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [1:0]    state;
  reg [3:0]    over_sample_cnt;
  reg [2:0]    bit_cnt;
  reg          char_fifo_pop;

//***************************************************************************
// Wire declarations
//***************************************************************************
  wire         over_sample_cnt_done;
  wire         bit_cnt_done;
  
//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        state         <= IDLE;
        char_fifo_pop <= 1'b0;
    end else begin
        if (baud_x16_en) begin
            char_fifo_pop <= 1'b0;
            case (state)
            IDLE: begin
                if (!char_fifo_empty) begin
                    state <= START;
                end
            end // IDLE state

            START: begin
                if (over_sample_cnt_done) begin
                    state <= DATA;
                end // if over_sample_cnt_done
            end // START state

            DATA: begin
                if (over_sample_cnt_done && bit_cnt_done) begin
                    char_fifo_pop <= 1'b1;
                    state         <= STOP;
                end
            end // DATA state

            STOP: begin
                if (over_sample_cnt_done) begin
                    if (char_fifo_empty) begin
                        state <= IDLE;
                    end else begin
                    state <= START;
                    end
                end
            end // STOP state
            endcase
        end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign char_fifo_rd_en = char_fifo_pop && baud_x16_en;


// Oversample counter
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        over_sample_cnt    <= 4'd0;
    end else begin
        if (baud_x16_en) begin
            if (!over_sample_cnt_done) begin
                over_sample_cnt <= over_sample_cnt - 1'b1;
            end else begin
                if (((state == IDLE) && !char_fifo_empty) ||
                     (state == START) || 
                     (state == DATA)  ||
                    ((state == STOP) && !char_fifo_empty)) begin
                    over_sample_cnt <= 4'd15;
                end
            end
        end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign over_sample_cnt_done = (over_sample_cnt == 4'd0);

// Track which bit we are about to transmit
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        bit_cnt    <= 3'b0;
    end else begin
       if (baud_x16_en) begin
           if (over_sample_cnt_done) begin
               if (state == START) begin
                   bit_cnt <= 3'd0;
               end else if (state == DATA) begin
                   bit_cnt <= bit_cnt + 1'b1;
               end
           end // if over_sample_cnt_done
       end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign bit_cnt_done = (bit_cnt == 3'd7);

// Generate the output
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        txd_tx    <= 1'b1;
    end else begin
        if (baud_x16_en) begin
            if ((state == STOP) || (state == IDLE)) begin
                txd_tx <= 1'b1;
            end else if (state == START) begin
                txd_tx <= 1'b0;
            end else begin
                txd_tx <= char_fifo_dout[bit_cnt];
            end
        end // if baud_x16_en
    end // if rst
end // always

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_tx (
  input        clk_tx          ,
  input        rst_clk_tx      ,

  input        char_fifo_empty ,
  input  [7:0] char_fifo_dout  ,
  output       char_fifo_rd_en ,

  output       txd_tx
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
parameter BAUD_RATE    = 57_600;
parameter CLOCK_RATE   = 50_000_000;

//***************************************************************************
// Reg declarations
//***************************************************************************

//***************************************************************************
// Wire declarations
//***************************************************************************
wire             baud_x16_en;
  
//***************************************************************************
// Code
//***************************************************************************
ph1_logic_uart_baud_gen #(
    .BAUD_RATE  (BAUD_RATE),
    .CLOCK_RATE (CLOCK_RATE)
) uart_baud_gen_tx_i0 (
    .clk         ( clk_tx      ),
    .rst         ( rst_clk_tx  ),
    .baud_x16_en ( baud_x16_en )
);

ph1_logic_uart_tx_ctl uart_tx_ctl_i0 (
    .clk_tx	            ( clk_tx          ),
    .rst_clk_tx	        ( rst_clk_tx      ),
    .baud_x16_en        ( baud_x16_en     ),
    .char_fifo_empty	( char_fifo_empty ),
    .char_fifo_dout	    ( char_fifo_dout  ),
    .char_fifo_rd_en   	( char_fifo_rd_en ),
    .txd_tx	            ( txd_tx          )
);

endmodule

//***************************************************************************
// APB GPIO Modules
//***************************************************************************
`timescale 1ps / 1ps
module ph1_logic_SopcGpio (
    input               io_clk,
    input               io_rst,
    input      [3:0]    io_apb_PADDR,
    input      [0:0]    io_apb_PSEL,
    input               io_apb_PENABLE,
    output              io_apb_PREADY,
    input               io_apb_PWRITE,
    input      [31:0]   io_apb_PWDATA,
    output reg [31:0]   io_apb_PRDATA,
    output              io_apb_PSLVERROR,
    input      [31:0]   io_gpio_read,
    output     [31:0]   io_gpio_write,
    input      [31:0]   io_gpio_user
);

reg    [31:0]   data_write; // 0
reg    [31:0]   data_read ; // 4
reg    [31:0]   data_user ; // 8

wire   apb_wr_flag ;
wire   apb_rd_flag ;

assign apb_wr_flag = (io_apb_PWRITE == 1'b1) ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;
assign apb_rd_flag = (io_apb_PWRITE == 1'b0) ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_gpio_write = data_write;

always @ ( posedge io_clk ) begin
    data_read <= io_gpio_read ;
    data_user <= io_gpio_user ;
end

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        data_write <= 32'h0;
    end else if(apb_wr_flag)begin
        case (io_apb_PADDR)
        4'b0000:
            data_write <= io_apb_PWDATA;
        default: begin
            data_write <= data_write;
        end
        endcase
    end else begin
        data_write <= data_write ;
    end
end

always @ ( * ) begin
    if (apb_rd_flag) begin
        case (io_apb_PADDR)
        4'b0000:
            io_apb_PRDATA <= data_write;
        4'b0100:
            io_apb_PRDATA <= data_read;
        4'b1000:
            io_apb_PRDATA <= data_user;
        default: begin
            io_apb_PRDATA <= data_read;
        end
        endcase
    end else begin
        io_apb_PRDATA <= data_read  ;
    end
end

endmodule


//***************************************************************************
// APB User DRAM Modules
//***************************************************************************

`timescale 1ps/1ps

module ph1_logic_SopcUserRam (
    input               io_clk,
    input               io_rst,
    input      [17:0]   io_apb_PADDR,
    input      [ 0:0]   io_apb_PSEL,
    input               io_apb_PENABLE,
    output              io_apb_PREADY,
    input               io_apb_PWRITE,
    input      [31:0]   io_apb_PWDATA,
    output     [31:0]   io_apb_PRDATA,
    output              io_apb_PSLVERROR,

    input      [ 7:0]   user_ram_addr    ,
    input               user_ram_wr_en   ,
    input               user_ram_rd_en   ,
    input      [31:0]   user_ram_wr_data ,
    output reg [31:0]   user_ram_rd_data
);

reg  [31:0] ram_symbol[0:255]; //synthesis ram_style = dram

wire [15:0] ram_wr_addr ; //synthesis keep
wire [15:0] ram_rd_addr ; //synthesis keep
wire [31:0] ram_rd_data ; //synthesis keep
wire [31:0] ram_wr_data ; //synthesis keep
wire        ram_wr_en   ; //synthesis keep

wire   apb_wr_flag ;
wire   apb_rd_flag ;

assign apb_wr_flag = io_apb_PWRITE ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;
assign apb_rd_flag = io_apb_PWRITE ? 1'b0 : (io_apb_PSEL[0] & io_apb_PENABLE) ;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_apb_PRDATA    = ram_rd_data ;

assign ram_wr_en        = io_apb_PSEL[0] ? apb_wr_flag        : user_ram_wr_en  ;
assign ram_wr_data      = io_apb_PSEL[0] ? io_apb_PWDATA      : user_ram_wr_data;
assign ram_wr_addr      = io_apb_PSEL[0] ? io_apb_PADDR[17:2] : user_ram_addr   ;
assign ram_rd_addr      = io_apb_PSEL[0] ? io_apb_PADDR[17:2] : user_ram_addr   ;

`ifdef  PH1_DDR_SIM
string ddr_sim_txt_path;
`endif

initial begin
`ifdef  PH1_DDR_SIM
    $value$plusargs("USR_DRAM_SIM_PATH=%s",ddr_sim_txt_path);
    $readmemh(ddr_sim_txt_path,ram_symbol);
`else
    $readmemh("./ddr_ip_1.txt",ram_symbol);
`endif
end


always @ (posedge io_clk) begin
    if ( ram_wr_en ) begin
        ram_symbol[ram_wr_addr] <= ram_wr_data;
    end
end

assign ram_rd_data = ram_symbol[ram_rd_addr];

always @ (posedge io_clk) begin
    if (user_ram_rd_en) begin
        user_ram_rd_data <= ram_rd_data;
    end
end

endmodule


//***************************************************************************
// APB Timer Modules
//***************************************************************************
`timescale 1ps / 1ps
module ph1_logic_SopcTimer (
  input               io_clk,
  input               io_rst,
  input      [27:0]   io_apb_PADDR,
  input               io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output     [31:0]   io_apb_PRDATA,
  output              io_apb_PSLVERROR,
  input               io_interruptClear,
  output reg          io_interrupt
);
  
reg        [31:0]   timer_counter;
wire                timer_setValue;
wire                timer_getValue;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_apb_PRDATA    = timer_counter;

assign timer_setValue = io_apb_PREADY && io_apb_PSEL && io_apb_PENABLE &&   io_apb_PWRITE ;
assign timer_getValue = io_apb_PREADY && io_apb_PSEL && io_apb_PENABLE && (~io_apb_PWRITE);

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        io_interrupt <= 1'b0;
    end else if (timer_counter == 32'h1)begin
        io_interrupt <= 1'b1;
    end else if (io_interruptClear)begin
        io_interrupt <= 1'b0;
    end
end

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        timer_counter <= 32'h0;
    end else if (timer_setValue) begin
        timer_counter <= io_apb_PWDATA;
    end else if ( timer_counter == 32'h0 )begin
        timer_counter <= timer_counter ;
    end else begin
        timer_counter <= timer_counter - 1'b1;
    end
end


endmodule

// this file should be place on the tail of the <ip_name>.v

`ifdef DRAM_DDR4 
`undef DRAM_DDR4
`endif 
`ifdef DRAM_DDR3
`undef DRAM_DDR3
`endif 
`ifdef USE_CLK1 
`undef USE_CLK1 
`endif 
`ifdef USE_CLK2 
`undef USE_CLK2 
`endif 
`ifdef USE_CLK3 
`undef USE_CLK3 
`endif 
`ifdef USE_CLK4 
`undef USE_CLK4 
`endif 
`ifdef USE_DEBUG
`undef USE_DEBUG
`endif 
`ifdef USE_RESET
`undef USE_RESET
`endif 
`ifdef USE_PAR_ALERT
`undef USE_PAR_ALERT
`endif 
`ifdef USE_CS
`undef USE_CS
`endif 
`ifdef USE_DM 
`undef USE_DM 
`endif 
`ifdef DFI_FIFO
`undef DFI_FIFO
`endif 
`ifdef CTRL_INDEX_0
`undef CTRL_INDEX_0
`endif 
`ifdef CTRL_INDEX_1
`undef CTRL_INDEX_1
`endif 
`ifdef USE_PING_PONG_PHY
`undef USE_PING_PONG_PHY
`endif 
`ifdef USE_EFFICIENCY_EQUALIZER
`undef USE_EFFICIENCY_EQUALIZER
`endif 
`ifdef USE_USER_DRAM
`undef USE_USER_DRAM
`endif 
`ifdef PPC_LOC_Y80
`undef PPC_LOC_Y80
`endif 
`ifdef PPC_LOC_Y40
`undef PPC_LOC_Y40
`endif 
`ifdef PPC_LOC_Y0
`undef PPC_LOC_Y0
`endif 

